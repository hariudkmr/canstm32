
canable_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000874c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008964  08008964  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800896c  0800896c  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08008974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020118  2**0
                  CONTENTS
 10 .bss          00000e2c  20000118  20000118  00020118  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f44  20000f44  00020118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125d6  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037f0  00000000  00000000  0003271e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00035f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  00036dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259c9  00000000  00000000  00037ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156e0  00000000  00000000  0005d481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7101  00000000  00000000  00072b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139c62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039a0  00000000  00000000  00139cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080088bc 	.word	0x080088bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	080088bc 	.word	0x080088bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <PollingRoutine>:

/*
 *  Description: The main entry point. Typically in all my projects I call this routine from main all do all my polling here, if i am not using Tasks.
 *
 */
void PollingRoutine(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	PortD_On(Led_Green_Pin);
 80004d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80004d4:	f000 fe64 	bl	80011a0 <PortD_On>
	// polling is currently done in Tasks
	ParseUsbRec();
 80004d8:	f000 f864 	bl	80005a4 <ParseUsbRec>
	SendCanTxMessage1(&hcan1);
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <PollingRoutine+0x28>)
 80004de:	f000 fcb5 	bl	8000e4c <SendCanTxMessage1>
	ParseCanRec();
 80004e2:	f000 f94c 	bl	800077e <ParseCanRec>
	SendUsbMessage();
 80004e6:	f000 fedb 	bl	80012a0 <SendUsbMessage>
	BlinkkLed();
 80004ea:	f000 f805 	bl	80004f8 <BlinkkLed>

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000013c 	.word	0x2000013c

080004f8 <BlinkkLed>:

/*
 * function: blink blue led when there is CAN bus activity
 *
 */
void BlinkkLed(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	switch(ledBlinkMode)  {
 80004fc:	4b26      	ldr	r3, [pc, #152]	; (8000598 <BlinkkLed+0xa0>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d030      	beq.n	8000566 <BlinkkLed+0x6e>
 8000504:	2b02      	cmp	r3, #2
 8000506:	dc45      	bgt.n	8000594 <BlinkkLed+0x9c>
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <BlinkkLed+0x1a>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d012      	beq.n	8000536 <BlinkkLed+0x3e>
			ledBlinkMode = 0;
			currentHalCount = 0;
		}
		break;
	}
}
 8000510:	e040      	b.n	8000594 <BlinkkLed+0x9c>
		if(canBusActive) {
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <BlinkkLed+0xa4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d037      	beq.n	800058a <BlinkkLed+0x92>
			canBusActive = 0;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <BlinkkLed+0xa4>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
			PortB_On(Led_Blue_Pin);
 8000520:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000524:	f000 fe18 	bl	8001158 <PortB_On>
			ledBlinkMode++;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <BlinkkLed+0xa0>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <BlinkkLed+0xa0>)
 8000532:	701a      	strb	r2, [r3, #0]
		break;
 8000534:	e029      	b.n	800058a <BlinkkLed+0x92>
		if(++currentHalCount > 2000) {
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <BlinkkLed+0xa8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <BlinkkLed+0xa8>)
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <BlinkkLed+0xa8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000548:	d921      	bls.n	800058e <BlinkkLed+0x96>
			PortB_Off(Led_Blue_Pin);
 800054a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800054e:	f000 fe15 	bl	800117c <PortB_Off>
			ledBlinkMode++;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <BlinkkLed+0xa0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <BlinkkLed+0xa0>)
 800055c:	701a      	strb	r2, [r3, #0]
			currentHalCount = 0;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <BlinkkLed+0xa8>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
		break;
 8000564:	e013      	b.n	800058e <BlinkkLed+0x96>
		if(++currentHalCount > 50000) {
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <BlinkkLed+0xa8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <BlinkkLed+0xa8>)
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <BlinkkLed+0xa8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000578:	4293      	cmp	r3, r2
 800057a:	d90a      	bls.n	8000592 <BlinkkLed+0x9a>
			ledBlinkMode = 0;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <BlinkkLed+0xa0>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
			currentHalCount = 0;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <BlinkkLed+0xa8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
		break;
 8000588:	e003      	b.n	8000592 <BlinkkLed+0x9a>
		break;
 800058a:	bf00      	nop
 800058c:	e002      	b.n	8000594 <BlinkkLed+0x9c>
		break;
 800058e:	bf00      	nop
 8000590:	e000      	b.n	8000594 <BlinkkLed+0x9c>
		break;
 8000592:	bf00      	nop
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000135 	.word	0x20000135
 800059c:	20000134 	.word	0x20000134
 80005a0:	20000138 	.word	0x20000138

080005a4 <ParseUsbRec>:
 * function: Parse the USB data in the buffer.
 * input: none
 * output: none
 *
 */
void ParseUsbRec(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	uint8_t usbData[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE];
	if(UsbDataAvailable(usbData)) {
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 ff0d 	bl	80013cc <UsbDataAvailable>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01f      	beq.n	80005f8 <ParseUsbRec+0x54>
		switch(usbData[0])
 80005b8:	793b      	ldrb	r3, [r7, #4]
 80005ba:	2b95      	cmp	r3, #149	; 0x95
 80005bc:	d00c      	beq.n	80005d8 <ParseUsbRec+0x34>
 80005be:	2b95      	cmp	r3, #149	; 0x95
 80005c0:	dc1b      	bgt.n	80005fa <ParseUsbRec+0x56>
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d002      	beq.n	80005cc <ParseUsbRec+0x28>
 80005c6:	2b90      	cmp	r3, #144	; 0x90
 80005c8:	d00c      	beq.n	80005e4 <ParseUsbRec+0x40>
			SendFrequency();
			Send_CAN_BTR(&hcan1);
			break;
		}
	}
}
 80005ca:	e016      	b.n	80005fa <ParseUsbRec+0x56>
			SendUsbDataToCanBus(CAN1_NODE, usbData);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4619      	mov	r1, r3
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 ff2d 	bl	8001430 <SendUsbDataToCanBus>
			break;
 80005d6:	e010      	b.n	80005fa <ParseUsbRec+0x56>
			CanSnifferCanInit(&hcan1, usbData);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <ParseUsbRec+0x60>)
 80005de:	f000 f90b 	bl	80007f8 <CanSnifferCanInit>
			break;
 80005e2:	e00a      	b.n	80005fa <ParseUsbRec+0x56>
			SendHardwareInfo();
 80005e4:	f000 f810 	bl	8000608 <SendHardwareInfo>
			SendVersionInfo();
 80005e8:	f000 f83e 	bl	8000668 <SendVersionInfo>
			SendFrequency();
 80005ec:	f000 f86c 	bl	80006c8 <SendFrequency>
			Send_CAN_BTR(&hcan1);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ParseUsbRec+0x60>)
 80005f2:	f000 f899 	bl	8000728 <Send_CAN_BTR>
			break;
 80005f6:	e000      	b.n	80005fa <ParseUsbRec+0x56>
	}
 80005f8:	bf00      	nop
}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000013c 	.word	0x2000013c

08000608 <SendHardwareInfo>:

void SendHardwareInfo(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	731a      	strb	r2, [r3, #12]
	uint8_t i = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	75fb      	strb	r3, [r7, #23]
	data[0] = COMMAND_HARDWARE;
 8000624:	2393      	movs	r3, #147	; 0x93
 8000626:	713b      	strb	r3, [r7, #4]
	while( Hardware[i] != '\0') {
 8000628:	e00d      	b.n	8000646 <SendHardwareInfo+0x3e>
		data[i + 1] = (uint8_t) Hardware[i];
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <SendHardwareInfo+0x5c>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	441a      	add	r2, r3
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3301      	adds	r3, #1
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	3318      	adds	r3, #24
 800063a:	443b      	add	r3, r7
 800063c:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3301      	adds	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
	while( Hardware[i] != '\0') {
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <SendHardwareInfo+0x5c>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1ea      	bne.n	800062a <SendHardwareInfo+0x22>
	}
	AddUsbTxBuffer(data);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe4c 	bl	80012f4 <AddUsbTxBuffer>
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000004 	.word	0x20000004

08000668 <SendVersionInfo>:

void SendVersionInfo(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	731a      	strb	r2, [r3, #12]
	uint8_t i = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
	data[0] = COMMAND_VERSION;
 8000684:	2392      	movs	r3, #146	; 0x92
 8000686:	713b      	strb	r3, [r7, #4]
	while( Version[i] != '\0') {
 8000688:	e00d      	b.n	80006a6 <SendVersionInfo+0x3e>
		data[i + 1] = (uint8_t) Version[i];
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <SendVersionInfo+0x5c>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	441a      	add	r2, r3
 8000692:	7dfb      	ldrb	r3, [r7, #23]
 8000694:	3301      	adds	r3, #1
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	3318      	adds	r3, #24
 800069a:	443b      	add	r3, r7
 800069c:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	3301      	adds	r3, #1
 80006a4:	75fb      	strb	r3, [r7, #23]
	while( Version[i] != '\0') {
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <SendVersionInfo+0x5c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1ea      	bne.n	800068a <SendVersionInfo+0x22>
	}
	AddUsbTxBuffer(data);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe1c 	bl	80012f4 <AddUsbTxBuffer>
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000

080006c8 <SendFrequency>:

void SendFrequency(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	731a      	strb	r2, [r3, #12]
	uint8_t i = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	75fb      	strb	r3, [r7, #23]
	data[0] = COMMAND_FREQUENCY;
 80006e4:	2394      	movs	r3, #148	; 0x94
 80006e6:	713b      	strb	r3, [r7, #4]
	while( Frequency[i] != '\0') {
 80006e8:	e00d      	b.n	8000706 <SendFrequency+0x3e>
		data[i + 1] = (uint8_t) Frequency[i];
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <SendFrequency+0x5c>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	441a      	add	r2, r3
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	3301      	adds	r3, #1
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	3318      	adds	r3, #24
 80006fa:	443b      	add	r3, r7
 80006fc:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	3301      	adds	r3, #1
 8000704:	75fb      	strb	r3, [r7, #23]
	while( Frequency[i] != '\0') {
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <SendFrequency+0x5c>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1ea      	bne.n	80006ea <SendFrequency+0x22>
	}
	AddUsbTxBuffer(data);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fdec 	bl	80012f4 <AddUsbTxBuffer>
}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000008 	.word	0x20000008

08000728 <Send_CAN_BTR>:

void Send_CAN_BTR(CAN_HandleTypeDef *hcan) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	731a      	strb	r2, [r3, #12]
	uint32_t btrValue = READ_REG(hcan->Instance->BTR);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	61fb      	str	r3, [r7, #28]

	data[0] = COMMAND_CAN_BTR;
 800074a:	2391      	movs	r3, #145	; 0x91
 800074c:	723b      	strb	r3, [r7, #8]
	data[1] = btrValue >> 24 & 0xFF;
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	0e1b      	lsrs	r3, r3, #24
 8000752:	b2db      	uxtb	r3, r3
 8000754:	727b      	strb	r3, [r7, #9]
	data[2] = btrValue >> 16 & 0xFF;
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	0c1b      	lsrs	r3, r3, #16
 800075a:	b2db      	uxtb	r3, r3
 800075c:	72bb      	strb	r3, [r7, #10]
	data[3] = btrValue >> 8 & 0xFF;
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b2db      	uxtb	r3, r3
 8000764:	72fb      	strb	r3, [r7, #11]
	data[4] = btrValue & 0xFF;
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	733b      	strb	r3, [r7, #12]
	AddUsbTxBuffer(data);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fdbf 	bl	80012f4 <AddUsbTxBuffer>
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <ParseCanRec>:
 * function: Parse the CAN data in the buffer.
 * input: none
 * output: none
 *
 */
void ParseCanRec(void) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b090      	sub	sp, #64	; 0x40
 8000782:	af00      	add	r7, sp, #0
	uint8_t canMsgAvailableFlag = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CanRxMsgTypeDef canRxMsg;
	uint8_t usbData[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE];

	memset(&usbData, 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2211      	movs	r2, #17
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f008 f88b 	bl	80088ac <memset>

	canMsgAvailableFlag = Can1DataAvailable(&canRxMsg); // check ring buffer for new message
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fc5c 	bl	8001058 <Can1DataAvailable>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(canMsgAvailableFlag) {
 80007a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00f      	beq.n	80007ce <ParseCanRec+0x50>
		if(canRxMsg.CAN_RxHeaderTypeDef.IDE == CAN_EXT_ID) { // EXT ID
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d106      	bne.n	80007c2 <ParseCanRec+0x44>
			SendCanDataToUsb(&canRxMsg, CAN1_NODE);
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fe76 	bl	80014ac <SendCanDataToUsb>
		} else { // STD ID
			SendCanDataToUsb(&canRxMsg, CAN1_NODE);
		}
	}
}
 80007c0:	e005      	b.n	80007ce <ParseCanRec+0x50>
			SendCanDataToUsb(&canRxMsg, CAN1_NODE);
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fe6f 	bl	80014ac <SendCanDataToUsb>
}
 80007ce:	bf00      	nop
 80007d0:	3740      	adds	r7, #64	; 0x40
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <CanBusActivityStatus>:
/*
 * function: This is copied from the CAN_Buffer.c file. You can use this to toggle LED to indicate CAN bus activity
 * input: On or Off state of LED
 * output: none
 */
void CanBusActivityStatus(uint8_t status){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	canBusActive = status;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <CanBusActivityStatus+0x1c>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	7013      	strb	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000134 	.word	0x20000134

080007f8 <CanSnifferCanInit>:
/*
 * Description: Changes the CAN handle baud rate received from the PC. Use the calculator from "bittiming.can-wiki.info" to get the CAN_BTR value
 * Input: the CAN Handle and the CAN_BTR value
 * Output: none
 */
void CanSnifferCanInit(CAN_HandleTypeDef *hcan, uint8_t *data) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]

	uint32_t btrValue = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
	uint8_t usbData[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	731a      	strb	r2, [r3, #12]

	btrValue = data[1] << 24 | data[2] << 16 | data[3] << 8 | data[4]; // parse the BTR data
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	061a      	lsls	r2, r3, #24
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3302      	adds	r3, #2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	431a      	orrs	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	3303      	adds	r3, #3
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	4313      	orrs	r3, r2
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	3204      	adds	r2, #4
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	4313      	orrs	r3, r2
 800083c:	61fb      	str	r3, [r7, #28]

	// some of these snippets were copied from HAL_CAN_Init()
	HAL_CAN_DeInit(hcan);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f001 f81b 	bl	800187a <HAL_CAN_DeInit>

	if (hcan->State == HAL_CAN_STATE_RESET)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <CanSnifferCanInit+0x5e>
	{
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(hcan);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f963 	bl	8000b1c <HAL_CAN_MspInit>
	}

	/* Set the bit timing register */
	WRITE_REG(hcan->Instance->BTR, (uint32_t)(btrValue));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	61da      	str	r2, [r3, #28]

	/* Initialize the error code */
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialize the CAN state */
	hcan->State = HAL_CAN_STATE_READY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2020 	strb.w	r2, [r3, #32]

	if(HAL_CAN_Start(hcan) != HAL_OK) { // start the CAN module
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 f907 	bl	8001a80 <HAL_CAN_Start>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d007      	beq.n	8000888 <CanSnifferCanInit+0x90>
		usbData[0] = COMMAND_NAK; // NAK PC
 8000878:	2315      	movs	r3, #21
 800087a:	723b      	strb	r3, [r7, #8]
		AddUsbTxBuffer(usbData);
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fd37 	bl	80012f4 <AddUsbTxBuffer>
 8000886:	e006      	b.n	8000896 <CanSnifferCanInit+0x9e>
		return;
	}
	usbData[0] = COMMAND_ACK; // ACK PC back
 8000888:	2306      	movs	r3, #6
 800088a:	723b      	strb	r3, [r7, #8]
	AddUsbTxBuffer(usbData);
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fd2f 	bl	80012f4 <AddUsbTxBuffer>
}
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fe5a 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f80c 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f000 f8aa 	bl	8000a00 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008ac:	f000 f872 	bl	8000994 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 80008b0:	f007 fb60 	bl	8007f74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SetCanFilter();
 80008b4:	f000 fa62 	bl	8000d7c <SetCanFilter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PollingRoutine();
 80008b8:	f7ff fe08 	bl	80004cc <PollingRoutine>
 80008bc:	e7fc      	b.n	80008b8 <main+0x1c>
	...

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f007 ffec 	bl	80088ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <SystemClock_Config+0xcc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <SystemClock_Config+0xcc>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <SystemClock_Config+0xcc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SystemClock_Config+0xd0>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000934:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800093e:	2307      	movs	r3, #7
 8000940:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fbba 	bl	80040c0 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000952:	f000 f8b5 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000962:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2105      	movs	r1, #5
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fe1b 	bl	80045b0 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000980:	f000 f89e 	bl	8000ac0 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	; 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_CAN1_Init+0x64>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_CAN1_Init+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009a0:	2206      	movs	r2, #6
 80009a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009b2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80009b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009e6:	f000 fe4d 	bl	8001684 <HAL_CAN_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009f0:	f000 f866 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000013c 	.word	0x2000013c
 80009fc:	40006400 	.word	0x40006400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led_Green_Pin|GPIO_PIN_13|GPIO_PIN_14|Led_Blue_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xbc>)
 8000a8e:	f002 f899 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_Green_Pin PD13 PD14 Led_Blue_Pin */
  GPIO_InitStruct.Pin = Led_Green_Pin|GPIO_PIN_13|GPIO_PIN_14|Led_Blue_Pin;
 8000a92:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0xbc>)
 8000aac:	f001 fdf2 	bl	8002694 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020c00 	.word	0x40020c00

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f001 fd72 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <HAL_CAN_MspInit+0xc4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d14b      	bne.n	8000bd6 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_CAN_MspInit+0xc8>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <HAL_CAN_MspInit+0xc8>)
 8000b48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_CAN_MspInit+0xc8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_CAN_MspInit+0xc8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_CAN_MspInit+0xc8>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_CAN_MspInit+0xc8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b76:	2303      	movs	r3, #3
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b86:	2309      	movs	r3, #9
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	; (8000be8 <HAL_CAN_MspInit+0xcc>)
 8000b92:	f001 fd7f 	bl	8002694 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2013      	movs	r0, #19
 8000b9c:	f001 fd35 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ba0:	2013      	movs	r0, #19
 8000ba2:	f001 fd4e 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2014      	movs	r0, #20
 8000bac:	f001 fd2d 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f001 fd46 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2015      	movs	r0, #21
 8000bbc:	f001 fd25 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bc0:	2015      	movs	r0, #21
 8000bc2:	f001 fd3e 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2016      	movs	r0, #22
 8000bcc:	f001 fd1d 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bd0:	2016      	movs	r0, #22
 8000bd2:	f001 fd36 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40006400 	.word	0x40006400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020c00 	.word	0x40020c00

08000bec <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_CAN_MspDeInit+0x48>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d115      	bne.n	8000c2a <HAL_CAN_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_CAN_MspDeInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_CAN_MspDeInit+0x4c>)
 8000c04:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <HAL_CAN_MspDeInit+0x50>)
 8000c0e:	f001 fedd 	bl	80029cc <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000c12:	2013      	movs	r0, #19
 8000c14:	f001 fd23 	bl	800265e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000c18:	2014      	movs	r0, #20
 8000c1a:	f001 fd20 	bl	800265e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000c1e:	2015      	movs	r0, #21
 8000c20:	f001 fd1d 	bl	800265e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000c24:	2016      	movs	r0, #22
 8000c26:	f001 fd1a 	bl	800265e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40006400 	.word	0x40006400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 fcb6 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <CAN1_TX_IRQHandler+0x10>)
 8000c9a:	f001 f991 	bl	8001fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000013c 	.word	0x2000013c

08000ca8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <CAN1_RX0_IRQHandler+0x14>)
 8000cae:	f001 f987 	bl	8001fc0 <HAL_CAN_IRQHandler>
  CanBusActivityStatus(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fd90 	bl	80007d8 <CanBusActivityStatus>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000013c 	.word	0x2000013c

08000cc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <CAN1_RX1_IRQHandler+0x14>)
 8000cc6:	f001 f97b 	bl	8001fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  CanBusActivityStatus(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fd84 	bl	80007d8 <CanBusActivityStatus>
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000013c 	.word	0x2000013c

08000cd8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <CAN1_SCE_IRQHandler+0x14>)
 8000cde:	f001 f96f 	bl	8001fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
  CanBusActivityStatus(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fd78 	bl	80007d8 <CanBusActivityStatus>
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000013c 	.word	0x2000013c

08000cf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <OTG_FS_IRQHandler+0x10>)
 8000cf6:	f002 f8ce 	bl	8002e96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000a0c 	.word	0x20000a0c

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f007 fd77 	bl	8008848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fd9f 	bl	800089c <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8000d6c:	08008974 	.word	0x08008974
  ldr r2, =_sbss
 8000d70:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8000d74:	20000f44 	.word	0x20000f44

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <SetCanFilter>:
/*
function: Set CAN filter to pass all ID's
input: none
output: none
*/
void SetCanFilter(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	static CAN_FilterTypeDef sFilterConfig;

	//sFilterConfig.FilterNumber           = 0;

	sFilterConfig.FilterMode             = CAN_FILTERMODE_IDMASK;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <SetCanFilter+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale            = CAN_FILTERSCALE_32BIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <SetCanFilter+0x58>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh           = 0x0000;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <SetCanFilter+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow            = 0x0000;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SetCanFilter+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh       = 0x0000;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <SetCanFilter+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow        = 0x0000;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <SetCanFilter+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment   = CAN_RX_FIFO0;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SetCanFilter+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation       = ENABLE;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SetCanFilter+0x58>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	621a      	str	r2, [r3, #32]
	{
		/* Notification Error */
		Error_Handler();
	}
#else
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000db0:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <SetCanFilter+0x58>)
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <SetCanFilter+0x5c>)
 8000db4:	f000 fd84 	bl	80018c0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <SetCanFilter+0x5c>)
 8000dba:	f000 fe61 	bl	8001a80 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) // enables CAN notification. This is not the same as enabling CAN reception.
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <SetCanFilter+0x5c>)
 8000dc2:	f001 f8d7 	bl	8001f74 <HAL_CAN_ActivateNotification>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SetCanFilter+0x54>
	{
		/* Notification Error */
		Error_Handler();
 8000dcc:	f7ff fe78 	bl	8000ac0 <Error_Handler>
	{
		/* Notification Error */
		Error_Handler();
	}
#endif // CAN2
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001ac 	.word	0x200001ac
 8000dd8:	2000013c 	.word	0x2000013c

08000ddc <HAL_CAN_RxFifo0MsgPendingCallback>:
output: none
note: Use CallbackTimer to clear sleep timer for "GotoSleepCallbackFunc()"
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	CanBusActivityStatus(1); // include CAN_Activity.h
#endif// USE_CAN_BUS_ACTIVITY_STATUS
#if defined STM32F042x6
	if(hcan->Instance == CAN) {
#else
	if(hcan->Instance == CAN1) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d108      	bne.n	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
#endif//
		HAL_CAN_GetRxMessage(hcan, (uint32_t) CAN_RX_FIFO0, &RxMessageFifo_0_Buffer1.CAN_RxHeaderTypeDef, RxMessageFifo_0_Buffer1.Data); // enable CAN reception again
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 ffab 	bl	8001d50 <HAL_CAN_GetRxMessage>
		AddCanRxBuffer1(&RxMessageFifo_0_Buffer1);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000dfc:	f000 f8b6 	bl	8000f6c <AddCanRxBuffer1>
	else if(hcan->Instance == CAN2) {
		HAL_CAN_GetRxMessage(hcan, (uint32_t) CAN_RX_FIFO0, &RxMessageFifo_0_Buffer2.CAN_RxHeaderTypeDef, RxMessageFifo_0_Buffer2.Data); // enable CAN reception again
		AddCanRxBuffer2(&RxMessageFifo_0_Buffer2);
	}
#endif
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40006400 	.word	0x40006400
 8000e0c:	20000180 	.word	0x20000180
 8000e10:	20000164 	.word	0x20000164

08000e14 <HAL_CAN_RxFifo1MsgPendingCallback>:
input: CanHandle
output: none
note: Use CallbackTimer to clear sleep timer for "GotoSleepCallbackFunc()"
*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
#if defined STM32F042x6
	if(hcan->Instance == CAN) {
#else
	if(hcan->Instance == CAN1) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d108      	bne.n	8000e38 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>
#endif//
		HAL_CAN_GetRxMessage(hcan, (uint32_t) CAN_RX_FIFO0, &RxMessageFifo_1_Buffer1.CAN_RxHeaderTypeDef, RxMessageFifo_1_Buffer1.Data); // enable CAN reception again
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 ff8f 	bl	8001d50 <HAL_CAN_GetRxMessage>
		AddCanRxBuffer1(&RxMessageFifo_1_Buffer1);
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000e34:	f000 f89a 	bl	8000f6c <AddCanRxBuffer1>
	else if(hcan->Instance == CAN2) {
		HAL_CAN_GetRxMessage(hcan, (uint32_t) CAN_RX_FIFO0, &RxMessageFifo_1_Buffer2.CAN_RxHeaderTypeDef, RxMessageFifo_1_Buffer2.Data); // enable CAN reception again
		AddCanRxBuffer2(&RxMessageFifo_1_Buffer2);
	}
#endif
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40006400 	.word	0x40006400
 8000e44:	200001a4 	.word	0x200001a4
 8000e48:	20000188 	.word	0x20000188

08000e4c <SendCanTxMessage1>:
RING_BUFF_INFO RxMessagePtr2;
#endif


HAL_StatusTypeDef CAN_Status1; // make it global for debugger window
int SendCanTxMessage1(CAN_HandleTypeDef *hcan) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	uint32_t CAN_Tx_Mailboxes; // indicates which tx buffer was used
	if(TxMessagePtr1.iCnt_Handle) { // send available message
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <SendCanTxMessage1+0x54>)
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d01b      	beq.n	8000e94 <SendCanTxMessage1+0x48>
		CAN_Status1 = HAL_CAN_AddTxMessage(hcan, &TxMessageBuffer1[TxMessagePtr1.iIndexOUT].CAN_TxHeaderTypeDef, TxMessageBuffer1[TxMessagePtr1.iIndexOUT].Data, &CAN_Tx_Mailboxes);
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <SendCanTxMessage1+0x54>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	015b      	lsls	r3, r3, #5
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <SendCanTxMessage1+0x58>)
 8000e64:	1899      	adds	r1, r3, r2
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <SendCanTxMessage1+0x54>)
 8000e68:	885b      	ldrh	r3, [r3, #2]
 8000e6a:	015b      	lsls	r3, r3, #5
 8000e6c:	3318      	adds	r3, #24
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <SendCanTxMessage1+0x58>)
 8000e70:	441a      	add	r2, r3
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fe8f 	bl	8001b9a <HAL_CAN_AddTxMessage>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <SendCanTxMessage1+0x5c>)
 8000e82:	701a      	strb	r2, [r3, #0]
		if (CAN_Status1 == HAL_OK)
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <SendCanTxMessage1+0x5c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <SendCanTxMessage1+0x48>
		{
			DRV_RingBuffPtr__Output(&TxMessagePtr1, CAN_MAX_TX_BUFF); // increment output buffer ptr
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <SendCanTxMessage1+0x54>)
 8000e90:	f000 f9e1 	bl	8001256 <DRV_RingBuffPtr__Output>
		}
	}
	return TxMessagePtr1.iCnt_Handle; // if no more message to handle then 0 will be returned
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <SendCanTxMessage1+0x54>)
 8000e96:	889b      	ldrh	r3, [r3, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200003f4 	.word	0x200003f4
 8000ea4:	200001d4 	.word	0x200001d4
 8000ea8:	20000404 	.word	0x20000404

08000eac <AddCanTxBuffer1>:

// add to Tx buffer
void AddCanTxBuffer1(CanTxMsgTypeDef *canMsg) {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	unsigned char i;
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.ExtId = canMsg->CAN_TxHeaderTypeDef.ExtId;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	492a      	ldr	r1, [pc, #168]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000ec0:	0143      	lsls	r3, r0, #5
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.StdId = canMsg->CAN_TxHeaderTypeDef.StdId;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4925      	ldr	r1, [pc, #148]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000ed4:	0143      	lsls	r3, r0, #5
 8000ed6:	440b      	add	r3, r1
 8000ed8:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.RTR = canMsg->CAN_TxHeaderTypeDef.RTR;
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	4920      	ldr	r1, [pc, #128]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000ee6:	0143      	lsls	r3, r0, #5
 8000ee8:	440b      	add	r3, r1
 8000eea:	330c      	adds	r3, #12
 8000eec:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.IDE = canMsg->CAN_TxHeaderTypeDef.IDE;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	491b      	ldr	r1, [pc, #108]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000efa:	0143      	lsls	r3, r0, #5
 8000efc:	440b      	add	r3, r1
 8000efe:	3308      	adds	r3, #8
 8000f00:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.DLC = canMsg->CAN_TxHeaderTypeDef.DLC;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	4916      	ldr	r1, [pc, #88]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000f0e:	0143      	lsls	r3, r0, #5
 8000f10:	440b      	add	r3, r1
 8000f12:	3310      	adds	r3, #16
 8000f14:	601a      	str	r2, [r3, #0]
	for(i = 0; i < TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.DLC; i++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e011      	b.n	8000f40 <AddCanTxBuffer1+0x94>
		TxMessageBuffer1[TxMessagePtr1.iIndexIN].Data[i] = canMsg->Data[i];
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	461c      	mov	r4, r3
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	440a      	add	r2, r1
 8000f2a:	7e10      	ldrb	r0, [r2, #24]
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000f2e:	0162      	lsls	r2, r4, #5
 8000f30:	440a      	add	r2, r1
 8000f32:	4413      	add	r3, r2
 8000f34:	3318      	adds	r3, #24
 8000f36:	4602      	mov	r2, r0
 8000f38:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.DLC; i++) {
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <AddCanTxBuffer1+0xbc>)
 8000f48:	015b      	lsls	r3, r3, #5
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3e3      	bcc.n	8000f1c <AddCanTxBuffer1+0x70>
	}
	DRV_RingBuffPtr__Input(&TxMessagePtr1, CAN_MAX_TX_BUFF); // increment input buffer ptr
 8000f54:	2108      	movs	r1, #8
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <AddCanTxBuffer1+0xb8>)
 8000f58:	f000 f934 	bl	80011c4 <DRV_RingBuffPtr__Input>
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	200003f4 	.word	0x200003f4
 8000f68:	200001d4 	.word	0x200001d4

08000f6c <AddCanRxBuffer1>:

// add to Rx buffer
void AddCanRxBuffer1(CanRxMsgTypeDef *canMsg) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	unsigned char i;
	RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.ExtId = canMsg->CAN_RxHeaderTypeDef.ExtId;
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4935      	ldr	r1, [pc, #212]	; (8001054 <AddCanRxBuffer1+0xe8>)
 8000f80:	4603      	mov	r3, r0
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4403      	add	r3, r0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	601a      	str	r2, [r3, #0]
	RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.StdId = canMsg->CAN_RxHeaderTypeDef.StdId;
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	492e      	ldr	r1, [pc, #184]	; (8001054 <AddCanRxBuffer1+0xe8>)
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4403      	add	r3, r0
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	601a      	str	r2, [r3, #0]
	RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.RTR = canMsg->CAN_RxHeaderTypeDef.RTR;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	4928      	ldr	r1, [pc, #160]	; (8001054 <AddCanRxBuffer1+0xe8>)
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4403      	add	r3, r0
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	601a      	str	r2, [r3, #0]
	RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.IDE = canMsg->CAN_RxHeaderTypeDef.IDE;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	4922      	ldr	r1, [pc, #136]	; (8001054 <AddCanRxBuffer1+0xe8>)
 8000fcc:	4603      	mov	r3, r0
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4403      	add	r3, r0
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	601a      	str	r2, [r3, #0]
	RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.DLC = canMsg->CAN_RxHeaderTypeDef.DLC;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	491b      	ldr	r1, [pc, #108]	; (8001054 <AddCanRxBuffer1+0xe8>)
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4403      	add	r3, r0
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3310      	adds	r3, #16
 8000ff2:	601a      	str	r2, [r3, #0]
	for(i = 0; i < RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.DLC; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e014      	b.n	8001024 <AddCanRxBuffer1+0xb8>
		RxMessageBuffer1[RxMessagePtr1.iIndexIN].Data[i] = canMsg->Data[i];
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8000ffe:	8812      	ldrh	r2, [r2, #0]
 8001000:	4610      	mov	r0, r2
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	440b      	add	r3, r1
 8001008:	7f1c      	ldrb	r4, [r3, #28]
 800100a:	4912      	ldr	r1, [pc, #72]	; (8001054 <AddCanRxBuffer1+0xe8>)
 800100c:	4603      	mov	r3, r0
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4403      	add	r3, r0
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	4413      	add	r3, r2
 8001018:	331c      	adds	r3, #28
 800101a:	4622      	mov	r2, r4
 800101c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < RxMessageBuffer1[RxMessagePtr1.iIndexIN].CAN_RxHeaderTypeDef.DLC; i++) {
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	3301      	adds	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	4909      	ldr	r1, [pc, #36]	; (8001054 <AddCanRxBuffer1+0xe8>)
 800102e:	4603      	mov	r3, r0
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4403      	add	r3, r0
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3310      	adds	r3, #16
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3dc      	bcc.n	8000ffa <AddCanRxBuffer1+0x8e>
	}
	DRV_RingBuffPtr__Input(&RxMessagePtr1, CAN_MAX_TX_BUFF); // increment input buffer ptr
 8001040:	2108      	movs	r1, #8
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <AddCanRxBuffer1+0xe4>)
 8001044:	f000 f8be 	bl	80011c4 <DRV_RingBuffPtr__Input>
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	200003fc 	.word	0x200003fc
 8001054:	200002d4 	.word	0x200002d4

08001058 <Can1DataAvailable>:
 * Copy buffer to canMsg array
 * Input canMsg: pointer to array
 * Output: 1 if data available, 0 if no new data
 */
uint8_t Can1DataAvailable(CanRxMsgTypeDef *canMsg)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint8_t i, canMsgAvailable = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	73bb      	strb	r3, [r7, #14]
	if(RxMessagePtr1.iCnt_Handle) {
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <Can1DataAvailable+0xf8>)
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d06b      	beq.n	8001144 <Can1DataAvailable+0xec>
		canMsg->CAN_RxHeaderTypeDef.ExtId = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.ExtId;
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <Can1DataAvailable+0xf8>)
 800106e:	885b      	ldrh	r3, [r3, #2]
 8001070:	4619      	mov	r1, r3
 8001072:	4a38      	ldr	r2, [pc, #224]	; (8001154 <Can1DataAvailable+0xfc>)
 8001074:	460b      	mov	r3, r1
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
		canMsg->CAN_RxHeaderTypeDef.StdId = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.StdId;
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <Can1DataAvailable+0xf8>)
 8001088:	885b      	ldrh	r3, [r3, #2]
 800108a:	4619      	mov	r1, r3
 800108c:	4a31      	ldr	r2, [pc, #196]	; (8001154 <Can1DataAvailable+0xfc>)
 800108e:	460b      	mov	r3, r1
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
		canMsg->CAN_RxHeaderTypeDef.RTR = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.RTR;
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <Can1DataAvailable+0xf8>)
 80010a0:	885b      	ldrh	r3, [r3, #2]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <Can1DataAvailable+0xfc>)
 80010a6:	460b      	mov	r3, r1
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	330c      	adds	r3, #12
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
		canMsg->CAN_RxHeaderTypeDef.IDE = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.IDE;
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <Can1DataAvailable+0xf8>)
 80010ba:	885b      	ldrh	r3, [r3, #2]
 80010bc:	4619      	mov	r1, r3
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <Can1DataAvailable+0xfc>)
 80010c0:	460b      	mov	r3, r1
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3308      	adds	r3, #8
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	609a      	str	r2, [r3, #8]
		canMsg->CAN_RxHeaderTypeDef.DLC = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.DLC;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <Can1DataAvailable+0xf8>)
 80010d4:	885b      	ldrh	r3, [r3, #2]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <Can1DataAvailable+0xfc>)
 80010da:	460b      	mov	r3, r1
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3310      	adds	r3, #16
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]
		for(i = 0; i < RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.DLC; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e014      	b.n	800111c <Can1DataAvailable+0xc4>
			canMsg->Data[i] = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].Data[i];
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <Can1DataAvailable+0xf8>)
 80010f4:	885b      	ldrh	r3, [r3, #2]
 80010f6:	461c      	mov	r4, r3
 80010f8:	7bf9      	ldrb	r1, [r7, #15]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	4815      	ldr	r0, [pc, #84]	; (8001154 <Can1DataAvailable+0xfc>)
 80010fe:	4623      	mov	r3, r4
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4423      	add	r3, r4
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4403      	add	r3, r0
 8001108:	440b      	add	r3, r1
 800110a:	331c      	adds	r3, #28
 800110c:	7819      	ldrb	r1, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	460a      	mov	r2, r1
 8001114:	771a      	strb	r2, [r3, #28]
		for(i = 0; i < RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.DLC; i++) {
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3301      	adds	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <Can1DataAvailable+0xf8>)
 8001120:	885b      	ldrh	r3, [r3, #2]
 8001122:	4618      	mov	r0, r3
 8001124:	490b      	ldr	r1, [pc, #44]	; (8001154 <Can1DataAvailable+0xfc>)
 8001126:	4603      	mov	r3, r0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4403      	add	r3, r0
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3310      	adds	r3, #16
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3dc      	bcc.n	80010f2 <Can1DataAvailable+0x9a>
		}
		DRV_RingBuffPtr__Output(&RxMessagePtr1, CAN_MAX_RX_BUFF); // increment output buffer ptr
 8001138:	2108      	movs	r1, #8
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <Can1DataAvailable+0xf8>)
 800113c:	f000 f88b 	bl	8001256 <DRV_RingBuffPtr__Output>
		canMsgAvailable = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	73bb      	strb	r3, [r7, #14]
	}
	return canMsgAvailable;
 8001144:	7bbb      	ldrb	r3, [r7, #14]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	200003fc 	.word	0x200003fc
 8001154:	200002d4 	.word	0x200002d4

08001158 <PortB_On>:
	HAL_GPIO_TogglePin(GPIOA, pin);
  return 0;
}

// port B
int8_t PortB_On (uint32_t pin) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	b29b      	uxth	r3, r3
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <PortB_On+0x20>)
 800116a:	f001 fd2b 	bl	8002bc4 <HAL_GPIO_WritePin>
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020400 	.word	0x40020400

0800117c <PortB_Off>:

int8_t PortB_Off (uint32_t pin) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <PortB_Off+0x20>)
 800118e:	f001 fd19 	bl	8002bc4 <HAL_GPIO_WritePin>
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020400 	.word	0x40020400

080011a0 <PortD_On>:
}
#endif // __STM32F1xx_HAL_CAN_H

#ifdef STM32F407xx
// port D
int8_t PortD_On (uint32_t pin) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, pin, GPIO_PIN_SET);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <PortD_On+0x20>)
 80011b2:	f001 fd07 	bl	8002bc4 <HAL_GPIO_WritePin>
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020c00 	.word	0x40020c00

080011c4 <DRV_RingBuffPtr__Input>:

	ptr->iCnt_Handle = 0;
	ptr->iCnt_OverFlow = 0;
}

void DRV_RingBuffPtr__Input(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	ptr->iIndexIN++;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	801a      	strh	r2, [r3, #0]
	if (ptr->iIndexIN >= iBufferSize)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d802      	bhi.n	80011ec <DRV_RingBuffPtr__Input+0x28>
		ptr->iIndexIN = 0;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	801a      	strh	r2, [r3, #0]

	ptr->iCnt_Handle++;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	809a      	strh	r2, [r3, #4]
	if (ptr->iIndexIN == ptr->iIndexOUT) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	885b      	ldrh	r3, [r3, #2]
 8001200:	429a      	cmp	r2, r3
 8001202:	d122      	bne.n	800124a <DRV_RingBuffPtr__Input+0x86>
		ptr->iCnt_OverFlow++;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	3301      	adds	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	80da      	strh	r2, [r3, #6]
		if (ptr->iCnt_OverFlow > 50000)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	88db      	ldrh	r3, [r3, #6]
 8001214:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001218:	4293      	cmp	r3, r2
 800121a:	d902      	bls.n	8001222 <DRV_RingBuffPtr__Input+0x5e>
			ptr->iCnt_OverFlow = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	80da      	strh	r2, [r3, #6]
		if (ptr->iIndexIN == 0) {
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <DRV_RingBuffPtr__Input+0x74>
			ptr->iIndexOUT = iBufferSize - 1;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	805a      	strh	r2, [r3, #2]
 8001236:	e005      	b.n	8001244 <DRV_RingBuffPtr__Input+0x80>
		} else {
			ptr->iIndexOUT = ptr->iIndexIN - 1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	805a      	strh	r2, [r3, #2]
		}
		ptr->iCnt_Handle = 1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	809a      	strh	r2, [r3, #4]
	}
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DRV_RingBuffPtr__Output>:

void DRV_RingBuffPtr__Output(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
	if (ptr->iCnt_Handle) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	889b      	ldrh	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d014      	beq.n	8001292 <DRV_RingBuffPtr__Output+0x3c>
		ptr->iIndexOUT++;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	885b      	ldrh	r3, [r3, #2]
 800126c:	3301      	adds	r3, #1
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	805a      	strh	r2, [r3, #2]
		if (ptr->iIndexOUT >= iBufferSize)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	885b      	ldrh	r3, [r3, #2]
 8001278:	461a      	mov	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4293      	cmp	r3, r2
 800127e:	d802      	bhi.n	8001286 <DRV_RingBuffPtr__Output+0x30>
			ptr->iIndexOUT = 0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	805a      	strh	r2, [r3, #2]
		ptr->iCnt_Handle--;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	809a      	strh	r2, [r3, #4]
	}
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SendUsbMessage>:
RING_BUFF_INFO usbRxRingBuffPtr;

extern USBD_HandleTypeDef hUsbDeviceFS;

// poll this to check if usb data is available to send
int SendUsbMessage(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	uint8_t USB_Status;
	if(usbTxRingBuffPtr.iCnt_Handle) { // send available message
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <SendUsbMessage+0x48>)
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d015      	beq.n	80012da <SendUsbMessage+0x3a>
		USB_Status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, usbTxBuffer[usbTxRingBuffPtr.iIndexOUT], USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <SendUsbMessage+0x48>)
 80012b0:	885b      	ldrh	r3, [r3, #2]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4613      	mov	r3, r2
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <SendUsbMessage+0x4c>)
 80012bc:	4413      	add	r3, r2
 80012be:	2211      	movs	r2, #17
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <SendUsbMessage+0x50>)
 80012c4:	f005 f9fa 	bl	80066bc <USBD_CUSTOM_HID_SendReport>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
		if (USB_Status == USBD_OK) // make sure data was sent before incrementing pointer
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d103      	bne.n	80012da <SendUsbMessage+0x3a>
		{
			DRV_RingBuffPtr__Output(&usbTxRingBuffPtr, USB_MAX_RING_BUFF); // increment output buffer ptr
 80012d2:	2108      	movs	r1, #8
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <SendUsbMessage+0x48>)
 80012d6:	f7ff ffbe 	bl	8001256 <DRV_RingBuffPtr__Output>
		}
	}
	return usbTxRingBuffPtr.iCnt_Handle; // if no more message to handle then 0 will be returned
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <SendUsbMessage+0x48>)
 80012dc:	889b      	ldrh	r3, [r3, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000490 	.word	0x20000490
 80012ec:	20000408 	.word	0x20000408
 80012f0:	20000530 	.word	0x20000530

080012f4 <AddUsbTxBuffer>:

// adds data to USB Tx buffer
void AddUsbTxBuffer(uint8_t *data) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	memset(&usbTxBuffer[usbTxRingBuffPtr.iIndexIN], 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <AddUsbTxBuffer+0x64>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4613      	mov	r3, r2
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <AddUsbTxBuffer+0x68>)
 800130a:	4413      	add	r3, r2
 800130c:	2211      	movs	r2, #17
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f007 facb 	bl	80088ac <memset>
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e012      	b.n	8001342 <AddUsbTxBuffer+0x4e>
		usbTxBuffer[usbTxRingBuffPtr.iIndexIN][i] = data[i];
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <AddUsbTxBuffer+0x64>)
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	4611      	mov	r1, r2
 8001328:	7818      	ldrb	r0, [r3, #0]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <AddUsbTxBuffer+0x68>)
 800132c:	460b      	mov	r3, r1
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	440b      	add	r3, r1
 8001332:	441a      	add	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	4602      	mov	r2, r0
 800133a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b10      	cmp	r3, #16
 8001346:	d9e9      	bls.n	800131c <AddUsbTxBuffer+0x28>
	}
	DRV_RingBuffPtr__Input(&usbTxRingBuffPtr, USB_MAX_RING_BUFF);
 8001348:	2108      	movs	r1, #8
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <AddUsbTxBuffer+0x64>)
 800134c:	f7ff ff3a 	bl	80011c4 <DRV_RingBuffPtr__Input>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000490 	.word	0x20000490
 800135c:	20000408 	.word	0x20000408

08001360 <AddUsbRxBuffer>:

// add data to USB Rx buffer
void AddUsbRxBuffer(uint8_t *data) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	memset(&usbRxBuffer[usbRxRingBuffPtr.iIndexIN], 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <AddUsbRxBuffer+0x64>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <AddUsbRxBuffer+0x68>)
 8001376:	4413      	add	r3, r2
 8001378:	2211      	movs	r2, #17
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f007 fa95 	bl	80088ac <memset>
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e012      	b.n	80013ae <AddUsbRxBuffer+0x4e>
		usbRxBuffer[usbRxRingBuffPtr.iIndexIN][i] = data[i];
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <AddUsbRxBuffer+0x64>)
 8001390:	8812      	ldrh	r2, [r2, #0]
 8001392:	4611      	mov	r1, r2
 8001394:	7818      	ldrb	r0, [r3, #0]
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <AddUsbRxBuffer+0x68>)
 8001398:	460b      	mov	r3, r1
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	441a      	add	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	4602      	mov	r2, r0
 80013a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d9e9      	bls.n	8001388 <AddUsbRxBuffer+0x28>
	}
	DRV_RingBuffPtr__Input(&usbRxRingBuffPtr, USB_MAX_RING_BUFF);
 80013b4:	2108      	movs	r1, #8
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <AddUsbRxBuffer+0x64>)
 80013b8:	f7ff ff04 	bl	80011c4 <DRV_RingBuffPtr__Input>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000520 	.word	0x20000520
 80013c8:	20000498 	.word	0x20000498

080013cc <UsbDataAvailable>:
/*
 * Check for USB Rx message
 * Input data: pointer to array to save data from Rx buffer
 * Output return 1 if data available, 0 if no data
 */
uint8_t UsbDataAvailable(uint8_t *data) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	uint8_t dataAvailableFlag = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
	if(usbRxRingBuffPtr.iCnt_Handle) {
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <UsbDataAvailable+0x5c>)
 80013da:	889b      	ldrh	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01d      	beq.n	800141c <UsbDataAvailable+0x50>
		for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	e011      	b.n	800140a <UsbDataAvailable+0x3e>
			data[i] = usbRxBuffer[usbRxRingBuffPtr.iIndexOUT][i];
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <UsbDataAvailable+0x5c>)
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	4618      	mov	r0, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	490e      	ldr	r1, [pc, #56]	; (800142c <UsbDataAvailable+0x60>)
 80013f4:	4603      	mov	r3, r0
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4403      	add	r3, r0
 80013fa:	4419      	add	r1, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	440b      	add	r3, r1
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	7013      	strb	r3, [r2, #0]
		for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3301      	adds	r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d9ea      	bls.n	80013e6 <UsbDataAvailable+0x1a>
		}
		dataAvailableFlag = 1;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
		DRV_RingBuffPtr__Output(&usbRxRingBuffPtr, USB_MAX_RING_BUFF);
 8001414:	2108      	movs	r1, #8
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <UsbDataAvailable+0x5c>)
 8001418:	f7ff ff1d 	bl	8001256 <DRV_RingBuffPtr__Output>
	}
	return dataAvailableFlag;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000520 	.word	0x20000520
 800142c:	20000498 	.word	0x20000498

08001430 <SendUsbDataToCanBus>:
/* Description: parse usb data
 * Input canChannel: which CAN node to send message to
 * Input data: The USB data
 * Output none
 */
void SendUsbDataToCanBus(uint8_t canChannel, uint8_t *data) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b090      	sub	sp, #64	; 0x40
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]

	CanTxMsgTypeDef msg;
	UsbCanStruct usbCanStruct;

	memcpy(usbCanStruct.array.msgArray, data, 20); // remove command
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2214      	movs	r2, #20
 8001442:	6839      	ldr	r1, [r7, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f007 fa23 	bl	8008890 <memcpy>

	// data[0] is command from USB
	msg.CAN_TxHeaderTypeDef.IDE = usbCanStruct.msgBytes.IDE;
 800144a:	7a7b      	ldrb	r3, [r7, #9]
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
	if(msg.CAN_TxHeaderTypeDef.IDE == CAN_ID_STD) {
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <SendUsbDataToCanBus+0x2a>
		msg.CAN_TxHeaderTypeDef.StdId = usbCanStruct.msgBytes.ArbId;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	e001      	b.n	800145e <SendUsbDataToCanBus+0x2e>
	} else {
		msg.CAN_TxHeaderTypeDef.ExtId = usbCanStruct.msgBytes.ArbId;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	623b      	str	r3, [r7, #32]
	}
	msg.CAN_TxHeaderTypeDef.RTR = usbCanStruct.msgBytes.RTR;// RTR
 800145e:	7abb      	ldrb	r3, [r7, #10]
 8001460:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
	msg.CAN_TxHeaderTypeDef.DLC = usbCanStruct.msgBytes.DLC;//
 8001468:	7c3b      	ldrb	r3, [r7, #16]
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < 8; i++) { // copy 8 bytes even though DLC could be less
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001470:	e00d      	b.n	800148e <SendUsbDataToCanBus+0x5e>
		msg.Data[i] = usbCanStruct.dataBytes.array[i];
 8001472:	f107 0211 	add.w	r2, r7, #17
 8001476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001478:	4413      	add	r3, r2
 800147a:	7819      	ldrb	r1, [r3, #0]
 800147c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001482:	4413      	add	r3, r2
 8001484:	460a      	mov	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++) { // copy 8 bytes even though DLC could be less
 8001488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148a:	3301      	adds	r3, #1
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	2b07      	cmp	r3, #7
 8001492:	ddee      	ble.n	8001472 <SendUsbDataToCanBus+0x42>
	}

	if(canChannel == CAN1_NODE) {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <SendUsbDataToCanBus+0x74>
		AddCanTxBuffer1(&msg);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fd04 	bl	8000eac <AddCanTxBuffer1>
	} else {
#ifdef USE_CAN_BUFFER_2
		AddCanTxBuffer2(&msg);
#endif
	}
}
 80014a4:	bf00      	nop
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <SendCanDataToUsb>:

// just the opposite, copy CAN to USB data
void SendCanDataToUsb(CanRxMsgTypeDef *msg, uint8_t node) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	77fb      	strb	r3, [r7, #31]
	UsbCanStruct usbCanStruct = {0};
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]


	usbCanStruct.msgBytes.Command = COMMAND_MESSAGE;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	723b      	strb	r3, [r7, #8]
	usbCanStruct.msgBytes.IDE = msg->CAN_RxHeaderTypeDef.IDE & 0x0F;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	727b      	strb	r3, [r7, #9]

	if(usbCanStruct.msgBytes.IDE == CAN_EXT_ID) {
 80014de:	7a7b      	ldrb	r3, [r7, #9]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d103      	bne.n	80014ec <SendCanDataToUsb+0x40>
		usbCanStruct.msgBytes.ArbId = msg->CAN_RxHeaderTypeDef.ExtId;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e002      	b.n	80014f2 <SendCanDataToUsb+0x46>
	} else {
		usbCanStruct.msgBytes.ArbId = msg->CAN_RxHeaderTypeDef.StdId;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
	}

	usbCanStruct.msgBytes.RTR = msg->CAN_RxHeaderTypeDef.RTR & 0x0F;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	7abb      	ldrb	r3, [r7, #10]
 80014fe:	f362 0300 	bfi	r3, r2, #0, #1
 8001502:	72bb      	strb	r3, [r7, #10]
	usbCanStruct.msgBytes.Node = node;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	b2da      	uxtb	r2, r3
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f362 0303 	bfi	r3, r2, #0, #4
 8001512:	72fb      	strb	r3, [r7, #11]
	usbCanStruct.msgBytes.DLC = msg->CAN_RxHeaderTypeDef.DLC & 0x0F;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	b2db      	uxtb	r3, r3
 8001520:	743b      	strb	r3, [r7, #16]

	for(i = 0; i < 8; i++) {
 8001522:	2300      	movs	r3, #0
 8001524:	77fb      	strb	r3, [r7, #31]
 8001526:	e00b      	b.n	8001540 <SendCanDataToUsb+0x94>
		usbCanStruct.dataBytes.array[i] = msg->Data[i];
 8001528:	7ffa      	ldrb	r2, [r7, #31]
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	440a      	add	r2, r1
 8001530:	7f12      	ldrb	r2, [r2, #28]
 8001532:	3320      	adds	r3, #32
 8001534:	443b      	add	r3, r7
 8001536:	f803 2c0f 	strb.w	r2, [r3, #-15]
	for(i = 0; i < 8; i++) {
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	3301      	adds	r3, #1
 800153e:	77fb      	strb	r3, [r7, #31]
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	2b07      	cmp	r3, #7
 8001544:	d9f0      	bls.n	8001528 <SendCanDataToUsb+0x7c>
	}

	AddUsbTxBuffer(usbCanStruct.array.msgArray);
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fed2 	bl	80012f4 <AddUsbTxBuffer>
}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f001 f837 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fa9e 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 f85d 	bl	800267a <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f001 f817 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000000c 	.word	0x2000000c
 80015f4:	20000014 	.word	0x20000014
 80015f8:	20000010 	.word	0x20000010

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000014 	.word	0x20000014
 8001620:	20000528 	.word	0x20000528

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000528 	.word	0x20000528

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000014 	.word	0x20000014

08001684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0ed      	b.n	8001872 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fa3a 	bl	8000b1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff ffb4 	bl	8001624 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff ffb0 	bl	8001624 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0c5      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0e5      	beq.n	80016c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0202 	bic.w	r2, r2, #2
 8001702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff ff8e 	bl	8001624 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff ff8a 	bl	8001624 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e09f      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e5      	bne.n	800170c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e007      	b.n	800176a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e5b      	ldrb	r3, [r3, #25]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e007      	b.n	8001794 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0220 	bic.w	r2, r2, #32
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7edb      	ldrb	r3, [r3, #27]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0210 	bic.w	r2, r2, #16
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0210 	orr.w	r2, r2, #16
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7f1b      	ldrb	r3, [r3, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7f5b      	ldrb	r3, [r3, #29]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0204 	orr.w	r2, r2, #4
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e015      	b.n	80018b8 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f93b 	bl	8001b08 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff f9aa 	bl	8000bec <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018a6:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80018d8:	7cfb      	ldrb	r3, [r7, #19]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d003      	beq.n	80018e6 <HAL_CAN_ConfigFilter+0x26>
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	f040 80be 	bne.w	8001a62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018e6:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_CAN_ConfigFilter+0x1bc>)
 80018e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001900:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	431a      	orrs	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2201      	movs	r2, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d123      	bne.n	8001990 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800196a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3248      	adds	r2, #72	; 0x48
 8001970:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001984:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	3348      	adds	r3, #72	; 0x48
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d122      	bne.n	80019de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3248      	adds	r2, #72	; 0x48
 80019be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019d4:	6979      	ldr	r1, [r7, #20]
 80019d6:	3348      	adds	r3, #72	; 0x48
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	401a      	ands	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019f8:	e007      	b.n	8001a0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a54:	f023 0201 	bic.w	r2, r3, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e006      	b.n	8001a70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
  }
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40006400 	.word	0x40006400

08001a80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d12e      	bne.n	8001af2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fdba 	bl	8001624 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ab2:	e012      	b.n	8001ada <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab4:	f7ff fdb6 	bl	8001624 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b0a      	cmp	r3, #10
 8001ac0:	d90b      	bls.n	8001ada <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e012      	b.n	8001b00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e5      	bne.n	8001ab4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e006      	b.n	8001b00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d133      	bne.n	8001b84 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fd7a 	bl	8001624 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b32:	e012      	b.n	8001b5a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b34:	f7ff fd76 	bl	8001624 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d90b      	bls.n	8001b5a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2205      	movs	r2, #5
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01b      	b.n	8001b92 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0e5      	beq.n	8001b34 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0202 	bic.w	r2, r2, #2
 8001b76:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e006      	b.n	8001b92 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b089      	sub	sp, #36	; 0x24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d003      	beq.n	8001bc6 <HAL_CAN_AddTxMessage+0x2c>
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f040 80b8 	bne.w	8001d36 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a0 	beq.w	8001d26 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	0e1b      	lsrs	r3, r3, #24
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d907      	bls.n	8001c06 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e09e      	b.n	8001d44 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c22:	68f9      	ldr	r1, [r7, #12]
 8001c24:	6809      	ldr	r1, [r1, #0]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3318      	adds	r3, #24
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	440b      	add	r3, r1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e00f      	b.n	8001c54 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	440b      	add	r3, r1
 8001c52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6819      	ldr	r1, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3318      	adds	r3, #24
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	440b      	add	r3, r1
 8001c64:	3304      	adds	r3, #4
 8001c66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	7d1b      	ldrb	r3, [r3, #20]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d111      	bne.n	8001c94 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3318      	adds	r3, #24
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6811      	ldr	r1, [r2, #0]
 8001c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	440b      	add	r3, r1
 8001c90:	3304      	adds	r3, #4
 8001c92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3307      	adds	r3, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	061a      	lsls	r2, r3, #24
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	041b      	lsls	r3, r3, #16
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3305      	adds	r3, #5
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	3204      	adds	r2, #4
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	ea43 0200 	orr.w	r2, r3, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001cca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3303      	adds	r3, #3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	061a      	lsls	r2, r3, #24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	4610      	mov	r0, r2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	6811      	ldr	r1, [r2, #0]
 8001cf2:	ea43 0200 	orr.w	r2, r3, r0
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e00e      	b.n	8001d44 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e006      	b.n	8001d44 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
  }
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d003      	beq.n	8001d74 <HAL_CAN_GetRxMessage+0x24>
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	f040 80f3 	bne.w	8001f5a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d116      	bne.n	8001db6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0e7      	b.n	8001f68 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0d8      	b.n	8001f68 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	331b      	adds	r3, #27
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	4413      	add	r3, r2
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0204 	and.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10c      	bne.n	8001dee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	331b      	adds	r3, #27
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0d5b      	lsrs	r3, r3, #21
 8001de4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e00b      	b.n	8001e06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	331b      	adds	r3, #27
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	331b      	adds	r3, #27
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0202 	and.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	331b      	adds	r3, #27
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	331b      	adds	r3, #27
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	331b      	adds	r3, #27
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0a1a      	lsrs	r2, r3, #8
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0c1a      	lsrs	r2, r3, #16
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0e1a      	lsrs	r2, r3, #24
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3304      	adds	r3, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0a1a      	lsrs	r2, r3, #8
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0c1a      	lsrs	r2, r3, #16
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3306      	adds	r3, #6
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e1a      	lsrs	r2, r3, #24
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3307      	adds	r3, #7
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e006      	b.n	8001f68 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d002      	beq.n	8001f92 <HAL_CAN_ActivateNotification+0x1e>
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d109      	bne.n	8001fa6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6959      	ldr	r1, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e006      	b.n	8001fb4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07c      	beq.n	8002100 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d023      	beq.n	8002058 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2201      	movs	r2, #1
 8002016:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f983 	bl	800232e <HAL_CAN_TxMailbox0CompleteCallback>
 8002028:	e016      	b.n	8002058 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
 800203c:	e00c      	b.n	8002058 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e002      	b.n	8002058 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f989 	bl	800236a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d024      	beq.n	80020ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800206a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f963 	bl	8002342 <HAL_CAN_TxMailbox1CompleteCallback>
 800207c:	e016      	b.n	80020ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	e00c      	b.n	80020ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
 80020a4:	e002      	b.n	80020ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f969 	bl	800237e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f943 	bl	8002356 <HAL_CAN_TxMailbox2CompleteCallback>
 80020d0:	e016      	b.n	8002100 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	e00c      	b.n	8002100 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e002      	b.n	8002100 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f949 	bl	8002392 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2208      	movs	r2, #8
 800213e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f930 	bl	80023a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fe3c 	bl	8000ddc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f908 	bl	80023ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fe26 	bl	8000e14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2210      	movs	r2, #16
 80021e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8f2 	bl	80023ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2208      	movs	r2, #8
 8002204:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8eb 	bl	80023e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07b      	beq.n	800230e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d072      	beq.n	8002306 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227a:	2b00      	cmp	r3, #0
 800227c:	d043      	beq.n	8002306 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d03e      	beq.n	8002306 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800228e:	2b60      	cmp	r3, #96	; 0x60
 8002290:	d02b      	beq.n	80022ea <HAL_CAN_IRQHandler+0x32a>
 8002292:	2b60      	cmp	r3, #96	; 0x60
 8002294:	d82e      	bhi.n	80022f4 <HAL_CAN_IRQHandler+0x334>
 8002296:	2b50      	cmp	r3, #80	; 0x50
 8002298:	d022      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x320>
 800229a:	2b50      	cmp	r3, #80	; 0x50
 800229c:	d82a      	bhi.n	80022f4 <HAL_CAN_IRQHandler+0x334>
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d019      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x316>
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d826      	bhi.n	80022f4 <HAL_CAN_IRQHandler+0x334>
 80022a6:	2b30      	cmp	r3, #48	; 0x30
 80022a8:	d010      	beq.n	80022cc <HAL_CAN_IRQHandler+0x30c>
 80022aa:	2b30      	cmp	r3, #48	; 0x30
 80022ac:	d822      	bhi.n	80022f4 <HAL_CAN_IRQHandler+0x334>
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d002      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x2f8>
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d005      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022b6:	e01d      	b.n	80022f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022c0:	e019      	b.n	80022f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ca:	e014      	b.n	80022f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	f043 0320 	orr.w	r3, r3, #32
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022d4:	e00f      	b.n	80022f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022de:	e00a      	b.n	80022f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022e8:	e005      	b.n	80022f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022f2:	e000      	b.n	80022f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80022f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002304:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2204      	movs	r2, #4
 800230c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f868 	bl	80023f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	db12      	blt.n	80024e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	490a      	ldr	r1, [pc, #40]	; (80024f0 <__NVIC_DisableIRQ+0x44>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2001      	movs	r0, #1
 80024ce:	fa00 f202 	lsl.w	r2, r0, r2
 80024d2:	3320      	adds	r3, #32
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024d8:	f3bf 8f4f 	dsb	sy
}
 80024dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024de:	f3bf 8f6f 	isb	sy
}
 80024e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff8e 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff05 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff1a 	bl	8002454 <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff8e 	bl	8002548 <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5d 	bl	80024f4 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff0d 	bl	8002470 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff1d 	bl	80024ac <__NVIC_DisableIRQ>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff94 	bl	80025b0 <SysTick_Config>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e16b      	b.n	8002988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 815a 	bne.w	8002982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b4 	beq.w	8002982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_GPIO_Init+0x310>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x314>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x318>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x31c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x320>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x324>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x328>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20a>
 800289a:	2307      	movs	r3, #7
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x228>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x310>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_GPIO_Init+0x334>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae90 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	e0cd      	b.n	8002b84 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	f040 80bd 	bne.w	8002b7e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a04:	4a65      	ldr	r2, [pc, #404]	; (8002b9c <HAL_GPIO_DeInit+0x1d0>)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a5d      	ldr	r2, [pc, #372]	; (8002ba0 <HAL_GPIO_DeInit+0x1d4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_DeInit+0xba>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a5c      	ldr	r2, [pc, #368]	; (8002ba4 <HAL_GPIO_DeInit+0x1d8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_DeInit+0xb6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a5b      	ldr	r2, [pc, #364]	; (8002ba8 <HAL_GPIO_DeInit+0x1dc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_DeInit+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a5a      	ldr	r2, [pc, #360]	; (8002bac <HAL_GPIO_DeInit+0x1e0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_DeInit+0xae>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a59      	ldr	r2, [pc, #356]	; (8002bb0 <HAL_GPIO_DeInit+0x1e4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_DeInit+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_GPIO_DeInit+0x1e8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_DeInit+0xa6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a57      	ldr	r2, [pc, #348]	; (8002bb8 <HAL_GPIO_DeInit+0x1ec>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_DeInit+0xa2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a56      	ldr	r2, [pc, #344]	; (8002bbc <HAL_GPIO_DeInit+0x1f0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_DeInit+0x9e>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00e      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_DeInit+0xbc>
 8002a86:	2300      	movs	r3, #0
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d132      	bne.n	8002afe <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a98:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	4947      	ldr	r1, [pc, #284]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4944      	ldr	r1, [pc, #272]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4940      	ldr	r1, [pc, #256]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	493d      	ldr	r1, [pc, #244]	; (8002bc0 <HAL_GPIO_DeInit+0x1f4>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <HAL_GPIO_DeInit+0x1d0>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	43da      	mvns	r2, r3
 8002af0:	482a      	ldr	r0, [pc, #168]	; (8002b9c <HAL_GPIO_DeInit+0x1d0>)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	400a      	ands	r2, r1
 8002af8:	3302      	adds	r3, #2
 8002afa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2103      	movs	r1, #3
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	08d2      	lsrs	r2, r2, #3
 8002b34:	4019      	ands	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2103      	movs	r1, #3
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2103      	movs	r1, #3
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	f67f af2e 	bls.w	80029e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40021400 	.word	0x40021400
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	40021c00 	.word	0x40021c00
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	041a      	lsls	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf8:	b08f      	sub	sp, #60	; 0x3c
 8002bfa:	af0a      	add	r7, sp, #40	; 0x28
 8002bfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e10f      	b.n	8002e28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f005 fb0e 	bl	8008244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 ffbf 	bl	8004bca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	687e      	ldr	r6, [r7, #4]
 8002c54:	466d      	mov	r5, sp
 8002c56:	f106 0410 	add.w	r4, r6, #16
 8002c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c66:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c6a:	1d33      	adds	r3, r6, #4
 8002c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	f001 fe96 	bl	80049a0 <USB_CoreInit>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0d0      	b.n	8002e28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 ffad 	bl	8004bec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e04a      	b.n	8002d2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333d      	adds	r3, #61	; 0x3d
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	333c      	adds	r3, #60	; 0x3c
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	b298      	uxth	r0, r3
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3344      	adds	r3, #68	; 0x44
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3340      	adds	r3, #64	; 0x40
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3348      	adds	r3, #72	; 0x48
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	; 0x4c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3af      	bcc.n	8002c98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e044      	b.n	8002dc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3b5      	bcc.n	8002d3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	687e      	ldr	r6, [r7, #4]
 8002dda:	466d      	mov	r5, sp
 8002ddc:	f106 0410 	add.w	r4, r6, #16
 8002de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002df0:	1d33      	adds	r3, r6, #4
 8002df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	f001 ff45 	bl	8004c84 <USB_DevInit>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00d      	b.n	8002e28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 f894 	bl	8005f4e <USB_DevDisconnect>

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_Start+0x1c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e020      	b.n	8002e8e <HAL_PCD_Start+0x5e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d109      	bne.n	8002e70 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d005      	beq.n	8002e70 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fe97 	bl	8004ba8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 f844 	bl	8005f0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e96:	b590      	push	{r4, r7, lr}
 8002e98:	b08d      	sub	sp, #52	; 0x34
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 f902 	bl	80060b6 <USB_GetMode>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 848a 	bne.w	80037ce <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 f866 	bl	8005f90 <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8480 	beq.w	80037cc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 f853 	bl	8005f90 <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d107      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f002 0202 	and.w	r2, r2, #2
 8002f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 f841 	bl	8005f90 <USB_ReadInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d161      	bne.n	8002fdc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0210 	bic.w	r2, r2, #16
 8002f26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	0c5b      	lsrs	r3, r3, #17
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d124      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d035      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6a38      	ldr	r0, [r7, #32]
 8002f74:	f002 fe78 	bl	8005c68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f84:	441a      	add	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f96:	441a      	add	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	621a      	str	r2, [r3, #32]
 8002f9c:	e016      	b.n	8002fcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	0c5b      	lsrs	r3, r3, #17
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d110      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6a38      	ldr	r0, [r7, #32]
 8002fb6:	f002 fe57 	bl	8005c68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc6:	441a      	add	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0210 	orr.w	r2, r2, #16
 8002fda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 ffd5 	bl	8005f90 <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ff0:	f040 80a7 	bne.w	8003142 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 ffda 	bl	8005fb6 <USB_ReadDevAllOutEpInterrupt>
 8003002:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003004:	e099      	b.n	800313a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 808e 	beq.w	800312e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fffe 	bl	800601e <USB_ReadDevOutEPInterrupt>
 8003022:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	2301      	movs	r3, #1
 800303e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 feaa 	bl	8003d9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	2308      	movs	r3, #8
 8003062:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 ff80 	bl	8003f6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	2310      	movs	r3, #16
 8003086:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d030      	beq.n	80030f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d109      	bne.n	80030b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	78db      	ldrb	r3, [r3, #3]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d108      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f005 f9b7 	bl	8008450 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	461a      	mov	r2, r3
 80030f0:	2302      	movs	r3, #2
 80030f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	2320      	movs	r3, #32
 800310e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	3301      	adds	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f af62 	bne.w	8003006 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f002 ff22 	bl	8005f90 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003156:	f040 80db 	bne.w	8003310 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f002 ff43 	bl	8005fea <USB_ReadDevAllInEpInterrupt>
 8003164:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800316a:	e0cd      	b.n	8003308 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80c2 	beq.w	80032fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f002 ff69 	bl	800605a <USB_ReadDevInEPInterrupt>
 8003188:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d057      	beq.n	8003244 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	2201      	movs	r2, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69f9      	ldr	r1, [r7, #28]
 80031b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b4:	4013      	ands	r3, r2
 80031b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c4:	461a      	mov	r2, r3
 80031c6:	2301      	movs	r3, #1
 80031c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d132      	bne.n	8003238 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	334c      	adds	r3, #76	; 0x4c
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4403      	add	r3, r0
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4419      	add	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4403      	add	r3, r0
 8003206:	334c      	adds	r3, #76	; 0x4c
 8003208:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <HAL_PCD_IRQHandler+0x3a2>
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3354      	adds	r3, #84	; 0x54
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003230:	461a      	mov	r2, r3
 8003232:	2101      	movs	r1, #1
 8003234:	f002 ff70 	bl	8006118 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f005 f881 	bl	8008346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325a:	461a      	mov	r2, r3
 800325c:	2308      	movs	r3, #8
 800325e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003276:	461a      	mov	r2, r3
 8003278:	2310      	movs	r3, #16
 800327a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003292:	461a      	mov	r2, r3
 8003294:	2340      	movs	r3, #64	; 0x40
 8003296:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d023      	beq.n	80032ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a4:	6a38      	ldr	r0, [r7, #32]
 80032a6:	f001 fe51 	bl	8004f4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	3338      	adds	r3, #56	; 0x38
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	78db      	ldrb	r3, [r3, #3]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f005 f8ce 	bl	8008474 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	461a      	mov	r2, r3
 80032e6:	2302      	movs	r3, #2
 80032e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fcc3 	bl	8003c82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	3301      	adds	r3, #1
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f af2e 	bne.w	800316c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f002 fe3b 	bl	8005f90 <USB_ReadInterrupts>
 800331a:	4603      	mov	r3, r0
 800331c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003324:	d122      	bne.n	800336c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003340:	2b01      	cmp	r3, #1
 8003342:	d108      	bne.n	8003356 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800334c:	2100      	movs	r1, #0
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 feaa 	bl	80040a8 <HAL_PCDEx_LPM_Callback>
 8003354:	e002      	b.n	800335c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f005 f86c 	bl	8008434 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fe0d 	bl	8005f90 <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003380:	d112      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d102      	bne.n	8003398 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f005 f828 	bl	80083e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 fdef 	bl	8005f90 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	f040 80b7 	bne.w	800352e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2110      	movs	r1, #16
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 fdb6 	bl	8004f4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e4:	e046      	b.n	8003474 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	461a      	mov	r2, r3
 80033f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340a:	0151      	lsls	r1, r2, #5
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	440a      	add	r2, r1
 8003410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003414:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003418:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800342c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	440a      	add	r2, r1
 8003444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003448:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800344c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345e:	0151      	lsls	r1, r2, #5
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	440a      	add	r2, r1
 8003464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800346c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	3301      	adds	r3, #1
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b3      	bcc.n	80033e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003490:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034aa:	f043 030b 	orr.w	r3, r3, #11
 80034ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c0:	f043 030b 	orr.w	r3, r3, #11
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	e015      	b.n	80034f4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ee:	f043 030b 	orr.w	r3, r3, #11
 80034f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003502:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003506:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003518:	461a      	mov	r2, r3
 800351a:	f002 fdfd 	bl	8006118 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800352c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f002 fd2c 	bl	8005f90 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003542:	d124      	bne.n	800358e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fdc2 	bl	80060d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fd77 	bl	8005046 <USB_GetDevSpeed>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681c      	ldr	r4, [r3, #0]
 8003564:	f001 fa10 	bl	8004988 <HAL_RCC_GetHCLKFreq>
 8003568:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	4620      	mov	r0, r4
 8003574:	f001 fa76 	bl	8004a64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f004 ff0c 	bl	8008396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800358c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f002 fcfc 	bl	8005f90 <USB_ReadInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d10a      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f004 fee9 	bl	800837a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f002 0208 	and.w	r2, r2, #8
 80035b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fce7 	bl	8005f90 <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d122      	bne.n	8003612 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d8:	2301      	movs	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	e014      	b.n	8003608 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fb0f 	bl	8003c20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	3301      	adds	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	429a      	cmp	r2, r3
 8003610:	d3e5      	bcc.n	80035de <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fcba 	bl	8005f90 <USB_ReadInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d13b      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003628:	2301      	movs	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
 800362c:	e02b      	b.n	8003686 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3340      	adds	r3, #64	; 0x40
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d115      	bne.n	8003680 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003654:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003656:	2b00      	cmp	r3, #0
 8003658:	da12      	bge.n	8003680 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	333f      	adds	r3, #63	; 0x3f
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003676:	b2db      	uxtb	r3, r3
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fad0 	bl	8003c20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	3301      	adds	r3, #1
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	429a      	cmp	r2, r3
 800368e:	d3ce      	bcc.n	800362e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800369e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fc73 	bl	8005f90 <USB_ReadInterrupts>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b4:	d155      	bne.n	8003762 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b6:	2301      	movs	r3, #1
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	e045      	b.n	8003748 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d12e      	bne.n	8003742 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da2b      	bge.n	8003742 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80036f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d121      	bne.n	8003742 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373e:	6053      	str	r3, [r2, #4]
            break;
 8003740:	e007      	b.n	8003752 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	3301      	adds	r3, #1
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	429a      	cmp	r2, r3
 8003750:	d3b4      	bcc.n	80036bc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f002 fc12 	bl	8005f90 <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d10a      	bne.n	800378e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f004 fe8d 	bl	8008498 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fbfc 	bl	8005f90 <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d115      	bne.n	80037ce <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f004 fe7d 	bl	80084b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	e000      	b.n	80037ce <HAL_PCD_IRQHandler+0x938>
      return;
 80037cc:	bf00      	nop
    }
  }
}
 80037ce:	3734      	adds	r7, #52	; 0x34
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_PCD_SetAddress+0x1a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e013      	b.n	8003816 <HAL_PCD_SetAddress+0x42>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fb5a 	bl	8005ec0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	4608      	mov	r0, r1
 8003828:	4611      	mov	r1, r2
 800382a:	461a      	mov	r2, r3
 800382c:	4603      	mov	r3, r0
 800382e:	70fb      	strb	r3, [r7, #3]
 8003830:	460b      	mov	r3, r1
 8003832:	803b      	strh	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800383c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	da0f      	bge.n	8003864 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 020f 	and.w	r2, r3, #15
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	3338      	adds	r3, #56	; 0x38
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	705a      	strb	r2, [r3, #1]
 8003862:	e00f      	b.n	8003884 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 020f 	and.w	r2, r3, #15
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003890:	883a      	ldrh	r2, [r7, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	78ba      	ldrb	r2, [r7, #2]
 800389a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038ae:	78bb      	ldrb	r3, [r7, #2]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d102      	bne.n	80038ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_PCD_EP_Open+0xaa>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e00e      	b.n	80038e6 <HAL_PCD_EP_Open+0xc8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68f9      	ldr	r1, [r7, #12]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fbda 	bl	8005090 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80038e4:	7afb      	ldrb	r3, [r7, #11]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	da0f      	bge.n	8003922 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3338      	adds	r3, #56	; 0x38
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
 8003920:	e00f      	b.n	8003942 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_PCD_EP_Close+0x6e>
 8003958:	2302      	movs	r3, #2
 800395a:	e00e      	b.n	800397a <HAL_PCD_EP_Close+0x8c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fc18 	bl	80051a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	460b      	mov	r3, r1
 8003990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003992:	7afb      	ldrb	r3, [r7, #11]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	3304      	adds	r3, #4
 80039aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2200      	movs	r2, #0
 80039bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	f001 fef7 	bl	80057e8 <USB_EP0StartXfer>
 80039fa:	e008      	b.n	8003a0e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	f001 fca5 	bl	8005358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	460b      	mov	r3, r1
 8003a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	7afb      	ldrb	r3, [r7, #11]
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	3338      	adds	r3, #56	; 0x38
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2201      	movs	r2, #1
 8003a56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a72:	7afb      	ldrb	r3, [r7, #11]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	6979      	ldr	r1, [r7, #20]
 8003a8a:	f001 fead 	bl	80057e8 <USB_EP0StartXfer>
 8003a8e:	e008      	b.n	8003aa2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6979      	ldr	r1, [r7, #20]
 8003a9e:	f001 fc5b 	bl	8005358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d901      	bls.n	8003aca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e050      	b.n	8003b6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0f      	bge.n	8003af2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 020f 	and.w	r2, r3, #15
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3338      	adds	r3, #56	; 0x38
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	705a      	strb	r2, [r3, #1]
 8003af0:	e00d      	b.n	8003b0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_PCD_EP_SetStall+0x82>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e01e      	b.n	8003b6c <HAL_PCD_EP_SetStall+0xc0>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 f8eb 	bl	8005d18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	b2d9      	uxtb	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f002 fadb 	bl	8006118 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d901      	bls.n	8003b92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e042      	b.n	8003c18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da0f      	bge.n	8003bba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	3338      	adds	r3, #56	; 0x38
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	705a      	strb	r2, [r3, #1]
 8003bb8:	e00f      	b.n	8003bda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_PCD_EP_ClrStall+0x86>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e00e      	b.n	8003c18 <HAL_PCD_EP_ClrStall+0xa4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f002 f8f3 	bl	8005df4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da0c      	bge.n	8003c4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3338      	adds	r3, #56	; 0x38
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	3304      	adds	r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e00c      	b.n	8003c68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 ff12 	bl	8005a98 <USB_EPStopXfer>
 8003c74:	4603      	mov	r3, r0
 8003c76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c78:	7afb      	ldrb	r3, [r7, #11]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b08a      	sub	sp, #40	; 0x28
 8003c86:	af02      	add	r7, sp, #8
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3338      	adds	r3, #56	; 0x38
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d901      	bls.n	8003cba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06c      	b.n	8003d94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d902      	bls.n	8003cd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cde:	e02b      	b.n	8003d38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d902      	bls.n	8003cfc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3303      	adds	r3, #3
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6919      	ldr	r1, [r3, #16]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	4603      	mov	r3, r0
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f001 ff66 	bl	8005bec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	441a      	add	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	441a      	add	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d809      	bhi.n	8003d62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d203      	bcs.n	8003d62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1be      	bne.n	8003ce0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d811      	bhi.n	8003d92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2201      	movs	r2, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	6939      	ldr	r1, [r7, #16]
 8003d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d8e:	4013      	ands	r3, r2
 8003d90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	333c      	adds	r3, #60	; 0x3c
 8003db4:	3304      	adds	r3, #4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d17b      	bne.n	8003eca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d015      	beq.n	8003e08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4a61      	ldr	r2, [pc, #388]	; (8003f64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	f240 80b9 	bls.w	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80b3 	beq.w	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e04:	6093      	str	r3, [r2, #8]
 8003e06:	e0a7      	b.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2320      	movs	r3, #32
 8003e22:	6093      	str	r3, [r2, #8]
 8003e24:	e098      	b.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 8093 	bne.w	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	4a4b      	ldr	r2, [pc, #300]	; (8003f64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d90f      	bls.n	8003e5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	461a      	mov	r2, r3
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	6093      	str	r3, [r2, #8]
 8003e58:	e07e      	b.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	0159      	lsls	r1, r3, #5
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d114      	bne.n	8003ebc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	f002 f936 	bl	8006118 <USB_EP0_OutStart>
 8003eac:	e006      	b.n	8003ebc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f004 fa24 	bl	8008310 <HAL_PCD_DataOutStageCallback>
 8003ec8:	e046      	b.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d124      	bne.n	8003f1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	e032      	b.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f004 f9fb 	bl	8008310 <HAL_PCD_DataOutStageCallback>
 8003f1a:	e01d      	b.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d114      	bne.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f44:	461a      	mov	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	f002 f8e6 	bl	8006118 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f004 f9dc 	bl	8008310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	4f54300a 	.word	0x4f54300a
 8003f68:	4f54310a 	.word	0x4f54310a

08003f6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	333c      	adds	r3, #60	; 0x3c
 8003f84:	3304      	adds	r3, #4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d90e      	bls.n	8003fc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f004 f993 	bl	80082ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d90c      	bls.n	8003fe8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d108      	bne.n	8003fe8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	f002 f898 	bl	8006118 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	4f54300a 	.word	0x4f54300a

08003ff8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
 8004004:	4613      	mov	r3, r2
 8004006:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d107      	bne.n	8004026 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004016:	883b      	ldrh	r3, [r7, #0]
 8004018:	0419      	lsls	r1, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	430a      	orrs	r2, r1
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
 8004024:	e028      	b.n	8004078 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e00d      	b.n	8004056 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	3340      	adds	r3, #64	; 0x40
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4413      	add	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	3301      	adds	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	3b01      	subs	r3, #1
 800405c:	429a      	cmp	r2, r3
 800405e:	d3ec      	bcc.n	800403a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004060:	883b      	ldrh	r3, [r7, #0]
 8004062:	0418      	lsls	r0, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6819      	ldr	r1, [r3, #0]
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	3b01      	subs	r3, #1
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	4302      	orrs	r2, r0
 8004070:	3340      	adds	r3, #64	; 0x40
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e267      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d075      	beq.n	80041ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d00c      	beq.n	8004104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d112      	bne.n	800411c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f6:	4b82      	ldr	r3, [pc, #520]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004102:	d10b      	bne.n	800411c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	4b7e      	ldr	r3, [pc, #504]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05b      	beq.n	80041c8 <HAL_RCC_OscConfig+0x108>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d157      	bne.n	80041c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e242      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d106      	bne.n	8004134 <HAL_RCC_OscConfig+0x74>
 8004126:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a75      	ldr	r2, [pc, #468]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e01d      	b.n	8004170 <HAL_RCC_OscConfig+0xb0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x98>
 800413e:	4b70      	ldr	r3, [pc, #448]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a6f      	ldr	r2, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b6d      	ldr	r3, [pc, #436]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6c      	ldr	r2, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0xb0>
 8004158:	4b69      	ldr	r3, [pc, #420]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a68      	ldr	r2, [pc, #416]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	4b66      	ldr	r3, [pc, #408]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a65      	ldr	r2, [pc, #404]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800416a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fa54 	bl	8001624 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004180:	f7fd fa50 	bl	8001624 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e207      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0xc0>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd fa40 	bl	8001624 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a8:	f7fd fa3c 	bl	8001624 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1f3      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ba:	4b51      	ldr	r3, [pc, #324]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0xe8>
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d063      	beq.n	800429e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d11c      	bne.n	8004228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b44      	ldr	r3, [pc, #272]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x152>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1c7      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4937      	ldr	r1, [pc, #220]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	e03a      	b.n	800429e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x244>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd f9f5 	bl	8001624 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423e:	f7fd f9f1 	bl	8001624 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1a8      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4925      	ldr	r1, [pc, #148]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x244>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd f9d4 	bl	8001624 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004280:	f7fd f9d0 	bl	8001624 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e187      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d036      	beq.n	8004318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_RCC_OscConfig+0x248>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd f9b4 	bl	8001624 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c0:	f7fd f9b0 	bl	8001624 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e167      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_OscConfig+0x240>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x200>
 80042de:	e01b      	b.n	8004318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_OscConfig+0x248>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e6:	f7fd f99d 	bl	8001624 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	e00e      	b.n	800430c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fd f999 	bl	8001624 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d907      	bls.n	800430c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e150      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
 8004300:	40023800 	.word	0x40023800
 8004304:	42470000 	.word	0x42470000
 8004308:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b88      	ldr	r3, [pc, #544]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ea      	bne.n	80042ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8097 	beq.w	8004454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	4b7d      	ldr	r3, [pc, #500]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a7c      	ldr	r2, [pc, #496]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b7a      	ldr	r3, [pc, #488]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b77      	ldr	r3, [pc, #476]	; (8004534 <HAL_RCC_OscConfig+0x474>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d118      	bne.n	8004394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004362:	4b74      	ldr	r3, [pc, #464]	; (8004534 <HAL_RCC_OscConfig+0x474>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a73      	ldr	r2, [pc, #460]	; (8004534 <HAL_RCC_OscConfig+0x474>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7fd f959 	bl	8001624 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004376:	f7fd f955 	bl	8001624 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e10c      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <HAL_RCC_OscConfig+0x474>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x2ea>
 800439c:	4b64      	ldr	r3, [pc, #400]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a63      	ldr	r2, [pc, #396]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	e01c      	b.n	80043e4 <HAL_RCC_OscConfig+0x324>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x30c>
 80043b2:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a5e      	ldr	r2, [pc, #376]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	4b5c      	ldr	r3, [pc, #368]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a5b      	ldr	r2, [pc, #364]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0x324>
 80043cc:	4b58      	ldr	r3, [pc, #352]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a57      	ldr	r2, [pc, #348]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
 80043d8:	4b55      	ldr	r3, [pc, #340]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4a54      	ldr	r2, [pc, #336]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80043de:	f023 0304 	bic.w	r3, r3, #4
 80043e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd f91a 	bl	8001624 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fd f916 	bl	8001624 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0cb      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440a:	4b49      	ldr	r3, [pc, #292]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ee      	beq.n	80043f4 <HAL_RCC_OscConfig+0x334>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004418:	f7fd f904 	bl	8001624 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd f900 	bl	8001624 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0b5      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004436:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4a38      	ldr	r2, [pc, #224]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80a1 	beq.w	80045a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800445e:	4b34      	ldr	r3, [pc, #208]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	d05c      	beq.n	8004524 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d141      	bne.n	80044f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b31      	ldr	r3, [pc, #196]	; (8004538 <HAL_RCC_OscConfig+0x478>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fd f8d4 	bl	8001624 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004480:	f7fd f8d0 	bl	8001624 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e087      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b27      	ldr	r3, [pc, #156]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	491b      	ldr	r1, [pc, #108]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c8:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <HAL_RCC_OscConfig+0x478>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fd f8a9 	bl	8001624 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d6:	f7fd f8a5 	bl	8001624 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e05c      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x416>
 80044f4:	e054      	b.n	80045a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCC_OscConfig+0x478>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fd f892 	bl	8001624 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004504:	f7fd f88e 	bl	8001624 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e045      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_OscConfig+0x470>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x444>
 8004522:	e03d      	b.n	80045a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e038      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
 8004530:	40023800 	.word	0x40023800
 8004534:	40007000 	.word	0x40007000
 8004538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <HAL_RCC_OscConfig+0x4ec>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d028      	beq.n	800459c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d121      	bne.n	800459c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d11a      	bne.n	800459c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004574:	4293      	cmp	r3, r2
 8004576:	d111      	bne.n	800459c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	3b01      	subs	r3, #1
 8004586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800

080045b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0cc      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b68      	ldr	r3, [pc, #416]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90c      	bls.n	80045ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b8      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a58      	ldr	r2, [pc, #352]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800460e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	494d      	ldr	r1, [pc, #308]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d044      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d119      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e07f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d003      	beq.n	800466e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	2b03      	cmp	r3, #3
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b3f      	ldr	r3, [pc, #252]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e067      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4934      	ldr	r1, [pc, #208]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a0:	f7fc ffc0 	bl	8001624 <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fc ffbc 	bl	8001624 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d20c      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e032      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	490e      	ldr	r1, [pc, #56]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004736:	f000 f821 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800473a:	4602      	mov	r2, r0
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	490a      	ldr	r1, [pc, #40]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	5ccb      	ldrb	r3, [r1, r3]
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc ff20 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023c00 	.word	0x40023c00
 800476c:	40023800 	.word	0x40023800
 8004770:	08008954 	.word	0x08008954
 8004774:	2000000c 	.word	0x2000000c
 8004778:	20000010 	.word	0x20000010

0800477c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800477c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004780:	b094      	sub	sp, #80	; 0x50
 8004782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
 8004788:	2300      	movs	r3, #0
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478c:	2300      	movs	r3, #0
 800478e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004794:	4b79      	ldr	r3, [pc, #484]	; (800497c <HAL_RCC_GetSysClockFreq+0x200>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d00d      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x40>
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	f200 80e1 	bhi.w	8004968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x34>
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ae:	e0db      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_RCC_GetSysClockFreq+0x204>)
 80047b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047b4:	e0db      	b.n	800496e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047b6:	4b73      	ldr	r3, [pc, #460]	; (8004984 <HAL_RCC_GetSysClockFreq+0x208>)
 80047b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ba:	e0d8      	b.n	800496e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047bc:	4b6f      	ldr	r3, [pc, #444]	; (800497c <HAL_RCC_GetSysClockFreq+0x200>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047c6:	4b6d      	ldr	r3, [pc, #436]	; (800497c <HAL_RCC_GetSysClockFreq+0x200>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d063      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d2:	4b6a      	ldr	r3, [pc, #424]	; (800497c <HAL_RCC_GetSysClockFreq+0x200>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	2200      	movs	r2, #0
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
 80047dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ee:	4622      	mov	r2, r4
 80047f0:	462b      	mov	r3, r5
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	0159      	lsls	r1, r3, #5
 80047fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004800:	0150      	lsls	r0, r2, #5
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4621      	mov	r1, r4
 8004808:	1a51      	subs	r1, r2, r1
 800480a:	6139      	str	r1, [r7, #16]
 800480c:	4629      	mov	r1, r5
 800480e:	eb63 0301 	sbc.w	r3, r3, r1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004820:	4659      	mov	r1, fp
 8004822:	018b      	lsls	r3, r1, #6
 8004824:	4651      	mov	r1, sl
 8004826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800482a:	4651      	mov	r1, sl
 800482c:	018a      	lsls	r2, r1, #6
 800482e:	4651      	mov	r1, sl
 8004830:	ebb2 0801 	subs.w	r8, r2, r1
 8004834:	4659      	mov	r1, fp
 8004836:	eb63 0901 	sbc.w	r9, r3, r1
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484e:	4690      	mov	r8, r2
 8004850:	4699      	mov	r9, r3
 8004852:	4623      	mov	r3, r4
 8004854:	eb18 0303 	adds.w	r3, r8, r3
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	462b      	mov	r3, r5
 800485c:	eb49 0303 	adc.w	r3, r9, r3
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800486e:	4629      	mov	r1, r5
 8004870:	024b      	lsls	r3, r1, #9
 8004872:	4621      	mov	r1, r4
 8004874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004878:	4621      	mov	r1, r4
 800487a:	024a      	lsls	r2, r1, #9
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004882:	2200      	movs	r2, #0
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
 8004886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800488c:	f7fb fc9c 	bl	80001c8 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	e058      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <HAL_RCC_GetSysClockFreq+0x200>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	2200      	movs	r2, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	4611      	mov	r1, r2
 80048a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	0159      	lsls	r1, r3, #5
 80048c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c6:	0150      	lsls	r0, r2, #5
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4641      	mov	r1, r8
 80048ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80048d2:	4649      	mov	r1, r9
 80048d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048ec:	ebb2 040a 	subs.w	r4, r2, sl
 80048f0:	eb63 050b 	sbc.w	r5, r3, fp
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	00eb      	lsls	r3, r5, #3
 80048fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004902:	00e2      	lsls	r2, r4, #3
 8004904:	4614      	mov	r4, r2
 8004906:	461d      	mov	r5, r3
 8004908:	4643      	mov	r3, r8
 800490a:	18e3      	adds	r3, r4, r3
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	464b      	mov	r3, r9
 8004910:	eb45 0303 	adc.w	r3, r5, r3
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004922:	4629      	mov	r1, r5
 8004924:	028b      	lsls	r3, r1, #10
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800492c:	4621      	mov	r1, r4
 800492e:	028a      	lsls	r2, r1, #10
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004936:	2200      	movs	r2, #0
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	61fa      	str	r2, [r7, #28]
 800493c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004940:	f7fb fc42 	bl	80001c8 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_GetSysClockFreq+0x200>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	3301      	adds	r3, #1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800495c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800495e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004966:	e002      	b.n	800496e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetSysClockFreq+0x204>)
 800496a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800496c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004970:	4618      	mov	r0, r3
 8004972:	3750      	adds	r7, #80	; 0x50
 8004974:	46bd      	mov	sp, r7
 8004976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	00f42400 	.word	0x00f42400
 8004984:	007a1200 	.word	0x007a1200

08004988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <HAL_RCC_GetHCLKFreq+0x14>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	2000000c 	.word	0x2000000c

080049a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049a0:	b084      	sub	sp, #16
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	f107 001c 	add.w	r0, r7, #28
 80049ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d122      	bne.n	80049fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f001 fbee 	bl	80061d4 <USB_CoreReset>
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e01a      	b.n	8004a34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 fbe2 	bl	80061d4 <USB_CoreReset>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
 8004a26:	e005      	b.n	8004a34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d10b      	bne.n	8004a52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f043 0206 	orr.w	r2, r3, #6
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5e:	b004      	add	sp, #16
 8004a60:	4770      	bx	lr
	...

08004a64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d165      	bne.n	8004b44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a41      	ldr	r2, [pc, #260]	; (8004b80 <USB_SetTurnaroundTime+0x11c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d906      	bls.n	8004a8e <USB_SetTurnaroundTime+0x2a>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a40      	ldr	r2, [pc, #256]	; (8004b84 <USB_SetTurnaroundTime+0x120>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d202      	bcs.n	8004a8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e062      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <USB_SetTurnaroundTime+0x120>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d306      	bcc.n	8004aa4 <USB_SetTurnaroundTime+0x40>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a3b      	ldr	r2, [pc, #236]	; (8004b88 <USB_SetTurnaroundTime+0x124>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d202      	bcs.n	8004aa4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a9e:	230e      	movs	r3, #14
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e057      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <USB_SetTurnaroundTime+0x124>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d306      	bcc.n	8004aba <USB_SetTurnaroundTime+0x56>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a37      	ldr	r2, [pc, #220]	; (8004b8c <USB_SetTurnaroundTime+0x128>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d202      	bcs.n	8004aba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ab4:	230d      	movs	r3, #13
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e04c      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a33      	ldr	r2, [pc, #204]	; (8004b8c <USB_SetTurnaroundTime+0x128>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d306      	bcc.n	8004ad0 <USB_SetTurnaroundTime+0x6c>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a32      	ldr	r2, [pc, #200]	; (8004b90 <USB_SetTurnaroundTime+0x12c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d802      	bhi.n	8004ad0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004aca:	230c      	movs	r3, #12
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e041      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <USB_SetTurnaroundTime+0x12c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d906      	bls.n	8004ae6 <USB_SetTurnaroundTime+0x82>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a2e      	ldr	r2, [pc, #184]	; (8004b94 <USB_SetTurnaroundTime+0x130>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d802      	bhi.n	8004ae6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ae0:	230b      	movs	r3, #11
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e036      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a2a      	ldr	r2, [pc, #168]	; (8004b94 <USB_SetTurnaroundTime+0x130>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d906      	bls.n	8004afc <USB_SetTurnaroundTime+0x98>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <USB_SetTurnaroundTime+0x134>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004af6:	230a      	movs	r3, #10
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e02b      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <USB_SetTurnaroundTime+0x134>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d906      	bls.n	8004b12 <USB_SetTurnaroundTime+0xae>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a25      	ldr	r2, [pc, #148]	; (8004b9c <USB_SetTurnaroundTime+0x138>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d202      	bcs.n	8004b12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b0c:	2309      	movs	r3, #9
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e020      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <USB_SetTurnaroundTime+0x138>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d306      	bcc.n	8004b28 <USB_SetTurnaroundTime+0xc4>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <USB_SetTurnaroundTime+0x13c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d802      	bhi.n	8004b28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b22:	2308      	movs	r3, #8
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e015      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <USB_SetTurnaroundTime+0x13c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d906      	bls.n	8004b3e <USB_SetTurnaroundTime+0xda>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <USB_SetTurnaroundTime+0x140>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d202      	bcs.n	8004b3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b38:	2307      	movs	r3, #7
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e00a      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b3e:	2306      	movs	r3, #6
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e007      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b4a:	2309      	movs	r3, #9
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e001      	b.n	8004b54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b50:	2309      	movs	r3, #9
 8004b52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	00d8acbf 	.word	0x00d8acbf
 8004b84:	00e4e1c0 	.word	0x00e4e1c0
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	01067380 	.word	0x01067380
 8004b90:	011a499f 	.word	0x011a499f
 8004b94:	01312cff 	.word	0x01312cff
 8004b98:	014ca43f 	.word	0x014ca43f
 8004b9c:	016e3600 	.word	0x016e3600
 8004ba0:	01a6ab1f 	.word	0x01a6ab1f
 8004ba4:	01e84800 	.word	0x01e84800

08004ba8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f043 0201 	orr.w	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d115      	bne.n	8004c3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fc fd0e 	bl	800163c <HAL_Delay>
      ms++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 fa45 	bl	80060b6 <USB_GetMode>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d01e      	beq.n	8004c70 <USB_SetCurrentMode+0x84>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b31      	cmp	r3, #49	; 0x31
 8004c36:	d9f0      	bls.n	8004c1a <USB_SetCurrentMode+0x2e>
 8004c38:	e01a      	b.n	8004c70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d115      	bne.n	8004c6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f7fc fcf5 	bl	800163c <HAL_Delay>
      ms++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 fa2c 	bl	80060b6 <USB_GetMode>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <USB_SetCurrentMode+0x84>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b31      	cmp	r3, #49	; 0x31
 8004c68:	d9f0      	bls.n	8004c4c <USB_SetCurrentMode+0x60>
 8004c6a:	e001      	b.n	8004c70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e005      	b.n	8004c7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b32      	cmp	r3, #50	; 0x32
 8004c74:	d101      	bne.n	8004c7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c84:	b084      	sub	sp, #16
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e009      	b.n	8004cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3340      	adds	r3, #64	; 0x40
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b0e      	cmp	r3, #14
 8004cbc:	d9f2      	bls.n	8004ca4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11c      	bne.n	8004cfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd2:	f043 0302 	orr.w	r3, r3, #2
 8004cd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfc:	e00b      	b.n	8004d16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	4619      	mov	r1, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	461a      	mov	r2, r3
 8004d32:	680b      	ldr	r3, [r1, #0]
 8004d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10c      	bne.n	8004d56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d42:	2100      	movs	r1, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f965 	bl	8005014 <USB_SetDevSpeed>
 8004d4a:	e008      	b.n	8004d5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f960 	bl	8005014 <USB_SetDevSpeed>
 8004d54:	e003      	b.n	8004d5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d56:	2103      	movs	r1, #3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f95b 	bl	8005014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d5e:	2110      	movs	r1, #16
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8f3 	bl	8004f4c <USB_FlushTxFifo>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f91f 	bl	8004fb4 <USB_FlushRxFifo>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	461a      	mov	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e043      	b.n	8004e32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc0:	d118      	bne.n	8004df4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e013      	b.n	8004e06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	461a      	mov	r2, r3
 8004dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e008      	b.n	8004e06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3b7      	bcc.n	8004daa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e043      	b.n	8004ec8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e56:	d118      	bne.n	8004e8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e013      	b.n	8004e9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e008      	b.n	8004e9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3b7      	bcc.n	8004e40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f043 0210 	orr.w	r2, r3, #16
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <USB_DevInit+0x2c4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f44:	b004      	add	sp, #16
 8004f46:	4770      	bx	lr
 8004f48:	803c3800 	.word	0x803c3800

08004f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <USB_FlushTxFifo+0x64>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e01b      	b.n	8004fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	daf2      	bge.n	8004f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	019b      	lsls	r3, r3, #6
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <USB_FlushTxFifo+0x64>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e006      	b.n	8004fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d0f0      	beq.n	8004f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	00030d40 	.word	0x00030d40

08004fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <USB_FlushRxFifo+0x5c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e018      	b.n	8005004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	daf2      	bge.n	8004fc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <USB_FlushRxFifo+0x5c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e006      	b.n	8005004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d0f0      	beq.n	8004fe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	00030d40 	.word	0x00030d40

08005014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0306 	and.w	r3, r3, #6
 800505e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]
 800506a:	e00a      	b.n	8005082 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d002      	beq.n	8005078 <USB_GetDevSpeed+0x32>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b06      	cmp	r3, #6
 8005076:	d102      	bne.n	800507e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005078:	2302      	movs	r3, #2
 800507a:	75fb      	strb	r3, [r7, #23]
 800507c:	e001      	b.n	8005082 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800507e:	230f      	movs	r3, #15
 8005080:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d13a      	bne.n	8005122 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d155      	bne.n	8005190 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	791b      	ldrb	r3, [r3, #4]
 80050fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005100:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	059b      	lsls	r3, r3, #22
 8005106:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005108:	4313      	orrs	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e036      	b.n	8005190 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005140:	4313      	orrs	r3, r2
 8005142:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d11a      	bne.n	8005190 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	791b      	ldrb	r3, [r3, #4]
 8005174:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005176:	430b      	orrs	r3, r1
 8005178:	4313      	orrs	r3, r2
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d161      	bne.n	8005280 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d2:	d11f      	bne.n	8005214 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	b29b      	uxth	r3, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005234:	4013      	ands	r3, r2
 8005236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	b29b      	uxth	r3, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005258:	4013      	ands	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	0159      	lsls	r1, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	440b      	add	r3, r1
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	4619      	mov	r1, r3
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <USB_DeactivateEndpoint+0x1b0>)
 800527a:	4013      	ands	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
 800527e:	e060      	b.n	8005342 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005296:	d11f      	bne.n	80052d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	43db      	mvns	r3, r3
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f8:	4013      	ands	r3, r2
 80052fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	2101      	movs	r1, #1
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	43db      	mvns	r3, r3
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531c:	4013      	ands	r3, r2
 800531e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	0159      	lsls	r1, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	440b      	add	r3, r1
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	4619      	mov	r1, r3
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <USB_DeactivateEndpoint+0x1b4>)
 800533e:	4013      	ands	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	ec337800 	.word	0xec337800
 8005354:	eff37800 	.word	0xeff37800

08005358 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 815c 	bne.w	8005632 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d132      	bne.n	80053e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e0:	0cdb      	lsrs	r3, r3, #19
 80053e2:	04db      	lsls	r3, r3, #19
 80053e4:	6113      	str	r3, [r2, #16]
 80053e6:	e074      	b.n	80054d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	0cdb      	lsrs	r3, r3, #19
 8005404:	04db      	lsls	r3, r3, #19
 8005406:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005422:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005426:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800542a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6999      	ldr	r1, [r3, #24]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	440b      	add	r3, r1
 8005444:	1e59      	subs	r1, r3, #1
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	fbb1 f3f3 	udiv	r3, r1, r3
 800544e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005450:	4b9d      	ldr	r3, [pc, #628]	; (80056c8 <USB_EPStartXfer+0x370>)
 8005452:	400b      	ands	r3, r1
 8005454:	69b9      	ldr	r1, [r7, #24]
 8005456:	0148      	lsls	r0, r1, #5
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	4401      	add	r1, r0
 800545c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005460:	4313      	orrs	r3, r2
 8005462:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	0148      	lsls	r0, r1, #5
 800547e:	69f9      	ldr	r1, [r7, #28]
 8005480:	4401      	add	r1, r0
 8005482:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005486:	4313      	orrs	r3, r2
 8005488:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	791b      	ldrb	r3, [r3, #4]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d11f      	bne.n	80054d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d14b      	bne.n	8005570 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d128      	bne.n	800554e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d110      	bne.n	800552e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	e00f      	b.n	800554e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e133      	b.n	80057d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800558e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	791b      	ldrb	r3, [r3, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d015      	beq.n	80055c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 811b 	beq.w	80057d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f303 	lsl.w	r3, r1, r3
 80055b8:	69f9      	ldr	r1, [r7, #28]
 80055ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055be:	4313      	orrs	r3, r2
 80055c0:	634b      	str	r3, [r1, #52]	; 0x34
 80055c2:	e109      	b.n	80057d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d110      	bne.n	80055f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	e00f      	b.n	8005616 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6919      	ldr	r1, [r3, #16]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	b298      	uxth	r0, r3
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	4603      	mov	r3, r0
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fade 	bl	8005bec <USB_WritePacket>
 8005630:	e0d2      	b.n	80057d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564c:	0cdb      	lsrs	r3, r3, #19
 800564e:	04db      	lsls	r3, r3, #19
 8005650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005674:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d126      	bne.n	80056cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	0148      	lsls	r0, r1, #5
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	4401      	add	r1, r0
 800569c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c2:	6113      	str	r3, [r2, #16]
 80056c4:	e03a      	b.n	800573c <USB_EPStartXfer+0x3e4>
 80056c6:	bf00      	nop
 80056c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	1e5a      	subs	r2, r3, #1
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	8afa      	ldrh	r2, [r7, #22]
 80056e8:	fb03 f202 	mul.w	r2, r3, r2
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	8afb      	ldrh	r3, [r7, #22]
 8005700:	04d9      	lsls	r1, r3, #19
 8005702:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <USB_EPStartXfer+0x48c>)
 8005704:	400b      	ands	r3, r1
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	0148      	lsls	r0, r1, #5
 800570a:	69f9      	ldr	r1, [r7, #28]
 800570c:	4401      	add	r1, r0
 800570e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005712:	4313      	orrs	r3, r2
 8005714:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	0148      	lsls	r0, r1, #5
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	4401      	add	r1, r0
 8005734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10d      	bne.n	800575e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6919      	ldr	r1, [r3, #16]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	460a      	mov	r2, r1
 800575c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	791b      	ldrb	r3, [r3, #4]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d128      	bne.n	80057b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d110      	bne.n	8005798 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00f      	b.n	80057b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	1ff80000 	.word	0x1ff80000

080057e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 80ce 	bne.w	80059a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d132      	bne.n	8005878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	0cdb      	lsrs	r3, r3, #19
 8005872:	04db      	lsls	r3, r3, #19
 8005874:	6113      	str	r3, [r2, #16]
 8005876:	e04e      	b.n	8005916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	0cdb      	lsrs	r3, r3, #19
 8005894:	04db      	lsls	r3, r3, #19
 8005896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	0148      	lsls	r0, r1, #5
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	4401      	add	r1, r0
 800590e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005912:	4313      	orrs	r3, r2
 8005914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d11e      	bne.n	800595a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e097      	b.n	8005a8a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8083 	beq.w	8005a8a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	2101      	movs	r1, #1
 8005996:	fa01 f303 	lsl.w	r3, r1, r3
 800599a:	6979      	ldr	r1, [r7, #20]
 800599c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a0:	4313      	orrs	r3, r2
 80059a2:	634b      	str	r3, [r1, #52]	; 0x34
 80059a4:	e071      	b.n	8005a8a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c0:	0cdb      	lsrs	r3, r3, #19
 80059c2:	04db      	lsls	r3, r3, #19
 80059c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a38:	6939      	ldr	r1, [r7, #16]
 8005a3a:	0148      	lsls	r0, r1, #5
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	4401      	add	r1, r0
 8005a40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a44:	4313      	orrs	r3, r2
 8005a46:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10d      	bne.n	8005a6a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6919      	ldr	r1, [r3, #16]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	460a      	mov	r2, r1
 8005a68:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d14a      	bne.n	8005b4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ace:	f040 8086 	bne.w	8005bde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	7812      	ldrb	r2, [r2, #0]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005af4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d902      	bls.n	8005b30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b2e:	e056      	b.n	8005bde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b48:	d0e7      	beq.n	8005b1a <USB_EPStopXfer+0x82>
 8005b4a:	e048      	b.n	8005bde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b64:	d13b      	bne.n	8005bde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d902      	bls.n	8005bc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc2:	e00c      	b.n	8005bde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bdc:	d0e7      	beq.n	8005bae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	71fb      	strb	r3, [r7, #7]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d123      	bne.n	8005c5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c12:	88bb      	ldrh	r3, [r7, #4]
 8005c14:	3303      	adds	r3, #3
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	e018      	b.n	8005c52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	031a      	lsls	r2, r3, #12
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d3e2      	bcc.n	8005c20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3724      	adds	r7, #36	; 0x24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b08b      	sub	sp, #44	; 0x2c
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	e014      	b.n	8005cbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	3301      	adds	r3, #1
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	6a3a      	ldr	r2, [r7, #32]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d3e6      	bcc.n	8005c94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cc6:	8bfb      	ldrh	r3, [r7, #30]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f107 0310 	add.w	r3, r7, #16
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	701a      	strb	r2, [r3, #0]
      i++;
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cfe:	8bfb      	ldrh	r3, [r7, #30]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d04:	8bfb      	ldrh	r3, [r7, #30]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ea      	bne.n	8005ce0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	372c      	adds	r7, #44	; 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d12c      	bne.n	8005d8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db12      	blt.n	8005d6c <USB_EPSetStall+0x54>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00f      	beq.n	8005d6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	e02b      	b.n	8005de6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	db12      	blt.n	8005dc6 <USB_EPSetStall+0xae>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00f      	beq.n	8005dc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005de4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	785b      	ldrb	r3, [r3, #1]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d128      	bne.n	8005e62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d003      	beq.n	8005e40 <USB_EPClearStall+0x4c>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	791b      	ldrb	r3, [r3, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d138      	bne.n	8005eb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e027      	b.n	8005eb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	791b      	ldrb	r3, [r3, #4]
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d003      	beq.n	8005e92 <USB_EPClearStall+0x9e>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	791b      	ldrb	r3, [r3, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d10f      	bne.n	8005eb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ede:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ee2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ef4:	68f9      	ldr	r1, [r7, #12]
 8005ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3a:	f023 0302 	bic.w	r3, r3, #2
 8005f3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f68:	f023 0303 	bic.w	r3, r3, #3
 8005f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	0c1b      	lsrs	r3, r3, #16
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	4013      	ands	r3, r2
 800600c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	b29b      	uxth	r3, r3
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4013      	ands	r3, r2
 800604a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800604c:	68bb      	ldr	r3, [r7, #8]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800605a:	b480      	push	{r7}
 800605c:	b087      	sub	sp, #28
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	fa22 f303 	lsr.w	r3, r2, r3
 800608a:	01db      	lsls	r3, r3, #7
 800608c:	b2db      	uxtb	r3, r3
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4013      	ands	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060a8:	68bb      	ldr	r3, [r7, #8]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0301 	and.w	r3, r3, #1
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060f0:	f023 0307 	bic.w	r3, r3, #7
 80060f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006108:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	460b      	mov	r3, r1
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	333c      	adds	r3, #60	; 0x3c
 800612e:	3304      	adds	r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <USB_EP0_OutStart+0xb8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d90a      	bls.n	8006152 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614c:	d101      	bne.n	8006152 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e037      	b.n	80061c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006170:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006180:	f043 0318 	orr.w	r3, r3, #24
 8006184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006194:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006198:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10f      	bne.n	80061c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	4f54300a 	.word	0x4f54300a

080061d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a13      	ldr	r2, [pc, #76]	; (8006238 <USB_CoreReset+0x64>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d901      	bls.n	80061f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e01b      	b.n	800622a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	daf2      	bge.n	80061e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3301      	adds	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a09      	ldr	r2, [pc, #36]	; (8006238 <USB_CoreReset+0x64>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e006      	b.n	800622a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d0f0      	beq.n	800620a <USB_CoreReset+0x36>

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	00030d40 	.word	0x00030d40

0800623c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006248:	2028      	movs	r0, #40	; 0x28
 800624a:	f002 fab9 	bl	80087c0 <USBD_static_malloc>
 800624e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	32b0      	adds	r2, #176	; 0xb0
 8006260:	2100      	movs	r1, #0
 8006262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006266:	2302      	movs	r3, #2
 8006268:	e08b      	b.n	8006382 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	32b0      	adds	r2, #176	; 0xb0
 8006274:	68f9      	ldr	r1, [r7, #12]
 8006276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	32b0      	adds	r2, #176	; 0xb0
 8006284:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7c1b      	ldrb	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d11b      	bne.n	80062ce <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006296:	4b3d      	ldr	r3, [pc, #244]	; (800638c <USBD_CUSTOM_HID_Init+0x150>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f003 020f 	and.w	r2, r3, #15
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	3326      	adds	r3, #38	; 0x26
 80062ac:	2205      	movs	r2, #5
 80062ae:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80062b0:	4b37      	ldr	r3, [pc, #220]	; (8006390 <USBD_CUSTOM_HID_Init+0x154>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80062c8:	2205      	movs	r2, #5
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e01a      	b.n	8006304 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80062ce:	4b2f      	ldr	r3, [pc, #188]	; (800638c <USBD_CUSTOM_HID_Init+0x150>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 020f 	and.w	r2, r3, #15
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	3326      	adds	r3, #38	; 0x26
 80062e4:	2205      	movs	r2, #5
 80062e6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80062e8:	4b29      	ldr	r3, [pc, #164]	; (8006390 <USBD_CUSTOM_HID_Init+0x154>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006300:	2205      	movs	r2, #5
 8006302:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006304:	4b21      	ldr	r3, [pc, #132]	; (800638c <USBD_CUSTOM_HID_Init+0x150>)
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	2302      	movs	r3, #2
 800630a:	2203      	movs	r2, #3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f002 f946 	bl	800859e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006312:	4b1e      	ldr	r3, [pc, #120]	; (800638c <USBD_CUSTOM_HID_Init+0x150>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f003 020f 	and.w	r2, r3, #15
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	2201      	movs	r2, #1
 800632a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800632c:	4b18      	ldr	r3, [pc, #96]	; (8006390 <USBD_CUSTOM_HID_Init+0x154>)
 800632e:	7819      	ldrb	r1, [r3, #0]
 8006330:	2302      	movs	r3, #2
 8006332:	2203      	movs	r2, #3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f002 f932 	bl	800859e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800633a:	4b15      	ldr	r3, [pc, #84]	; (8006390 <USBD_CUSTOM_HID_Init+0x154>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f003 020f 	and.w	r2, r3, #15
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006352:	2201      	movs	r2, #1
 8006354:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	33b0      	adds	r3, #176	; 0xb0
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <USBD_CUSTOM_HID_Init+0x154>)
 8006374:	7819      	ldrb	r1, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	2311      	movs	r3, #17
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 f9fe 	bl	800877c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000092 	.word	0x20000092
 8006390:	20000093 	.word	0x20000093

08006394 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80063a0:	4b37      	ldr	r3, [pc, #220]	; (8006480 <USBD_CUSTOM_HID_DeInit+0xec>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f002 f91f 	bl	80085ea <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80063ac:	4b34      	ldr	r3, [pc, #208]	; (8006480 <USBD_CUSTOM_HID_DeInit+0xec>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2200      	movs	r2, #0
 80063c4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80063c6:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <USBD_CUSTOM_HID_DeInit+0xec>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 020f 	and.w	r2, r3, #15
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3326      	adds	r3, #38	; 0x26
 80063dc:	2200      	movs	r2, #0
 80063de:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80063e0:	4b28      	ldr	r3, [pc, #160]	; (8006484 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 f8ff 	bl	80085ea <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006404:	2200      	movs	r2, #0
 8006406:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006420:	2200      	movs	r2, #0
 8006422:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	32b0      	adds	r2, #176	; 0xb0
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01f      	beq.n	8006476 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	33b0      	adds	r3, #176	; 0xb0
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	32b0      	adds	r2, #176	; 0xb0
 8006454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006458:	4618      	mov	r0, r3
 800645a:	f002 f9bf 	bl	80087dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	32b0      	adds	r2, #176	; 0xb0
 8006468:	2100      	movs	r1, #0
 800646a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000092 	.word	0x20000092
 8006484:	20000093 	.word	0x20000093

08006488 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32b0      	adds	r2, #176	; 0xb0
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e0f8      	b.n	80066ae <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d056      	beq.n	8006576 <USBD_CUSTOM_HID_Setup+0xee>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	f040 80e8 	bne.w	800669e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	3b02      	subs	r3, #2
 80064d4:	2b09      	cmp	r3, #9
 80064d6:	d846      	bhi.n	8006566 <USBD_CUSTOM_HID_Setup+0xde>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <USBD_CUSTOM_HID_Setup+0x58>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006539 	.word	0x08006539
 80064e4:	08006517 	.word	0x08006517
 80064e8:	08006567 	.word	0x08006567
 80064ec:	08006567 	.word	0x08006567
 80064f0:	08006567 	.word	0x08006567
 80064f4:	08006567 	.word	0x08006567
 80064f8:	08006567 	.word	0x08006567
 80064fc:	08006549 	.word	0x08006549
 8006500:	08006527 	.word	0x08006527
 8006504:	08006509 	.word	0x08006509
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	615a      	str	r2, [r3, #20]
          break;
 8006514:	e02e      	b.n	8006574 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3314      	adds	r3, #20
 800651a:	2201      	movs	r2, #1
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fca8 	bl	8007e74 <USBD_CtlSendData>
          break;
 8006524:	e026      	b.n	8006574 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	885b      	ldrh	r3, [r3, #2]
 800652a:	0a1b      	lsrs	r3, r3, #8
 800652c:	b29b      	uxth	r3, r3
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	619a      	str	r2, [r3, #24]
          break;
 8006536:	e01d      	b.n	8006574 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3318      	adds	r3, #24
 800653c:	2201      	movs	r2, #1
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fc97 	bl	8007e74 <USBD_CtlSendData>
          break;
 8006546:	e015      	b.n	8006574 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2201      	movs	r2, #1
 800654c:	621a      	str	r2, [r3, #32]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800654e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	2b11      	cmp	r3, #17
 8006556:	bf28      	it	cs
 8006558:	2311      	movcs	r3, #17
 800655a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800655c:	461a      	mov	r2, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 fcb4 	bl	8007ecc <USBD_CtlPrepareRx>
          break;
 8006564:	e006      	b.n	8006574 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fc12 	bl	8007d92 <USBD_CtlError>
          ret = USBD_FAIL;
 800656e:	2303      	movs	r3, #3
 8006570:	75fb      	strb	r3, [r7, #23]
          break;
 8006572:	bf00      	nop
      }
      break;
 8006574:	e09a      	b.n	80066ac <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b0b      	cmp	r3, #11
 800657c:	f200 8086 	bhi.w	800668c <USBD_CUSTOM_HID_Setup+0x204>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <USBD_CUSTOM_HID_Setup+0x100>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	080065b9 	.word	0x080065b9
 800658c:	0800669b 	.word	0x0800669b
 8006590:	0800668d 	.word	0x0800668d
 8006594:	0800668d 	.word	0x0800668d
 8006598:	0800668d 	.word	0x0800668d
 800659c:	0800668d 	.word	0x0800668d
 80065a0:	080065e3 	.word	0x080065e3
 80065a4:	0800668d 	.word	0x0800668d
 80065a8:	0800668d 	.word	0x0800668d
 80065ac:	0800668d 	.word	0x0800668d
 80065b0:	0800663b 	.word	0x0800663b
 80065b4:	08006665 	.word	0x08006665
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d107      	bne.n	80065d4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065c4:	f107 030e 	add.w	r3, r7, #14
 80065c8:	2202      	movs	r2, #2
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 fc51 	bl	8007e74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065d2:	e063      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fbdb 	bl	8007d92 <USBD_CtlError>
            ret = USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	75fb      	strb	r3, [r7, #23]
          break;
 80065e0:	e05c      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	885b      	ldrh	r3, [r3, #2]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b22      	cmp	r3, #34	; 0x22
 80065ec:	d110      	bne.n	8006610 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b21      	cmp	r3, #33	; 0x21
 80065f4:	bf28      	it	cs
 80065f6:	2321      	movcs	r3, #33	; 0x21
 80065f8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	33b0      	adds	r3, #176	; 0xb0
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	e00d      	b.n	800662c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b21      	cmp	r3, #33	; 0x21
 800661a:	d107      	bne.n	800662c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800661c:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <USBD_CUSTOM_HID_Setup+0x230>)
 800661e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	2b09      	cmp	r3, #9
 8006626:	bf28      	it	cs
 8006628:	2309      	movcs	r3, #9
 800662a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800662c:	8bfb      	ldrh	r3, [r7, #30]
 800662e:	461a      	mov	r2, r3
 8006630:	69b9      	ldr	r1, [r7, #24]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fc1e 	bl	8007e74 <USBD_CtlSendData>
          break;
 8006638:	e030      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b03      	cmp	r3, #3
 8006644:	d107      	bne.n	8006656 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	331c      	adds	r3, #28
 800664a:	2201      	movs	r2, #1
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 fc10 	bl	8007e74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006654:	e022      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fb9a 	bl	8007d92 <USBD_CtlError>
            ret = USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	75fb      	strb	r3, [r7, #23]
          break;
 8006662:	e01b      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b03      	cmp	r3, #3
 800666e:	d106      	bne.n	800667e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	61da      	str	r2, [r3, #28]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800667c:	e00e      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fb86 	bl	8007d92 <USBD_CtlError>
            ret = USBD_FAIL;
 8006686:	2303      	movs	r3, #3
 8006688:	75fb      	strb	r3, [r7, #23]
          break;
 800668a:	e007      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb7f 	bl	8007d92 <USBD_CtlError>
          ret = USBD_FAIL;
 8006694:	2303      	movs	r3, #3
 8006696:	75fb      	strb	r3, [r7, #23]
          break;
 8006698:	e000      	b.n	800669c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800669a:	bf00      	nop
      }
      break;
 800669c:	e006      	b.n	80066ac <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 fb76 	bl	8007d92 <USBD_CtlError>
      ret = USBD_FAIL;
 80066a6:	2303      	movs	r3, #3
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	bf00      	nop
  }
  return (uint8_t)ret;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000007c 	.word	0x2000007c

080066bc <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	32b0      	adds	r2, #176	; 0xb0
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	e021      	b.n	8006724 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	32b0      	adds	r2, #176	; 0xb0
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d112      	bne.n	8006722 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <USBD_CUSTOM_HID_SendReport+0x70>)
 8006710:	7819      	ldrb	r1, [r3, #0]
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f002 f80f 	bl	800873a <USBD_LL_Transmit>
 800671c:	e001      	b.n	8006722 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000092 	.word	0x20000092

08006730 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006738:	2181      	movs	r1, #129	; 0x81
 800673a:	4815      	ldr	r0, [pc, #84]	; (8006790 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800673c:	f000 fcf1 	bl	8007122 <USBD_GetEpDesc>
 8006740:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006742:	2101      	movs	r1, #1
 8006744:	4812      	ldr	r0, [pc, #72]	; (8006790 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006746:	f000 fcec 	bl	8007122 <USBD_GetEpDesc>
 800674a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f042 0202 	orr.w	r2, r2, #2
 800675a:	711a      	strb	r2, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2205      	movs	r2, #5
 8006764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	f042 0202 	orr.w	r2, r2, #2
 8006774:	711a      	strb	r2, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2205      	movs	r2, #5
 800677e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2229      	movs	r2, #41	; 0x29
 8006784:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006786:	4b02      	ldr	r3, [pc, #8]	; (8006790 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20000050 	.word	0x20000050

08006794 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800679c:	2181      	movs	r1, #129	; 0x81
 800679e:	4815      	ldr	r0, [pc, #84]	; (80067f4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80067a0:	f000 fcbf 	bl	8007122 <USBD_GetEpDesc>
 80067a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80067a6:	2101      	movs	r1, #1
 80067a8:	4812      	ldr	r0, [pc, #72]	; (80067f4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80067aa:	f000 fcba 	bl	8007122 <USBD_GetEpDesc>
 80067ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f042 0202 	orr.w	r2, r2, #2
 80067be:	711a      	strb	r2, [r3, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2205      	movs	r2, #5
 80067c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f042 0202 	orr.w	r2, r2, #2
 80067d8:	711a      	strb	r2, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2205      	movs	r2, #5
 80067e2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2229      	movs	r2, #41	; 0x29
 80067e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80067ea:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000050 	.word	0x20000050

080067f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006800:	2181      	movs	r1, #129	; 0x81
 8006802:	4815      	ldr	r0, [pc, #84]	; (8006858 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006804:	f000 fc8d 	bl	8007122 <USBD_GetEpDesc>
 8006808:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800680a:	2101      	movs	r1, #1
 800680c:	4812      	ldr	r0, [pc, #72]	; (8006858 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800680e:	f000 fc88 	bl	8007122 <USBD_GetEpDesc>
 8006812:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f042 0202 	orr.w	r2, r2, #2
 8006822:	711a      	strb	r2, [r3, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2205      	movs	r2, #5
 800682c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	f042 0202 	orr.w	r2, r2, #2
 800683c:	711a      	strb	r2, [r3, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2205      	movs	r2, #5
 8006846:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2229      	movs	r2, #41	; 0x29
 800684c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800684e:	4b02      	ldr	r3, [pc, #8]	; (8006858 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000050 	.word	0x20000050

0800685c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32b0      	adds	r2, #176	; 0xb0
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return (uint8_t)USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	32b0      	adds	r2, #176	; 0xb0
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e017      	b.n	80068dc <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32b0      	adds	r2, #176	; 0xb0
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	33b0      	adds	r3, #176	; 0xb0
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	7810      	ldrb	r0, [r2, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	7852      	ldrb	r2, [r2, #1]
 80068d6:	4611      	mov	r1, r2
 80068d8:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	32b0      	adds	r2, #176	; 0xb0
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006902:	2303      	movs	r3, #3
 8006904:	e016      	b.n	8006934 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d111      	bne.n	8006932 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	33b0      	adds	r3, #176	; 0xb0
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	7810      	ldrb	r0, [r2, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	7852      	ldrb	r2, [r2, #1]
 8006928:	4611      	mov	r1, r2
 800692a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	621a      	str	r2, [r3, #32]
  }

  return (uint8_t)USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	220a      	movs	r2, #10
 8006948:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800694a:	4b03      	ldr	r3, [pc, #12]	; (8006958 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800694c:	4618      	mov	r0, r3
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	20000088 	.word	0x20000088

0800695c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e009      	b.n	8006984 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	33b0      	adds	r3, #176	; 0xb0
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e01f      	b.n	80069e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	79fa      	ldrb	r2, [r7, #7]
 80069da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f001 fd77 	bl	80084d0 <USBD_LL_Init>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e025      	b.n	8006a54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	32ae      	adds	r2, #174	; 0xae
 8006a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00f      	beq.n	8006a44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32ae      	adds	r2, #174	; 0xae
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	f107 020e 	add.w	r2, r7, #14
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fd7f 	bl	8008568 <USBD_LL_Start>
 8006a6a:	4603      	mov	r3, r0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	4611      	mov	r1, r2
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f908 	bl	8007d1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d01a      	beq.n	8006b68 <USBD_LL_SetupStage+0x72>
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d822      	bhi.n	8006b7c <USBD_LL_SetupStage+0x86>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <USBD_LL_SetupStage+0x4a>
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d00a      	beq.n	8006b54 <USBD_LL_SetupStage+0x5e>
 8006b3e:	e01d      	b.n	8006b7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fb5f 	bl	800720c <USBD_StdDevReq>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
      break;
 8006b52:	e020      	b.n	8006b96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbc7 	bl	80072f0 <USBD_StdItfReq>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
      break;
 8006b66:	e016      	b.n	8006b96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fc29 	bl	80073c8 <USBD_StdEPReq>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7a:	e00c      	b.n	8006b96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fd4c 	bl	8008628 <USBD_LL_StallEP>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	bf00      	nop
  }

  return ret;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d16e      	bne.n	8006c96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	f040 8098 	bne.w	8006cfc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d913      	bls.n	8006c00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bf28      	it	cs
 8006bf2:	4613      	movcs	r3, r2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f001 f984 	bl	8007f06 <USBD_CtlContinueRx>
 8006bfe:	e07d      	b.n	8006cfc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d014      	beq.n	8006c38 <USBD_LL_DataOutStage+0x98>
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d81d      	bhi.n	8006c4e <USBD_LL_DataOutStage+0xae>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <USBD_LL_DataOutStage+0x7c>
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d003      	beq.n	8006c22 <USBD_LL_DataOutStage+0x82>
 8006c1a:	e018      	b.n	8006c4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c20:	e018      	b.n	8006c54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fa5e 	bl	80070ee <USBD_CoreFindIF>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75bb      	strb	r3, [r7, #22]
            break;
 8006c36:	e00d      	b.n	8006c54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fa60 	bl	8007108 <USBD_CoreFindEP>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c4c:	e002      	b.n	8006c54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75bb      	strb	r3, [r7, #22]
            break;
 8006c52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c54:	7dbb      	ldrb	r3, [r7, #22]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d119      	bne.n	8006c8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d113      	bne.n	8006c8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c66:	7dba      	ldrb	r2, [r7, #22]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	32ae      	adds	r2, #174	; 0xae
 8006c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c76:	7dba      	ldrb	r2, [r7, #22]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c7e:	7dba      	ldrb	r2, [r7, #22]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	32ae      	adds	r2, #174	; 0xae
 8006c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 f94a 	bl	8007f28 <USBD_CtlSendStatus>
 8006c94:	e032      	b.n	8006cfc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 fa31 	bl	8007108 <USBD_CoreFindEP>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	2bff      	cmp	r3, #255	; 0xff
 8006cae:	d025      	beq.n	8006cfc <USBD_LL_DataOutStage+0x15c>
 8006cb0:	7dbb      	ldrb	r3, [r7, #22]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d122      	bne.n	8006cfc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d117      	bne.n	8006cf2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006cc2:	7dba      	ldrb	r2, [r7, #22]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	32ae      	adds	r2, #174	; 0xae
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00f      	beq.n	8006cf2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006cd2:	7dba      	ldrb	r2, [r7, #22]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cda:	7dba      	ldrb	r2, [r7, #22]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	32ae      	adds	r2, #174	; 0xae
 8006ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	7afa      	ldrb	r2, [r7, #11]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	e000      	b.n	8006cfe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d16f      	bne.n	8006dfa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3314      	adds	r3, #20
 8006d1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d15a      	bne.n	8006de0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d914      	bls.n	8006d60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f001 f8ac 	bl	8007eaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d52:	2300      	movs	r3, #0
 8006d54:	2200      	movs	r2, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 fd0f 	bl	800877c <USBD_LL_PrepareReceive>
 8006d5e:	e03f      	b.n	8006de0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d11c      	bne.n	8006da6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d316      	bcc.n	8006da6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d20f      	bcs.n	8006da6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d86:	2200      	movs	r2, #0
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f001 f88d 	bl	8007eaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f001 fcec 	bl	800877c <USBD_LL_PrepareReceive>
 8006da4:	e01c      	b.n	8006de0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d10f      	bne.n	8006dd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 fc27 	bl	8008628 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 f8b7 	bl	8007f4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03a      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fe42 	bl	8006a74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006df8:	e032      	b.n	8006e60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 f97f 	bl	8007108 <USBD_CoreFindEP>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2bff      	cmp	r3, #255	; 0xff
 8006e12:	d025      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d122      	bne.n	8006e60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d11c      	bne.n	8006e60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e26:	7dfa      	ldrb	r2, [r7, #23]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	32ae      	adds	r2, #174	; 0xae
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d014      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e36:	7dfa      	ldrb	r2, [r7, #23]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e3e:	7dfa      	ldrb	r2, [r7, #23]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	32ae      	adds	r2, #174	; 0xae
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	7afa      	ldrb	r2, [r7, #11]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e56:	7dbb      	ldrb	r3, [r7, #22]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	e000      	b.n	8006e62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d014      	beq.n	8006ed0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6852      	ldr	r2, [r2, #4]
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fb61 	bl	800859e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2240      	movs	r2, #64	; 0x40
 8006ee8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eec:	2340      	movs	r3, #64	; 0x40
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2180      	movs	r1, #128	; 0x80
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fb53 	bl	800859e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2240      	movs	r2, #64	; 0x40
 8006f02:	621a      	str	r2, [r3, #32]

  return ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2204      	movs	r2, #4
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d106      	bne.n	8006f7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d110      	bne.n	8006fc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	32ae      	adds	r2, #174	; 0xae
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e01c      	b.n	8007026 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d115      	bne.n	8007024 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	32ae      	adds	r2, #174	; 0xae
 8007002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	32ae      	adds	r2, #174	; 0xae
 8007016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	4611      	mov	r1, r2
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32ae      	adds	r2, #174	; 0xae
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	e01c      	b.n	800708a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d115      	bne.n	8007088 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	32ae      	adds	r2, #174	; 0xae
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00e      	beq.n	80070e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6852      	ldr	r2, [r2, #4]
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	4611      	mov	r1, r2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007114:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	429a      	cmp	r2, r3
 8007148:	d920      	bls.n	800718c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007152:	e013      	b.n	800717c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007154:	f107 030a 	add.w	r3, r7, #10
 8007158:	4619      	mov	r1, r3
 800715a:	6978      	ldr	r0, [r7, #20]
 800715c:	f000 f81b 	bl	8007196 <USBD_GetNextDesc>
 8007160:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	785b      	ldrb	r3, [r3, #1]
 8007166:	2b05      	cmp	r3, #5
 8007168:	d108      	bne.n	800717c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	789b      	ldrb	r3, [r3, #2]
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	429a      	cmp	r2, r3
 8007176:	d008      	beq.n	800718a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	885b      	ldrh	r3, [r3, #2]
 8007180:	b29a      	uxth	r2, r3
 8007182:	897b      	ldrh	r3, [r7, #10]
 8007184:	429a      	cmp	r2, r3
 8007186:	d8e5      	bhi.n	8007154 <USBD_GetEpDesc+0x32>
 8007188:	e000      	b.n	800718c <USBD_GetEpDesc+0x6a>
          break;
 800718a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800718c:	693b      	ldr	r3, [r7, #16]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	881a      	ldrh	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4413      	add	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071c2:	68fb      	ldr	r3, [r7, #12]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3301      	adds	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071ee:	8a3b      	ldrh	r3, [r7, #16]
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	b21a      	sxth	r2, r3
 80071f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071fe:	89fb      	ldrh	r3, [r7, #14]
}
 8007200:	4618      	mov	r0, r3
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d005      	beq.n	8007232 <USBD_StdDevReq+0x26>
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d857      	bhi.n	80072da <USBD_StdDevReq+0xce>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <USBD_StdDevReq+0x42>
 800722e:	2b20      	cmp	r3, #32
 8007230:	d153      	bne.n	80072da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	32ae      	adds	r2, #174	; 0xae
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
      break;
 800724c:	e04a      	b.n	80072e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b09      	cmp	r3, #9
 8007254:	d83b      	bhi.n	80072ce <USBD_StdDevReq+0xc2>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <USBD_StdDevReq+0x50>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	080072b1 	.word	0x080072b1
 8007260:	080072c5 	.word	0x080072c5
 8007264:	080072cf 	.word	0x080072cf
 8007268:	080072bb 	.word	0x080072bb
 800726c:	080072cf 	.word	0x080072cf
 8007270:	0800728f 	.word	0x0800728f
 8007274:	08007285 	.word	0x08007285
 8007278:	080072cf 	.word	0x080072cf
 800727c:	080072a7 	.word	0x080072a7
 8007280:	08007299 	.word	0x08007299
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa3c 	bl	8007704 <USBD_GetDescriptor>
          break;
 800728c:	e024      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fba1 	bl	80079d8 <USBD_SetAddress>
          break;
 8007296:	e01f      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fbe0 	bl	8007a60 <USBD_SetConfig>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
          break;
 80072a4:	e018      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc83 	bl	8007bb4 <USBD_GetConfig>
          break;
 80072ae:	e013      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fcb4 	bl	8007c20 <USBD_GetStatus>
          break;
 80072b8:	e00e      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fce3 	bl	8007c88 <USBD_SetFeature>
          break;
 80072c2:	e009      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fd07 	bl	8007cda <USBD_ClrFeature>
          break;
 80072cc:	e004      	b.n	80072d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd5e 	bl	8007d92 <USBD_CtlError>
          break;
 80072d6:	bf00      	nop
      }
      break;
 80072d8:	e004      	b.n	80072e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fd58 	bl	8007d92 <USBD_CtlError>
      break;
 80072e2:	bf00      	nop
  }

  return ret;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop

080072f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	d005      	beq.n	8007316 <USBD_StdItfReq+0x26>
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d852      	bhi.n	80073b4 <USBD_StdItfReq+0xc4>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <USBD_StdItfReq+0x26>
 8007312:	2b20      	cmp	r3, #32
 8007314:	d14e      	bne.n	80073b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	2b02      	cmp	r3, #2
 8007322:	d840      	bhi.n	80073a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	889b      	ldrh	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b01      	cmp	r3, #1
 800732c:	d836      	bhi.n	800739c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	889b      	ldrh	r3, [r3, #4]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff fed9 	bl	80070ee <USBD_CoreFindIF>
 800733c:	4603      	mov	r3, r0
 800733e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2bff      	cmp	r3, #255	; 0xff
 8007344:	d01d      	beq.n	8007382 <USBD_StdItfReq+0x92>
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11a      	bne.n	8007382 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800734c:	7bba      	ldrb	r2, [r7, #14]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32ae      	adds	r2, #174	; 0xae
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00f      	beq.n	800737c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800735c:	7bba      	ldrb	r2, [r7, #14]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007364:	7bba      	ldrb	r2, [r7, #14]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	32ae      	adds	r2, #174	; 0xae
 800736a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800737a:	e004      	b.n	8007386 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007380:	e001      	b.n	8007386 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007382:	2303      	movs	r3, #3
 8007384:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	88db      	ldrh	r3, [r3, #6]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d110      	bne.n	80073b0 <USBD_StdItfReq+0xc0>
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10d      	bne.n	80073b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fdc7 	bl	8007f28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800739a:	e009      	b.n	80073b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fcf7 	bl	8007d92 <USBD_CtlError>
          break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fcf2 	bl	8007d92 <USBD_CtlError>
          break;
 80073ae:	e000      	b.n	80073b2 <USBD_StdItfReq+0xc2>
          break;
 80073b0:	bf00      	nop
      }
      break;
 80073b2:	e004      	b.n	80073be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fceb 	bl	8007d92 <USBD_CtlError>
      break;
 80073bc:	bf00      	nop
  }

  return ret;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	889b      	ldrh	r3, [r3, #4]
 80073da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d007      	beq.n	80073f8 <USBD_StdEPReq+0x30>
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	f200 817f 	bhi.w	80076ec <USBD_StdEPReq+0x324>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d02a      	beq.n	8007448 <USBD_StdEPReq+0x80>
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	f040 817a 	bne.w	80076ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe83 	bl	8007108 <USBD_CoreFindEP>
 8007402:	4603      	mov	r3, r0
 8007404:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007406:	7b7b      	ldrb	r3, [r7, #13]
 8007408:	2bff      	cmp	r3, #255	; 0xff
 800740a:	f000 8174 	beq.w	80076f6 <USBD_StdEPReq+0x32e>
 800740e:	7b7b      	ldrb	r3, [r7, #13]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 8170 	bne.w	80076f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007416:	7b7a      	ldrb	r2, [r7, #13]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800741e:	7b7a      	ldrb	r2, [r7, #13]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	32ae      	adds	r2, #174	; 0xae
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8163 	beq.w	80076f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007430:	7b7a      	ldrb	r2, [r7, #13]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	; 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007446:	e156      	b.n	80076f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b03      	cmp	r3, #3
 800744e:	d008      	beq.n	8007462 <USBD_StdEPReq+0x9a>
 8007450:	2b03      	cmp	r3, #3
 8007452:	f300 8145 	bgt.w	80076e0 <USBD_StdEPReq+0x318>
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 809b 	beq.w	8007592 <USBD_StdEPReq+0x1ca>
 800745c:	2b01      	cmp	r3, #1
 800745e:	d03c      	beq.n	80074da <USBD_StdEPReq+0x112>
 8007460:	e13e      	b.n	80076e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d002      	beq.n	8007474 <USBD_StdEPReq+0xac>
 800746e:	2b03      	cmp	r3, #3
 8007470:	d016      	beq.n	80074a0 <USBD_StdEPReq+0xd8>
 8007472:	e02c      	b.n	80074ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00d      	beq.n	8007496 <USBD_StdEPReq+0xce>
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b80      	cmp	r3, #128	; 0x80
 800747e:	d00a      	beq.n	8007496 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 f8cf 	bl	8008628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800748a:	2180      	movs	r1, #128	; 0x80
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f8cb 	bl	8008628 <USBD_LL_StallEP>
 8007492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007494:	e020      	b.n	80074d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc7a 	bl	8007d92 <USBD_CtlError>
              break;
 800749e:	e01b      	b.n	80074d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	885b      	ldrh	r3, [r3, #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10e      	bne.n	80074c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <USBD_StdEPReq+0xfe>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d008      	beq.n	80074c6 <USBD_StdEPReq+0xfe>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	88db      	ldrh	r3, [r3, #6]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f8b1 	bl	8008628 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fd2e 	bl	8007f28 <USBD_CtlSendStatus>

              break;
 80074cc:	e004      	b.n	80074d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fc5e 	bl	8007d92 <USBD_CtlError>
              break;
 80074d6:	bf00      	nop
          }
          break;
 80074d8:	e107      	b.n	80076ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d002      	beq.n	80074ec <USBD_StdEPReq+0x124>
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d016      	beq.n	8007518 <USBD_StdEPReq+0x150>
 80074ea:	e04b      	b.n	8007584 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <USBD_StdEPReq+0x146>
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b80      	cmp	r3, #128	; 0x80
 80074f6:	d00a      	beq.n	800750e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f893 	bl	8008628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 f88f 	bl	8008628 <USBD_LL_StallEP>
 800750a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800750c:	e040      	b.n	8007590 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc3e 	bl	8007d92 <USBD_CtlError>
              break;
 8007516:	e03b      	b.n	8007590 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	885b      	ldrh	r3, [r3, #2]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d136      	bne.n	800758e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 f899 	bl	8008666 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fcf7 	bl	8007f28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fde2 	bl	8007108 <USBD_CoreFindEP>
 8007544:	4603      	mov	r3, r0
 8007546:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007548:	7b7b      	ldrb	r3, [r7, #13]
 800754a:	2bff      	cmp	r3, #255	; 0xff
 800754c:	d01f      	beq.n	800758e <USBD_StdEPReq+0x1c6>
 800754e:	7b7b      	ldrb	r3, [r7, #13]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d11c      	bne.n	800758e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007554:	7b7a      	ldrb	r2, [r7, #13]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800755c:	7b7a      	ldrb	r2, [r7, #13]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32ae      	adds	r2, #174	; 0xae
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800756c:	7b7a      	ldrb	r2, [r7, #13]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32ae      	adds	r2, #174	; 0xae
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007582:	e004      	b.n	800758e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fc03 	bl	8007d92 <USBD_CtlError>
              break;
 800758c:	e000      	b.n	8007590 <USBD_StdEPReq+0x1c8>
              break;
 800758e:	bf00      	nop
          }
          break;
 8007590:	e0ab      	b.n	80076ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d002      	beq.n	80075a4 <USBD_StdEPReq+0x1dc>
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d032      	beq.n	8007608 <USBD_StdEPReq+0x240>
 80075a2:	e097      	b.n	80076d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <USBD_StdEPReq+0x1f2>
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	2b80      	cmp	r3, #128	; 0x80
 80075ae:	d004      	beq.n	80075ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fbed 	bl	8007d92 <USBD_CtlError>
                break;
 80075b8:	e091      	b.n	80076de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da0b      	bge.n	80075da <USBD_StdEPReq+0x212>
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	3310      	adds	r3, #16
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4413      	add	r3, r2
 80075d6:	3304      	adds	r3, #4
 80075d8:	e00b      	b.n	80075f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	4413      	add	r3, r2
 80075f0:	3304      	adds	r3, #4
 80075f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2202      	movs	r2, #2
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fc37 	bl	8007e74 <USBD_CtlSendData>
              break;
 8007606:	e06a      	b.n	80076de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800760c:	2b00      	cmp	r3, #0
 800760e:	da11      	bge.n	8007634 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	440b      	add	r3, r1
 8007622:	3324      	adds	r3, #36	; 0x24
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d117      	bne.n	800765a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fbb0 	bl	8007d92 <USBD_CtlError>
                  break;
 8007632:	e054      	b.n	80076de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fb9d 	bl	8007d92 <USBD_CtlError>
                  break;
 8007658:	e041      	b.n	80076de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800765a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	da0b      	bge.n	800767a <USBD_StdEPReq+0x2b2>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	3310      	adds	r3, #16
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	3304      	adds	r3, #4
 8007678:	e00b      	b.n	8007692 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	3304      	adds	r3, #4
 8007692:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <USBD_StdEPReq+0x2d8>
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b80      	cmp	r3, #128	; 0x80
 800769e:	d103      	bne.n	80076a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e00e      	b.n	80076c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fff9 	bl	80086a4 <USBD_LL_IsStallEP>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e002      	b.n	80076c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2202      	movs	r2, #2
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fbd1 	bl	8007e74 <USBD_CtlSendData>
              break;
 80076d2:	e004      	b.n	80076de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fb5b 	bl	8007d92 <USBD_CtlError>
              break;
 80076dc:	bf00      	nop
          }
          break;
 80076de:	e004      	b.n	80076ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fb55 	bl	8007d92 <USBD_CtlError>
          break;
 80076e8:	bf00      	nop
      }
      break;
 80076ea:	e005      	b.n	80076f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fb4f 	bl	8007d92 <USBD_CtlError>
      break;
 80076f4:	e000      	b.n	80076f8 <USBD_StdEPReq+0x330>
      break;
 80076f6:	bf00      	nop
  }

  return ret;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	885b      	ldrh	r3, [r3, #2]
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	2b06      	cmp	r3, #6
 8007726:	f200 8128 	bhi.w	800797a <USBD_GetDescriptor+0x276>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <USBD_GetDescriptor+0x2c>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	0800774d 	.word	0x0800774d
 8007734:	08007765 	.word	0x08007765
 8007738:	080077a5 	.word	0x080077a5
 800773c:	0800797b 	.word	0x0800797b
 8007740:	0800797b 	.word	0x0800797b
 8007744:	0800791b 	.word	0x0800791b
 8007748:	08007947 	.word	0x08007947
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7c12      	ldrb	r2, [r2, #16]
 8007758:	f107 0108 	add.w	r1, r7, #8
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
      break;
 8007762:	e112      	b.n	800798a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7c1b      	ldrb	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10d      	bne.n	8007788 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f107 0208 	add.w	r2, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	2202      	movs	r2, #2
 8007784:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007786:	e100      	b.n	800798a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	f107 0208 	add.w	r2, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	2202      	movs	r2, #2
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e0f2      	b.n	800798a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	885b      	ldrh	r3, [r3, #2]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	f200 80ac 	bhi.w	8007908 <USBD_GetDescriptor+0x204>
 80077b0:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <USBD_GetDescriptor+0xb4>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	080077d1 	.word	0x080077d1
 80077bc:	08007805 	.word	0x08007805
 80077c0:	08007839 	.word	0x08007839
 80077c4:	0800786d 	.word	0x0800786d
 80077c8:	080078a1 	.word	0x080078a1
 80077cc:	080078d5 	.word	0x080078d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7c12      	ldrb	r2, [r2, #16]
 80077e8:	f107 0108 	add.w	r1, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f2:	e091      	b.n	8007918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 facb 	bl	8007d92 <USBD_CtlError>
            err++;
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	3301      	adds	r3, #1
 8007800:	72fb      	strb	r3, [r7, #11]
          break;
 8007802:	e089      	b.n	8007918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	7c12      	ldrb	r2, [r2, #16]
 800781c:	f107 0108 	add.w	r1, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007826:	e077      	b.n	8007918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fab1 	bl	8007d92 <USBD_CtlError>
            err++;
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	3301      	adds	r3, #1
 8007834:	72fb      	strb	r3, [r7, #11]
          break;
 8007836:	e06f      	b.n	8007918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785a:	e05d      	b.n	8007918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa97 	bl	8007d92 <USBD_CtlError>
            err++;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	3301      	adds	r3, #1
 8007868:	72fb      	strb	r3, [r7, #11]
          break;
 800786a:	e055      	b.n	8007918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7c12      	ldrb	r2, [r2, #16]
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788e:	e043      	b.n	8007918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa7d 	bl	8007d92 <USBD_CtlError>
            err++;
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	3301      	adds	r3, #1
 800789c:	72fb      	strb	r3, [r7, #11]
          break;
 800789e:	e03b      	b.n	8007918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	7c12      	ldrb	r2, [r2, #16]
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
 80078c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c2:	e029      	b.n	8007918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa63 	bl	8007d92 <USBD_CtlError>
            err++;
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	3301      	adds	r3, #1
 80078d0:	72fb      	strb	r3, [r7, #11]
          break;
 80078d2:	e021      	b.n	8007918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e00f      	b.n	8007918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa49 	bl	8007d92 <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e007      	b.n	8007918 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fa41 	bl	8007d92 <USBD_CtlError>
          err++;
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	3301      	adds	r3, #1
 8007914:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007916:	bf00      	nop
      }
      break;
 8007918:	e037      	b.n	800798a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7c1b      	ldrb	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	f107 0208 	add.w	r2, r7, #8
 800792e:	4610      	mov	r0, r2
 8007930:	4798      	blx	r3
 8007932:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007934:	e029      	b.n	800798a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fa2a 	bl	8007d92 <USBD_CtlError>
        err++;
 800793e:	7afb      	ldrb	r3, [r7, #11]
 8007940:	3301      	adds	r3, #1
 8007942:	72fb      	strb	r3, [r7, #11]
      break;
 8007944:	e021      	b.n	800798a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7c1b      	ldrb	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10d      	bne.n	800796a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	f107 0208 	add.w	r2, r7, #8
 800795a:	4610      	mov	r0, r2
 800795c:	4798      	blx	r3
 800795e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3301      	adds	r3, #1
 8007964:	2207      	movs	r2, #7
 8007966:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007968:	e00f      	b.n	800798a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa10 	bl	8007d92 <USBD_CtlError>
        err++;
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	3301      	adds	r3, #1
 8007976:	72fb      	strb	r3, [r7, #11]
      break;
 8007978:	e007      	b.n	800798a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fa08 	bl	8007d92 <USBD_CtlError>
      err++;
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	3301      	adds	r3, #1
 8007986:	72fb      	strb	r3, [r7, #11]
      break;
 8007988:	bf00      	nop
  }

  if (err != 0U)
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d11e      	bne.n	80079ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d016      	beq.n	80079c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007998:	893b      	ldrh	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00e      	beq.n	80079bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88da      	ldrh	r2, [r3, #6]
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bf28      	it	cs
 80079a8:	4613      	movcs	r3, r2
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079ae:	893b      	ldrh	r3, [r7, #8]
 80079b0:	461a      	mov	r2, r3
 80079b2:	68f9      	ldr	r1, [r7, #12]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa5d 	bl	8007e74 <USBD_CtlSendData>
 80079ba:	e009      	b.n	80079d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9e7 	bl	8007d92 <USBD_CtlError>
 80079c4:	e004      	b.n	80079d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 faae 	bl	8007f28 <USBD_CtlSendStatus>
 80079cc:	e000      	b.n	80079d0 <USBD_GetDescriptor+0x2cc>
    return;
 80079ce:	bf00      	nop
  }
}
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop

080079d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	889b      	ldrh	r3, [r3, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d131      	bne.n	8007a4e <USBD_SetAddress+0x76>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	88db      	ldrh	r3, [r3, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d12d      	bne.n	8007a4e <USBD_SetAddress+0x76>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	2b7f      	cmp	r3, #127	; 0x7f
 80079f8:	d829      	bhi.n	8007a4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d104      	bne.n	8007a1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f9bc 	bl	8007d92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	e01d      	b.n	8007a58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7bfa      	ldrb	r2, [r7, #15]
 8007a20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fe67 	bl	80086fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa7a 	bl	8007f28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a42:	e009      	b.n	8007a58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4c:	e004      	b.n	8007a58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f99e 	bl	8007d92 <USBD_CtlError>
  }
}
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	4b4e      	ldr	r3, [pc, #312]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007a76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a78:	4b4d      	ldr	r3, [pc, #308]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d905      	bls.n	8007a8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f985 	bl	8007d92 <USBD_CtlError>
    return USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e08c      	b.n	8007ba6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d002      	beq.n	8007a9e <USBD_SetConfig+0x3e>
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d029      	beq.n	8007af0 <USBD_SetConfig+0x90>
 8007a9c:	e075      	b.n	8007b8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a9e:	4b44      	ldr	r3, [pc, #272]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d020      	beq.n	8007ae8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007aa6:	4b42      	ldr	r3, [pc, #264]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ab0:	4b3f      	ldr	r3, [pc, #252]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fe ffe7 	bl	8006a8a <USBD_SetClassConfig>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d008      	beq.n	8007ad8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f962 	bl	8007d92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ad6:	e065      	b.n	8007ba4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa25 	bl	8007f28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ae6:	e05d      	b.n	8007ba4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fa1d 	bl	8007f28 <USBD_CtlSendStatus>
      break;
 8007aee:	e059      	b.n	8007ba4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007af0:	4b2f      	ldr	r3, [pc, #188]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d112      	bne.n	8007b1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b00:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fe ffd6 	bl	8006ac2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa06 	bl	8007f28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b1c:	e042      	b.n	8007ba4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d02a      	beq.n	8007b82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7fe ffc4 	bl	8006ac2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b44:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fe ff9d 	bl	8006a8a <USBD_SetClassConfig>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00f      	beq.n	8007b7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f918 	bl	8007d92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fe ffa9 	bl	8006ac2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b78:	e014      	b.n	8007ba4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f9d4 	bl	8007f28 <USBD_CtlSendStatus>
      break;
 8007b80:	e010      	b.n	8007ba4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9d0 	bl	8007f28 <USBD_CtlSendStatus>
      break;
 8007b88:	e00c      	b.n	8007ba4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f900 	bl	8007d92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <USBD_SetConfig+0x150>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fe ff92 	bl	8006ac2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	bf00      	nop
  }

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	2000052c 	.word	0x2000052c

08007bb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d004      	beq.n	8007bd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8e2 	bl	8007d92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bce:	e023      	b.n	8007c18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	dc02      	bgt.n	8007be2 <USBD_GetConfig+0x2e>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc03      	bgt.n	8007be8 <USBD_GetConfig+0x34>
 8007be0:	e015      	b.n	8007c0e <USBD_GetConfig+0x5a>
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d00b      	beq.n	8007bfe <USBD_GetConfig+0x4a>
 8007be6:	e012      	b.n	8007c0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f93c 	bl	8007e74 <USBD_CtlSendData>
        break;
 8007bfc:	e00c      	b.n	8007c18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3304      	adds	r3, #4
 8007c02:	2201      	movs	r2, #1
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f934 	bl	8007e74 <USBD_CtlSendData>
        break;
 8007c0c:	e004      	b.n	8007c18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8be 	bl	8007d92 <USBD_CtlError>
        break;
 8007c16:	bf00      	nop
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d81e      	bhi.n	8007c76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d004      	beq.n	8007c4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f8a5 	bl	8007d92 <USBD_CtlError>
        break;
 8007c48:	e01a      	b.n	8007c80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f043 0202 	orr.w	r2, r3, #2
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f900 	bl	8007e74 <USBD_CtlSendData>
      break;
 8007c74:	e004      	b.n	8007c80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f88a 	bl	8007d92 <USBD_CtlError>
      break;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d107      	bne.n	8007caa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f940 	bl	8007f28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ca8:	e013      	b.n	8007cd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d10b      	bne.n	8007cca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	889b      	ldrh	r3, [r3, #4]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f930 	bl	8007f28 <USBD_CtlSendStatus>
}
 8007cc8:	e003      	b.n	8007cd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f860 	bl	8007d92 <USBD_CtlError>
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d80b      	bhi.n	8007d0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d10c      	bne.n	8007d14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f910 	bl	8007f28 <USBD_CtlSendStatus>
      }
      break;
 8007d08:	e004      	b.n	8007d14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f840 	bl	8007d92 <USBD_CtlError>
      break;
 8007d12:	e000      	b.n	8007d16 <USBD_ClrFeature+0x3c>
      break;
 8007d14:	bf00      	nop
  }
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3301      	adds	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fa41 	bl	80071d0 <SWAPBYTE>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fa34 	bl	80071d0 <SWAPBYTE>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fa27 	bl	80071d0 <SWAPBYTE>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	80da      	strh	r2, [r3, #6]
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fc42 	bl	8008628 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007da4:	2100      	movs	r1, #0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fc3e 	bl	8008628 <USBD_LL_StallEP>
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d036      	beq.n	8007e38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007dce:	6938      	ldr	r0, [r7, #16]
 8007dd0:	f000 f836 	bl	8007e40 <USBD_GetLen>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	4413      	add	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	3301      	adds	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	3301      	adds	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e04:	e013      	b.n	8007e2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	7812      	ldrb	r2, [r2, #0]
 8007e10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3301      	adds	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
    idx++;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	4413      	add	r3, r2
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e7      	bne.n	8007e06 <USBD_GetString+0x52>
 8007e36:	e000      	b.n	8007e3a <USBD_GetString+0x86>
    return;
 8007e38:	bf00      	nop
  }
}
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e50:	e005      	b.n	8007e5e <USBD_GetLen+0x1e>
  {
    len++;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	3301      	adds	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f5      	bne.n	8007e52 <USBD_GetLen+0x12>
  }

  return len;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fc4d 	bl	800873a <USBD_LL_Transmit>

  return USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fc3c 	bl	800873a <USBD_LL_Transmit>

  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2203      	movs	r2, #3
 8007edc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fc40 	bl	800877c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	2100      	movs	r1, #0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fc2f 	bl	800877c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2204      	movs	r2, #4
 8007f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fbfb 	bl	800873a <USBD_LL_Transmit>

  return USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2205      	movs	r2, #5
 8007f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2200      	movs	r2, #0
 8007f62:	2100      	movs	r1, #0
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fc09 	bl	800877c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4912      	ldr	r1, [pc, #72]	; (8007fc4 <MX_USB_DEVICE_Init+0x50>)
 8007f7c:	4812      	ldr	r0, [pc, #72]	; (8007fc8 <MX_USB_DEVICE_Init+0x54>)
 8007f7e:	f7fe fd07 	bl	8006990 <USBD_Init>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f88:	f7f8 fd9a 	bl	8000ac0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007f8c:	490f      	ldr	r1, [pc, #60]	; (8007fcc <MX_USB_DEVICE_Init+0x58>)
 8007f8e:	480e      	ldr	r0, [pc, #56]	; (8007fc8 <MX_USB_DEVICE_Init+0x54>)
 8007f90:	f7fe fd2e 	bl	80069f0 <USBD_RegisterClass>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f9a:	f7f8 fd91 	bl	8000ac0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007f9e:	490c      	ldr	r1, [pc, #48]	; (8007fd0 <MX_USB_DEVICE_Init+0x5c>)
 8007fa0:	4809      	ldr	r0, [pc, #36]	; (8007fc8 <MX_USB_DEVICE_Init+0x54>)
 8007fa2:	f7fe fcdb 	bl	800695c <USBD_CUSTOM_HID_RegisterInterface>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fac:	f7f8 fd88 	bl	8000ac0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fb0:	4805      	ldr	r0, [pc, #20]	; (8007fc8 <MX_USB_DEVICE_Init+0x54>)
 8007fb2:	f7fe fd53 	bl	8006a5c <USBD_Start>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fbc:	f7f8 fd80 	bl	8000ac0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fc0:	bf00      	nop
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	200000c8 	.word	0x200000c8
 8007fc8:	20000530 	.word	0x20000530
 8007fcc:	20000018 	.word	0x20000018
 8007fd0:	200000b8 	.word	0x200000b8

08007fd4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007fe8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	71fb      	strb	r3, [r7, #7]
 8008000:	4613      	mov	r3, r2
 8008002:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8008006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800a:	60fb      	str	r3, [r7, #12]

	AddUsbRxBuffer(hhid->Report_buf);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4618      	mov	r0, r3
 8008010:	f7f9 f9a6 	bl	8001360 <AddUsbRxBuffer>
  return (USBD_OK);
 8008014:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000530 	.word	0x20000530

08008024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2212      	movs	r2, #18
 8008034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008036:	4b03      	ldr	r3, [pc, #12]	; (8008044 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	200000e4 	.word	0x200000e4

08008048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2204      	movs	r2, #4
 8008058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	200000f8 	.word	0x200000f8

0800806c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d105      	bne.n	800808a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4907      	ldr	r1, [pc, #28]	; (80080a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008082:	4808      	ldr	r0, [pc, #32]	; (80080a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008084:	f7ff fe96 	bl	8007db4 <USBD_GetString>
 8008088:	e004      	b.n	8008094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4904      	ldr	r1, [pc, #16]	; (80080a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800808e:	4805      	ldr	r0, [pc, #20]	; (80080a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008090:	f7ff fe90 	bl	8007db4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	2000080c 	.word	0x2000080c
 80080a4:	080088f4 	.word	0x080088f4

080080a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	4904      	ldr	r1, [pc, #16]	; (80080c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080b8:	4804      	ldr	r0, [pc, #16]	; (80080cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080ba:	f7ff fe7b 	bl	8007db4 <USBD_GetString>
  return USBD_StrDesc;
 80080be:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	2000080c 	.word	0x2000080c
 80080cc:	08008914 	.word	0x08008914

080080d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	221a      	movs	r2, #26
 80080e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080e2:	f000 f843 	bl	800816c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080e6:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	200000fc 	.word	0x200000fc

080080f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4907      	ldr	r1, [pc, #28]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800810a:	4808      	ldr	r0, [pc, #32]	; (800812c <USBD_FS_ConfigStrDescriptor+0x38>)
 800810c:	f7ff fe52 	bl	8007db4 <USBD_GetString>
 8008110:	e004      	b.n	800811c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4904      	ldr	r1, [pc, #16]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008116:	4805      	ldr	r0, [pc, #20]	; (800812c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008118:	f7ff fe4c 	bl	8007db4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	2000080c 	.word	0x2000080c
 800812c:	08008928 	.word	0x08008928

08008130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	4907      	ldr	r1, [pc, #28]	; (8008164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008146:	4808      	ldr	r0, [pc, #32]	; (8008168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008148:	f7ff fe34 	bl	8007db4 <USBD_GetString>
 800814c:	e004      	b.n	8008158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4904      	ldr	r1, [pc, #16]	; (8008164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008152:	4805      	ldr	r0, [pc, #20]	; (8008168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008154:	f7ff fe2e 	bl	8007db4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	2000080c 	.word	0x2000080c
 8008168:	0800893c 	.word	0x0800893c

0800816c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008172:	4b0f      	ldr	r3, [pc, #60]	; (80081b0 <Get_SerialNum+0x44>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008178:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <Get_SerialNum+0x48>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800817e:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <Get_SerialNum+0x4c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4413      	add	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008192:	2208      	movs	r2, #8
 8008194:	4909      	ldr	r1, [pc, #36]	; (80081bc <Get_SerialNum+0x50>)
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f814 	bl	80081c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800819c:	2204      	movs	r2, #4
 800819e:	4908      	ldr	r1, [pc, #32]	; (80081c0 <Get_SerialNum+0x54>)
 80081a0:	68b8      	ldr	r0, [r7, #8]
 80081a2:	f000 f80f 	bl	80081c4 <IntToUnicode>
  }
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	1fff7a10 	.word	0x1fff7a10
 80081b4:	1fff7a14 	.word	0x1fff7a14
 80081b8:	1fff7a18 	.word	0x1fff7a18
 80081bc:	200000fe 	.word	0x200000fe
 80081c0:	2000010e 	.word	0x2000010e

080081c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]
 80081da:	e027      	b.n	800822c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	0f1b      	lsrs	r3, r3, #28
 80081e0:	2b09      	cmp	r3, #9
 80081e2:	d80b      	bhi.n	80081fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0f1b      	lsrs	r3, r3, #28
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4619      	mov	r1, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	440b      	add	r3, r1
 80081f4:	3230      	adds	r2, #48	; 0x30
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	e00a      	b.n	8008212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	0f1b      	lsrs	r3, r3, #28
 8008200:	b2da      	uxtb	r2, r3
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	4619      	mov	r1, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	440b      	add	r3, r1
 800820c:	3237      	adds	r2, #55	; 0x37
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	3301      	adds	r3, #1
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	4413      	add	r3, r2
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	3301      	adds	r3, #1
 800822a:	75fb      	strb	r3, [r7, #23]
 800822c:	7dfa      	ldrb	r2, [r7, #23]
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d3d3      	bcc.n	80081dc <IntToUnicode+0x18>
  }
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008264:	d13a      	bne.n	80082dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 8008270:	f043 0301 	orr.w	r3, r3, #1
 8008274:	6313      	str	r3, [r2, #48]	; 0x30
 8008276:	4b1b      	ldr	r3, [pc, #108]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008282:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008288:	2302      	movs	r3, #2
 800828a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008290:	2303      	movs	r3, #3
 8008292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008294:	230a      	movs	r3, #10
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4619      	mov	r1, r3
 800829e:	4812      	ldr	r0, [pc, #72]	; (80082e8 <HAL_PCD_MspInit+0xa4>)
 80082a0:	f7fa f9f8 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	6353      	str	r3, [r2, #52]	; 0x34
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	4a0a      	ldr	r2, [pc, #40]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082be:	6453      	str	r3, [r2, #68]	; 0x44
 80082c0:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082cc:	2200      	movs	r2, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	2043      	movs	r0, #67	; 0x43
 80082d2:	f7fa f99a 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082d6:	2043      	movs	r0, #67	; 0x43
 80082d8:	f7fa f9b3 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082dc:	bf00      	nop
 80082de:	3728      	adds	r7, #40	; 0x28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	40020000 	.word	0x40020000

080082ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7fe fbf7 	bl	8006af6 <USBD_LL_SetupStage>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	4619      	mov	r1, r3
 800833a:	f7fe fc31 	bl	8006ba0 <USBD_LL_DataOutStage>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008358:	78fa      	ldrb	r2, [r7, #3]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	334c      	adds	r3, #76	; 0x4c
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	4619      	mov	r1, r3
 800836e:	f7fe fcca 	bl	8006d06 <USBD_LL_DataInStage>
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fdfe 	bl	8006f8a <USBD_LL_SOF>
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
 80083ae:	e008      	b.n	80083c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d102      	bne.n	80083be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	e001      	b.n	80083c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083be:	f7f8 fb7f 	bl	8000ac0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fd9e 	bl	8006f0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fd46 	bl	8006e6a <USBD_LL_Reset>
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fd99 	bl	8006f2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <HAL_PCD_SuspendCallback+0x48>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	4a03      	ldr	r2, [pc, #12]	; (8008430 <HAL_PCD_SuspendCallback+0x48>)
 8008422:	f043 0306 	orr.w	r3, r3, #6
 8008426:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	e000ed00 	.word	0xe000ed00

08008434 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fd89 	bl	8006f5a <USBD_LL_Resume>
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	4611      	mov	r1, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fde1 	bl	800702e <USBD_LL_IsoOUTIncomplete>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fd9d 	bl	8006fca <USBD_LL_IsoINIncomplete>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fdf3 	bl	8007092 <USBD_LL_DevConnected>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fdf0 	bl	80070a8 <USBD_LL_DevDisconnected>
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d13c      	bne.n	800855a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <USBD_LL_Init+0x94>)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a1e      	ldr	r2, [pc, #120]	; (8008564 <USBD_LL_Init+0x94>)
 80084ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084f0:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <USBD_LL_Init+0x94>)
 80084f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <USBD_LL_Init+0x94>)
 80084fa:	2204      	movs	r2, #4
 80084fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084fe:	4b19      	ldr	r3, [pc, #100]	; (8008564 <USBD_LL_Init+0x94>)
 8008500:	2202      	movs	r2, #2
 8008502:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008504:	4b17      	ldr	r3, [pc, #92]	; (8008564 <USBD_LL_Init+0x94>)
 8008506:	2200      	movs	r2, #0
 8008508:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800850a:	4b16      	ldr	r3, [pc, #88]	; (8008564 <USBD_LL_Init+0x94>)
 800850c:	2202      	movs	r2, #2
 800850e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008510:	4b14      	ldr	r3, [pc, #80]	; (8008564 <USBD_LL_Init+0x94>)
 8008512:	2200      	movs	r2, #0
 8008514:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <USBD_LL_Init+0x94>)
 8008518:	2200      	movs	r2, #0
 800851a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <USBD_LL_Init+0x94>)
 800851e:	2200      	movs	r2, #0
 8008520:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008522:	4b10      	ldr	r3, [pc, #64]	; (8008564 <USBD_LL_Init+0x94>)
 8008524:	2200      	movs	r2, #0
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008528:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <USBD_LL_Init+0x94>)
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800852e:	480d      	ldr	r0, [pc, #52]	; (8008564 <USBD_LL_Init+0x94>)
 8008530:	f7fa fb61 	bl	8002bf6 <HAL_PCD_Init>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800853a:	f7f8 fac1 	bl	8000ac0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800853e:	2180      	movs	r1, #128	; 0x80
 8008540:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_LL_Init+0x94>)
 8008542:	f7fb fda0 	bl	8004086 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008546:	2240      	movs	r2, #64	; 0x40
 8008548:	2100      	movs	r1, #0
 800854a:	4806      	ldr	r0, [pc, #24]	; (8008564 <USBD_LL_Init+0x94>)
 800854c:	f7fb fd54 	bl	8003ff8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008550:	2280      	movs	r2, #128	; 0x80
 8008552:	2101      	movs	r1, #1
 8008554:	4803      	ldr	r0, [pc, #12]	; (8008564 <USBD_LL_Init+0x94>)
 8008556:	f7fb fd4f 	bl	8003ff8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000a0c 	.word	0x20000a0c

08008568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800857e:	4618      	mov	r0, r3
 8008580:	f7fa fc56 	bl	8002e30 <HAL_PCD_Start>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f930 	bl	80087f0 <USBD_Get_USB_Status>
 8008590:	4603      	mov	r3, r0
 8008592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	461a      	mov	r2, r3
 80085ac:	4603      	mov	r3, r0
 80085ae:	70fb      	strb	r3, [r7, #3]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70bb      	strb	r3, [r7, #2]
 80085b4:	4613      	mov	r3, r2
 80085b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085c6:	78bb      	ldrb	r3, [r7, #2]
 80085c8:	883a      	ldrh	r2, [r7, #0]
 80085ca:	78f9      	ldrb	r1, [r7, #3]
 80085cc:	f7fb f927 	bl	800381e <HAL_PCD_EP_Open>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f90a 	bl	80087f0 <USBD_Get_USB_Status>
 80085dc:	4603      	mov	r3, r0
 80085de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7fb f970 	bl	80038ee <HAL_PCD_EP_Close>
 800860e:	4603      	mov	r3, r0
 8008610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f8eb 	bl	80087f0 <USBD_Get_USB_Status>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7fb fa30 	bl	8003aac <HAL_PCD_EP_SetStall>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f8cc 	bl	80087f0 <USBD_Get_USB_Status>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865c:	7bbb      	ldrb	r3, [r7, #14]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	460b      	mov	r3, r1
 8008670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008680:	78fa      	ldrb	r2, [r7, #3]
 8008682:	4611      	mov	r1, r2
 8008684:	4618      	mov	r0, r3
 8008686:	f7fb fa75 	bl	8003b74 <HAL_PCD_EP_ClrStall>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f8ad 	bl	80087f0 <USBD_Get_USB_Status>
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869a:	7bbb      	ldrb	r3, [r7, #14]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	da0b      	bge.n	80086d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086c6:	68f9      	ldr	r1, [r7, #12]
 80086c8:	4613      	mov	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	333e      	adds	r3, #62	; 0x3e
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	e00b      	b.n	80086f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80086ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7fb f85a 	bl	80037d4 <HAL_PCD_SetAddress>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 f862 	bl	80087f0 <USBD_Get_USB_Status>
 800872c:	4603      	mov	r3, r0
 800872e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008730:	7bbb      	ldrb	r3, [r7, #14]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
 8008746:	460b      	mov	r3, r1
 8008748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008758:	7af9      	ldrb	r1, [r7, #11]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	f7fb f95b 	bl	8003a18 <HAL_PCD_EP_Transmit>
 8008762:	4603      	mov	r3, r0
 8008764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 f841 	bl	80087f0 <USBD_Get_USB_Status>
 800876e:	4603      	mov	r3, r0
 8008770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008772:	7dbb      	ldrb	r3, [r7, #22]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	460b      	mov	r3, r1
 800878a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800879a:	7af9      	ldrb	r1, [r7, #11]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	f7fb f8ef 	bl	8003982 <HAL_PCD_EP_Receive>
 80087a4:	4603      	mov	r3, r0
 80087a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f820 	bl	80087f0 <USBD_Get_USB_Status>
 80087b0:	4603      	mov	r3, r0
 80087b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80087c8:	4b03      	ldr	r3, [pc, #12]	; (80087d8 <USBD_static_malloc+0x18>)
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000f18 	.word	0x20000f18

080087dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]

}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2b03      	cmp	r3, #3
 8008802:	d817      	bhi.n	8008834 <USBD_Get_USB_Status+0x44>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <USBD_Get_USB_Status+0x1c>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	0800881d 	.word	0x0800881d
 8008810:	08008823 	.word	0x08008823
 8008814:	08008829 	.word	0x08008829
 8008818:	0800882f 	.word	0x0800882f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
    break;
 8008820:	e00b      	b.n	800883a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	73fb      	strb	r3, [r7, #15]
    break;
 8008826:	e008      	b.n	800883a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008828:	2301      	movs	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
    break;
 800882c:	e005      	b.n	800883a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	73fb      	strb	r3, [r7, #15]
    break;
 8008832:	e002      	b.n	800883a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008834:	2303      	movs	r3, #3
 8008836:	73fb      	strb	r3, [r7, #15]
    break;
 8008838:	bf00      	nop
  }
  return usb_status;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <__libc_init_array>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	4d0d      	ldr	r5, [pc, #52]	; (8008880 <__libc_init_array+0x38>)
 800884c:	4c0d      	ldr	r4, [pc, #52]	; (8008884 <__libc_init_array+0x3c>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	2600      	movs	r6, #0
 8008854:	42a6      	cmp	r6, r4
 8008856:	d109      	bne.n	800886c <__libc_init_array+0x24>
 8008858:	4d0b      	ldr	r5, [pc, #44]	; (8008888 <__libc_init_array+0x40>)
 800885a:	4c0c      	ldr	r4, [pc, #48]	; (800888c <__libc_init_array+0x44>)
 800885c:	f000 f82e 	bl	80088bc <_init>
 8008860:	1b64      	subs	r4, r4, r5
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	2600      	movs	r6, #0
 8008866:	42a6      	cmp	r6, r4
 8008868:	d105      	bne.n	8008876 <__libc_init_array+0x2e>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008870:	4798      	blx	r3
 8008872:	3601      	adds	r6, #1
 8008874:	e7ee      	b.n	8008854 <__libc_init_array+0xc>
 8008876:	f855 3b04 	ldr.w	r3, [r5], #4
 800887a:	4798      	blx	r3
 800887c:	3601      	adds	r6, #1
 800887e:	e7f2      	b.n	8008866 <__libc_init_array+0x1e>
 8008880:	0800896c 	.word	0x0800896c
 8008884:	0800896c 	.word	0x0800896c
 8008888:	0800896c 	.word	0x0800896c
 800888c:	08008970 	.word	0x08008970

08008890 <memcpy>:
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	f100 33ff 	add.w	r3, r0, #4294967295
 8008898:	d100      	bne.n	800889c <memcpy+0xc>
 800889a:	4770      	bx	lr
 800889c:	b510      	push	{r4, lr}
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a6:	4291      	cmp	r1, r2
 80088a8:	d1f9      	bne.n	800889e <memcpy+0xe>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <memset>:
 80088ac:	4402      	add	r2, r0
 80088ae:	4603      	mov	r3, r0
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d100      	bne.n	80088b6 <memset+0xa>
 80088b4:	4770      	bx	lr
 80088b6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ba:	e7f9      	b.n	80088b0 <memset+0x4>

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
