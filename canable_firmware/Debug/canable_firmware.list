
canable_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cdc  08007cdc  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce4  08007ce4  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08007cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002010c  2**0
                  CONTENTS
 10 .bss          00000be4  2000010c  2000010c  0002010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000cf0  20000cf0  0002010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107cb  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fab  00000000  00000000  00030907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e9e  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b69  00000000  00000000  00058fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a4a  00000000  00000000  0006ab47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131591  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003364  00000000  00000000  001315e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c54 	.word	0x08007c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	08007c54 	.word	0x08007c54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <PollingRoutine>:

/*
 *  Description: The main entry point. Typically in all my projects I call this routine from main all do all my polling here, if i am not using Tasks.
 *
 */
void PollingRoutine(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//PortD_On(LED_Green_Pin);
	// polling is currently done in Tasks
	//ParseUsbRec();
	SendUsbMessage();
 80004d0:	f000 fb06 	bl	8000ae0 <SendUsbMessage>


}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb60 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f83e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8dc 	bl	80006a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004e8:	f000 f8a4 	bl	8000634 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 ff1c 	bl	8007328 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
    pHeader.DLC=1; //give message size of 1 byte
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x7c>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	611a      	str	r2, [r3, #16]
  	pHeader.IDE=CAN_ID_STD; //set identifier to standard
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <main+0x7c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  	pHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <main+0x7c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  	pHeader.StdId=0x244; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <main+0x7c>)
 8000504:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000508:	601a      	str	r2, [r3, #0]

  	//filter one (stack light blink)
  	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x80>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  	sFilterConfig.FilterIdHigh=0x245<<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <main+0x80>)
 8000512:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8000516:	601a      	str	r2, [r3, #0]
  	sFilterConfig.FilterIdLow=0;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <main+0x80>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  	sFilterConfig.FilterMaskIdHigh=0;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <main+0x80>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  	sFilterConfig.FilterMaskIdLow=0;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x80>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <main+0x80>)
 800052c:	2201      	movs	r2, #1
 800052e:	61da      	str	r2, [r3, #28]
  	sFilterConfig.FilterActivation=ENABLE;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <main+0x80>)
 8000532:	2201      	movs	r2, #1
 8000534:	621a      	str	r2, [r3, #32]

  	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig); //configure CAN filter
 8000536:	4908      	ldr	r1, [pc, #32]	; (8000558 <main+0x80>)
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x84>)
 800053a:	f000 fcc3 	bl	8000ec4 <HAL_CAN_ConfigFilter>


  	HAL_CAN_Start(&hcan1); //start CAN
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x84>)
 8000540:	f000 fda0 	bl	8001084 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000544:	2102      	movs	r1, #2
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <main+0x84>)
 8000548:	f000 ffcd 	bl	80014e6 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  PollingRoutine();
 800054c:	f7ff ffbe 	bl	80004cc <PollingRoutine>
  {
 8000550:	e7fc      	b.n	800054c <main+0x74>
 8000552:	bf00      	nop
 8000554:	20000150 	.word	0x20000150
 8000558:	2000018c 	.word	0x2000018c
 800055c:	20000128 	.word	0x20000128

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 fb68 	bl	8007c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005de:	2307      	movs	r3, #7
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 ff44 	bl	8003474 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 f8cd 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f9a5 	bl	8003964 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000620:	f000 f8b6 	bl	8000790 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_CAN1_Init+0x64>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_CAN1_Init+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_CAN1_Init+0x64>)
 8000640:	2215      	movs	r2, #21
 8000642:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_CAN1_Init+0x64>)
 8000652:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000656:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_CAN1_Init+0x64>)
 800065a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800065e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CAN1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CAN1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CAN1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CAN1_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CAN1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CAN1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CAN1_Init+0x64>)
 8000686:	f000 fb21 	bl	8000ccc <HAL_CAN_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000690:	f000 f87e 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000128 	.word	0x20000128
 800069c:	40006400 	.word	0x40006400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a31      	ldr	r2, [pc, #196]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led_Green_Pin|GPIO_PIN_13|GPIO_PIN_14|Led_Blue_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0xe8>)
 800072e:	f001 fbff 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0xec>)
 8000748:	f001 fa3e 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Green_Pin PD13 PD14 Led_Blue_Pin */
  GPIO_InitStruct.Pin = Led_Green_Pin|GPIO_PIN_13|GPIO_PIN_14|Led_Blue_Pin;
 800074c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000766:	f001 fa2f 	bl	8001bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2100      	movs	r1, #0
 800076e:	2006      	movs	r0, #6
 8000770:	f001 f9f3 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000774:	2006      	movs	r0, #6
 8000776:	f001 fa0c 	bl	8001b92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007da:	2007      	movs	r0, #7
 80007dc:	f001 f9b2 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_CAN_MspInit+0x94>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d133      	bne.n	8000876 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <HAL_CAN_MspInit+0x98>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <HAL_CAN_MspInit+0x98>)
 8000818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_CAN_MspInit+0x98>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_CAN_MspInit+0x98>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <HAL_CAN_MspInit+0x98>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_CAN_MspInit+0x98>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000846:	2303      	movs	r3, #3
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000856:	2309      	movs	r3, #9
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <HAL_CAN_MspInit+0x9c>)
 8000862:	f001 f9b1 	bl	8001bc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000866:	2202      	movs	r2, #2
 8000868:	2100      	movs	r1, #0
 800086a:	2014      	movs	r0, #20
 800086c:	f001 f975 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000870:	2014      	movs	r0, #20
 8000872:	f001 f98e 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40006400 	.word	0x40006400
 8000884:	40023800 	.word	0x40023800
 8000888:	40020c00 	.word	0x40020c00

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f9b4 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	for (int n=0;n<1000000;n++); //this loop is used to make a software delay, remove optimization for this to work
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e002      	b.n	80008f2 <EXTI0_IRQHandler+0x12>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <EXTI0_IRQHandler+0x50>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	ddf8      	ble.n	80008ec <EXTI0_IRQHandler+0xc>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) //check to ensure pin is pressed
 80008fa:	2101      	movs	r1, #1
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <EXTI0_IRQHandler+0x54>)
 80008fe:	f001 faff 	bl	8001f00 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00b      	beq.n	8000920 <EXTI0_IRQHandler+0x40>
		{
			a++; //increment a
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <EXTI0_IRQHandler+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <EXTI0_IRQHandler+0x58>)
 8000912:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);  //function to add message for transmition
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <EXTI0_IRQHandler+0x5c>)
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <EXTI0_IRQHandler+0x58>)
 8000918:	4909      	ldr	r1, [pc, #36]	; (8000940 <EXTI0_IRQHandler+0x60>)
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <EXTI0_IRQHandler+0x64>)
 800091c:	f000 fbf6 	bl	800110c <HAL_CAN_AddTxMessage>
		}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000920:	2001      	movs	r0, #1
 8000922:	f001 fb1f 	bl	8001f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	000f423f 	.word	0x000f423f
 8000934:	40020000 	.word	0x40020000
 8000938:	20000188 	.word	0x20000188
 800093c:	20000184 	.word	0x20000184
 8000940:	20000150 	.word	0x20000150
 8000944:	20000128 	.word	0x20000128

08000948 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <CAN1_RX0_IRQHandler+0x24>)
 800094e:	f000 fdf0 	bl	8001532 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
   HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <CAN1_RX0_IRQHandler+0x28>)
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <CAN1_RX0_IRQHandler+0x2c>)
 8000956:	2100      	movs	r1, #0
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <CAN1_RX0_IRQHandler+0x24>)
 800095a:	f000 fcb2 	bl	80012c2 <HAL_CAN_GetRxMessage>
    GPIOD->ODR=r<<12; //use output data register to turn on LED
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <CAN1_RX0_IRQHandler+0x28>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	031a      	lsls	r2, r3, #12
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <CAN1_RX0_IRQHandler+0x30>)
 8000966:	615a      	str	r2, [r3, #20]
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000128 	.word	0x20000128
 8000970:	20000189 	.word	0x20000189
 8000974:	20000168 	.word	0x20000168
 8000978:	40020c00 	.word	0x40020c00

0800097c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <OTG_FS_IRQHandler+0x10>)
 8000982:	f001 fc62 	bl	800224a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200007b8 	.word	0x200007b8

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009de:	f7ff ffd7 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f007 f90b 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fd77 	bl	80004d8 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80009f8:	08007cec 	.word	0x08007cec
  ldr r2, =_sbss
 80009fc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000a00:	20000cf0 	.word	0x20000cf0

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>

08000a06 <DRV_RingBuffPtr__Input>:

	ptr->iCnt_Handle = 0;
	ptr->iCnt_OverFlow = 0;
}

void DRV_RingBuffPtr__Input(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
	ptr->iIndexIN++;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	801a      	strh	r2, [r3, #0]
	if (ptr->iIndexIN >= iBufferSize)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d802      	bhi.n	8000a2e <DRV_RingBuffPtr__Input+0x28>
		ptr->iIndexIN = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	801a      	strh	r2, [r3, #0]

	ptr->iCnt_Handle++;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	809a      	strh	r2, [r3, #4]
	if (ptr->iIndexIN == ptr->iIndexOUT) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	885b      	ldrh	r3, [r3, #2]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d122      	bne.n	8000a8c <DRV_RingBuffPtr__Input+0x86>
		ptr->iCnt_OverFlow++;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	88db      	ldrh	r3, [r3, #6]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	80da      	strh	r2, [r3, #6]
		if (ptr->iCnt_OverFlow > 50000)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	88db      	ldrh	r3, [r3, #6]
 8000a56:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d902      	bls.n	8000a64 <DRV_RingBuffPtr__Input+0x5e>
			ptr->iCnt_OverFlow = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	80da      	strh	r2, [r3, #6]
		if (ptr->iIndexIN == 0) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d106      	bne.n	8000a7a <DRV_RingBuffPtr__Input+0x74>
			ptr->iIndexOUT = iBufferSize - 1;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	3b01      	subs	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	805a      	strh	r2, [r3, #2]
 8000a78:	e005      	b.n	8000a86 <DRV_RingBuffPtr__Input+0x80>
		} else {
			ptr->iIndexOUT = ptr->iIndexIN - 1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	805a      	strh	r2, [r3, #2]
		}
		ptr->iCnt_Handle = 1;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	809a      	strh	r2, [r3, #4]
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DRV_RingBuffPtr__Output>:

void DRV_RingBuffPtr__Output(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	if (ptr->iCnt_Handle) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	889b      	ldrh	r3, [r3, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d014      	beq.n	8000ad4 <DRV_RingBuffPtr__Output+0x3c>
		ptr->iIndexOUT++;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	885b      	ldrh	r3, [r3, #2]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	805a      	strh	r2, [r3, #2]
		if (ptr->iIndexOUT >= iBufferSize)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	885b      	ldrh	r3, [r3, #2]
 8000aba:	461a      	mov	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d802      	bhi.n	8000ac8 <DRV_RingBuffPtr__Output+0x30>
			ptr->iIndexOUT = 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	805a      	strh	r2, [r3, #2]
		ptr->iCnt_Handle--;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	889b      	ldrh	r3, [r3, #4]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	809a      	strh	r2, [r3, #4]
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SendUsbMessage>:
RING_BUFF_INFO usbRxRingBuffPtr;

extern USBD_HandleTypeDef hUsbDeviceFS;

// poll this to check if usb data is available to send
int SendUsbMessage(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	uint8_t USB_Status;
	if(usbTxRingBuffPtr.iCnt_Handle) { // send available message
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <SendUsbMessage+0x48>)
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d015      	beq.n	8000b1a <SendUsbMessage+0x3a>
		USB_Status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, usbTxBuffer[usbTxRingBuffPtr.iIndexOUT], USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <SendUsbMessage+0x48>)
 8000af0:	885b      	ldrh	r3, [r3, #2]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4613      	mov	r3, r2
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	4413      	add	r3, r2
 8000afa:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <SendUsbMessage+0x4c>)
 8000afc:	4413      	add	r3, r2
 8000afe:	2211      	movs	r2, #17
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <SendUsbMessage+0x50>)
 8000b04:	f004 ffb4 	bl	8005a70 <USBD_CUSTOM_HID_SendReport>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
		if (USB_Status == USBD_OK) // make sure data was sent before incrementing pointer
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <SendUsbMessage+0x3a>
		{
			DRV_RingBuffPtr__Output(&usbTxRingBuffPtr, USB_MAX_RING_BUFF); // increment output buffer ptr
 8000b12:	2108      	movs	r1, #8
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <SendUsbMessage+0x48>)
 8000b16:	f7ff ffbf 	bl	8000a98 <DRV_RingBuffPtr__Output>
		}
	}
	return usbTxRingBuffPtr.iCnt_Handle; // if no more message to handle then 0 will be returned
 8000b1a:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <SendUsbMessage+0x48>)
 8000b1c:	889b      	ldrh	r3, [r3, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000023c 	.word	0x2000023c
 8000b2c:	200001b4 	.word	0x200001b4
 8000b30:	200002dc 	.word	0x200002dc

08000b34 <AddUsbRxBuffer>:
	}
	DRV_RingBuffPtr__Input(&usbTxRingBuffPtr, USB_MAX_RING_BUFF);
}

// add data to USB Rx buffer
void AddUsbRxBuffer(uint8_t *data) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	memset(&usbRxBuffer[usbRxRingBuffPtr.iIndexIN], 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <AddUsbRxBuffer+0x64>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4613      	mov	r3, r2
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4413      	add	r3, r2
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <AddUsbRxBuffer+0x68>)
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2211      	movs	r2, #17
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f007 f877 	bl	8007c44 <memset>
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e012      	b.n	8000b82 <AddUsbRxBuffer+0x4e>
		usbRxBuffer[usbRxRingBuffPtr.iIndexIN][i] = data[i];
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <AddUsbRxBuffer+0x64>)
 8000b64:	8812      	ldrh	r2, [r2, #0]
 8000b66:	4611      	mov	r1, r2
 8000b68:	7818      	ldrb	r0, [r3, #0]
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <AddUsbRxBuffer+0x68>)
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	440b      	add	r3, r1
 8000b72:	441a      	add	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	4602      	mov	r2, r0
 8000b7a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2b10      	cmp	r3, #16
 8000b86:	d9e9      	bls.n	8000b5c <AddUsbRxBuffer+0x28>
	}
	DRV_RingBuffPtr__Input(&usbRxRingBuffPtr, USB_MAX_RING_BUFF);
 8000b88:	2108      	movs	r1, #8
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <AddUsbRxBuffer+0x64>)
 8000b8c:	f7ff ff3b 	bl	8000a06 <DRV_RingBuffPtr__Input>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002cc 	.word	0x200002cc
 8000b9c:	20000244 	.word	0x20000244

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 ffbb 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fde2 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 ffd3 	bl	8001bae <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 ff9b 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200002d4 	.word	0x200002d4

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200002d4 	.word	0x200002d4

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e0ed      	b.n	8000eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fd7e 	bl	80007ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d00:	f7ff ffb4 	bl	8000c6c <HAL_GetTick>
 8000d04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d06:	e012      	b.n	8000d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d08:	f7ff ffb0 	bl	8000c6c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b0a      	cmp	r3, #10
 8000d14:	d90b      	bls.n	8000d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2205      	movs	r2, #5
 8000d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0c5      	b.n	8000eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0e5      	beq.n	8000d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0202 	bic.w	r2, r2, #2
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d4c:	f7ff ff8e 	bl	8000c6c <HAL_GetTick>
 8000d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d52:	e012      	b.n	8000d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d54:	f7ff ff8a 	bl	8000c6c <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b0a      	cmp	r3, #10
 8000d60:	d90b      	bls.n	8000d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2205      	movs	r2, #5
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e09f      	b.n	8000eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e5      	bne.n	8000d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7e1b      	ldrb	r3, [r3, #24]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d108      	bne.n	8000da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e007      	b.n	8000db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7e5b      	ldrb	r3, [r3, #25]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d108      	bne.n	8000dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e9b      	ldrb	r3, [r3, #26]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0220 	orr.w	r2, r2, #32
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e007      	b.n	8000e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0220 	bic.w	r2, r2, #32
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7edb      	ldrb	r3, [r3, #27]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0210 	bic.w	r2, r2, #16
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e007      	b.n	8000e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0210 	orr.w	r2, r2, #16
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7f1b      	ldrb	r3, [r3, #28]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0208 	orr.w	r2, r2, #8
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0208 	bic.w	r2, r2, #8
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7f5b      	ldrb	r3, [r3, #29]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0204 	orr.w	r2, r2, #4
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0204 	bic.w	r2, r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	ea42 0103 	orr.w	r1, r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000edc:	7cfb      	ldrb	r3, [r7, #19]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d003      	beq.n	8000eea <HAL_CAN_ConfigFilter+0x26>
 8000ee2:	7cfb      	ldrb	r3, [r7, #19]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	f040 80be 	bne.w	8001066 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000eea:	4b65      	ldr	r3, [pc, #404]	; (8001080 <HAL_CAN_ConfigFilter+0x1bc>)
 8000eec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d123      	bne.n	8000f94 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3248      	adds	r2, #72	; 0x48
 8000f74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8a:	6979      	ldr	r1, [r7, #20]
 8000f8c:	3348      	adds	r3, #72	; 0x48
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d122      	bne.n	8000fe2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3248      	adds	r2, #72	; 0x48
 8000fc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd8:	6979      	ldr	r1, [r7, #20]
 8000fda:	3348      	adds	r3, #72	; 0x48
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d109      	bne.n	8000ffe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ffc:	e007      	b.n	800100e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	431a      	orrs	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001028:	e007      	b.n	800103a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	431a      	orrs	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001058:	f023 0201 	bic.w	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e006      	b.n	8001074 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40006400 	.word	0x40006400

08001084 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d12e      	bne.n	80010f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b0:	f7ff fddc 	bl	8000c6c <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b6:	e012      	b.n	80010de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b8:	f7ff fdd8 	bl	8000c6c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d90b      	bls.n	80010de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e012      	b.n	8001104 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e5      	bne.n	80010b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e006      	b.n	8001104 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
  }
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001120:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d003      	beq.n	8001138 <HAL_CAN_AddTxMessage+0x2c>
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	2b02      	cmp	r3, #2
 8001134:	f040 80b8 	bne.w	80012a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10a      	bne.n	8001158 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80a0 	beq.w	8001298 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	0e1b      	lsrs	r3, r3, #24
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d907      	bls.n	8001178 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e09e      	b.n	80012b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	409a      	lsls	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	6809      	ldr	r1, [r1, #0]
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3318      	adds	r3, #24
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	440b      	add	r3, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e00f      	b.n	80011c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3318      	adds	r3, #24
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	440b      	add	r3, r1
 80011c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6819      	ldr	r1, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3318      	adds	r3, #24
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	440b      	add	r3, r1
 80011d6:	3304      	adds	r3, #4
 80011d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	7d1b      	ldrb	r3, [r3, #20]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d111      	bne.n	8001206 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3318      	adds	r3, #24
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	3304      	adds	r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	6811      	ldr	r1, [r2, #0]
 80011f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3318      	adds	r3, #24
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3307      	adds	r3, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	061a      	lsls	r2, r3, #24
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3306      	adds	r3, #6
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	041b      	lsls	r3, r3, #16
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3305      	adds	r3, #5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4313      	orrs	r3, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3204      	adds	r2, #4
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	4610      	mov	r0, r2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	ea43 0200 	orr.w	r2, r3, r0
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800123c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3303      	adds	r3, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	061a      	lsls	r2, r3, #24
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3302      	adds	r3, #2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	4313      	orrs	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	4610      	mov	r0, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	6811      	ldr	r1, [r2, #0]
 8001264:	ea43 0200 	orr.w	r2, r3, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	440b      	add	r3, r1
 800126e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001272:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3318      	adds	r3, #24
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	6811      	ldr	r1, [r2, #0]
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3318      	adds	r3, #24
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	440b      	add	r3, r1
 8001292:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	e00e      	b.n	80012b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e006      	b.n	80012b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
  }
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d003      	beq.n	80012e6 <HAL_CAN_GetRxMessage+0x24>
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	f040 80f3 	bne.w	80014cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10e      	bne.n	800130a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e0e7      	b.n	80014da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d107      	bne.n	8001328 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d8      	b.n	80014da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	331b      	adds	r3, #27
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0204 	and.w	r2, r3, #4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	331b      	adds	r3, #27
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0d5b      	lsrs	r3, r3, #21
 8001356:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00b      	b.n	8001378 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	331b      	adds	r3, #27
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	331b      	adds	r3, #27
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0202 	and.w	r2, r3, #2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	331b      	adds	r3, #27
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 020f 	and.w	r2, r3, #15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	331b      	adds	r3, #27
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	331b      	adds	r3, #27
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	4413      	add	r3, r2
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0a1a      	lsrs	r2, r3, #8
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0c1a      	lsrs	r2, r3, #16
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3302      	adds	r3, #2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0e1a      	lsrs	r2, r3, #24
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3303      	adds	r3, #3
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3304      	adds	r3, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0a1a      	lsrs	r2, r3, #8
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3305      	adds	r3, #5
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0c1a      	lsrs	r2, r3, #16
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3306      	adds	r3, #6
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0e1a      	lsrs	r2, r3, #24
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	3307      	adds	r3, #7
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	e007      	b.n	80014c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0220 	orr.w	r2, r2, #32
 80014c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e006      	b.n	80014da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
  }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d002      	beq.n	8001504 <HAL_CAN_ActivateNotification+0x1e>
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d109      	bne.n	8001518 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6959      	ldr	r1, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	e006      	b.n	8001526 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b08a      	sub	sp, #40	; 0x28
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d07c      	beq.n	8001672 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d023      	beq.n	80015ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f983 	bl	80018a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800159a:	e016      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e00c      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e002      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f989 	bl	80018dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d024      	beq.n	800161e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f963 	bl	80018b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80015ee:	e016      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	e00c      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e002      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f969 	bl	80018f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d024      	beq.n	8001672 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001630:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f943 	bl	80018c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001642:	e016      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e00c      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	e002      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f949 	bl	8001904 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2210      	movs	r2, #16
 8001694:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f93a 	bl	800192c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f921 	bl	8001918 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00c      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2210      	movs	r2, #16
 80016f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2208      	movs	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f91c 	bl	8001954 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f903 	bl	8001940 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f906 	bl	8001968 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f8ff 	bl	800197c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d07b      	beq.n	8001880 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d072      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d03e      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001800:	2b60      	cmp	r3, #96	; 0x60
 8001802:	d02b      	beq.n	800185c <HAL_CAN_IRQHandler+0x32a>
 8001804:	2b60      	cmp	r3, #96	; 0x60
 8001806:	d82e      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001808:	2b50      	cmp	r3, #80	; 0x50
 800180a:	d022      	beq.n	8001852 <HAL_CAN_IRQHandler+0x320>
 800180c:	2b50      	cmp	r3, #80	; 0x50
 800180e:	d82a      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001810:	2b40      	cmp	r3, #64	; 0x40
 8001812:	d019      	beq.n	8001848 <HAL_CAN_IRQHandler+0x316>
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d826      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001818:	2b30      	cmp	r3, #48	; 0x30
 800181a:	d010      	beq.n	800183e <HAL_CAN_IRQHandler+0x30c>
 800181c:	2b30      	cmp	r3, #48	; 0x30
 800181e:	d822      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001820:	2b10      	cmp	r3, #16
 8001822:	d002      	beq.n	800182a <HAL_CAN_IRQHandler+0x2f8>
 8001824:	2b20      	cmp	r3, #32
 8001826:	d005      	beq.n	8001834 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001828:	e01d      	b.n	8001866 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001832:	e019      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800183c:	e014      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001846:	e00f      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001850:	e00a      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800185a:	e005      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001864:	e000      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            break;
 8001866:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001876:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2204      	movs	r2, #4
 800187e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f87c 	bl	8001990 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff3e 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff31 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e16b      	b.n	8001ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 815a 	bne.w	8001eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80b4 	beq.w	8001eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a5f      	ldr	r2, [pc, #380]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d025      	beq.n	8001dea <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a50      	ldr	r2, [pc, #320]	; (8001ee4 <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x216>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4d      	ldr	r2, [pc, #308]	; (8001ef0 <HAL_GPIO_Init+0x328>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x212>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x20e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_GPIO_Init+0x330>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x20a>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e00e      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dee:	2300      	movs	r3, #0
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e00:	4935      	ldr	r1, [pc, #212]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	f67f ae90 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40021400 	.word	0x40021400
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40021c00 	.word	0x40021c00
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f806 	bl	8001f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fac:	b08f      	sub	sp, #60	; 0x3c
 8001fae:	af0a      	add	r7, sp, #40	; 0x28
 8001fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e10f      	b.n	80021dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f005 fb0e 	bl	80075f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 ffbf 	bl	8003f7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	687e      	ldr	r6, [r7, #4]
 8002008:	466d      	mov	r5, sp
 800200a:	f106 0410 	add.w	r4, r6, #16
 800200e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800201a:	e885 0003 	stmia.w	r5, {r0, r1}
 800201e:	1d33      	adds	r3, r6, #4
 8002020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f001 fe96 	bl	8003d54 <USB_CoreInit>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2202      	movs	r2, #2
 8002032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0d0      	b.n	80021dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f001 ffad 	bl	8003fa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	e04a      	b.n	80020e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	333d      	adds	r3, #61	; 0x3d
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	333c      	adds	r3, #60	; 0x3c
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	b298      	uxth	r0, r3
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3344      	adds	r3, #68	; 0x44
 8002088:	4602      	mov	r2, r0
 800208a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3340      	adds	r3, #64	; 0x40
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3348      	adds	r3, #72	; 0x48
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	334c      	adds	r3, #76	; 0x4c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3354      	adds	r3, #84	; 0x54
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	3301      	adds	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d3af      	bcc.n	800204c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e044      	b.n	800217c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	3301      	adds	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3b5      	bcc.n	80020f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	687e      	ldr	r6, [r7, #4]
 800218e:	466d      	mov	r5, sp
 8002190:	f106 0410 	add.w	r4, r6, #16
 8002194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021a4:	1d33      	adds	r3, r6, #4
 80021a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f001 ff45 	bl	8004038 <USB_DevInit>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e00d      	b.n	80021dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 f894 	bl	8005302 <USB_DevDisconnect>

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_Start+0x1c>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e020      	b.n	8002242 <HAL_PCD_Start+0x5e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	2b01      	cmp	r3, #1
 800220e:	d109      	bne.n	8002224 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002214:	2b01      	cmp	r3, #1
 8002216:	d005      	beq.n	8002224 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fe97 	bl	8003f5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f844 	bl	80052c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b08d      	sub	sp, #52	; 0x34
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 f902 	bl	800546a <USB_GetMode>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 848a 	bne.w	8002b82 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 f866 	bl	8005344 <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8480 	beq.w	8002b80 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f003 f853 	bl	8005344 <USB_ReadInterrupts>
 800229e:	4603      	mov	r3, r0
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d107      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f002 0202 	and.w	r2, r2, #2
 80022b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 f841 	bl	8005344 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d161      	bne.n	8002390 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0210 	bic.w	r2, r2, #16
 80022da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	0c5b      	lsrs	r3, r3, #17
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	2b02      	cmp	r3, #2
 8002306:	d124      	bne.n	8002352 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d035      	beq.n	8002380 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800231e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f002 fe78 	bl	800501c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002338:	441a      	add	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800234a:	441a      	add	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	621a      	str	r2, [r3, #32]
 8002350:	e016      	b.n	8002380 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	0c5b      	lsrs	r3, r3, #17
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	2b06      	cmp	r3, #6
 800235c:	d110      	bne.n	8002380 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002364:	2208      	movs	r2, #8
 8002366:	4619      	mov	r1, r3
 8002368:	6a38      	ldr	r0, [r7, #32]
 800236a:	f002 fe57 	bl	800501c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237a:	441a      	add	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0210 	orr.w	r2, r2, #16
 800238e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f002 ffd5 	bl	8005344 <USB_ReadInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023a4:	f040 80a7 	bne.w	80024f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 ffda 	bl	800536a <USB_ReadDevAllOutEpInterrupt>
 80023b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023b8:	e099      	b.n	80024ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 808e 	beq.w	80024e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 fffe 	bl	80053d2 <USB_ReadDevOutEPInterrupt>
 80023d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00c      	beq.n	80023fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ee:	461a      	mov	r2, r3
 80023f0:	2301      	movs	r3, #1
 80023f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 feaa 	bl	8003150 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	2308      	movs	r3, #8
 8002416:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 ff80 	bl	8003320 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	2310      	movs	r3, #16
 800243a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d030      	beq.n	80024a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d109      	bne.n	8002466 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002464:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	78db      	ldrb	r3, [r3, #3]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d108      	bne.n	8002496 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2200      	movs	r2, #0
 8002488:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4619      	mov	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f005 f9b7 	bl	8007804 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a2:	461a      	mov	r2, r3
 80024a4:	2302      	movs	r3, #2
 80024a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024be:	461a      	mov	r2, r3
 80024c0:	2320      	movs	r3, #32
 80024c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024da:	461a      	mov	r2, r3
 80024dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	3301      	adds	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f af62 	bne.w	80023ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 ff22 	bl	8005344 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800250a:	f040 80db 	bne.w	80026c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f002 ff43 	bl	800539e <USB_ReadDevAllInEpInterrupt>
 8002518:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800251e:	e0cd      	b.n	80026bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80c2 	beq.w	80026b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f002 ff69 	bl	800540e <USB_ReadDevInEPInterrupt>
 800253c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d057      	beq.n	80025f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	2201      	movs	r2, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	69f9      	ldr	r1, [r7, #28]
 8002564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002568:	4013      	ands	r3, r2
 800256a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002578:	461a      	mov	r2, r3
 800257a:	2301      	movs	r3, #1
 800257c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d132      	bne.n	80025ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	334c      	adds	r3, #76	; 0x4c
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4403      	add	r3, r0
 80025a6:	3348      	adds	r3, #72	; 0x48
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4419      	add	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4403      	add	r3, r0
 80025ba:	334c      	adds	r3, #76	; 0x4c
 80025bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d113      	bne.n	80025ec <HAL_PCD_IRQHandler+0x3a2>
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3354      	adds	r3, #84	; 0x54
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e4:	461a      	mov	r2, r3
 80025e6:	2101      	movs	r1, #1
 80025e8:	f002 ff70 	bl	80054cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f005 f881 	bl	80076fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260e:	461a      	mov	r2, r3
 8002610:	2308      	movs	r3, #8
 8002612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262a:	461a      	mov	r2, r3
 800262c:	2310      	movs	r3, #16
 800262e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	461a      	mov	r2, r3
 8002648:	2340      	movs	r3, #64	; 0x40
 800264a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d023      	beq.n	800269e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002658:	6a38      	ldr	r0, [r7, #32]
 800265a:	f001 fe51 	bl	8004300 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	3338      	adds	r3, #56	; 0x38
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	3304      	adds	r3, #4
 8002670:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	78db      	ldrb	r3, [r3, #3]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f005 f8ce 	bl	8007828 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002698:	461a      	mov	r2, r3
 800269a:	2302      	movs	r3, #2
 800269c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fcc3 	bl	8003036 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	3301      	adds	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f47f af2e 	bne.w	8002520 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fe3b 	bl	8005344 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d8:	d122      	bne.n	8002720 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002700:	2100      	movs	r1, #0
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 feaa 	bl	800345c <HAL_PCDEx_LPM_Callback>
 8002708:	e002      	b.n	8002710 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f005 f86c 	bl	80077e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f002 fe0d 	bl	8005344 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002734:	d112      	bne.n	800275c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f005 f828 	bl	800779c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800275a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fdef 	bl	8005344 <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002770:	f040 80b7 	bne.w	80028e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2110      	movs	r1, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fdb6 	bl	8004300 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002798:	e046      	b.n	8002828 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a6:	461a      	mov	r2, r3
 80027a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027be:	0151      	lsls	r1, r2, #5
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	440a      	add	r2, r1
 80027c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	461a      	mov	r2, r3
 80027dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	0151      	lsls	r1, r2, #5
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	440a      	add	r2, r1
 80027f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002812:	0151      	lsls	r1, r2, #5
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	440a      	add	r2, r1
 8002818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800281c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002820:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	3301      	adds	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800282e:	429a      	cmp	r2, r3
 8002830:	d3b3      	bcc.n	800279a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002840:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002844:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f043 030b 	orr.w	r3, r3, #11
 8002862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002874:	f043 030b 	orr.w	r3, r3, #11
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	e015      	b.n	80028a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800288e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002892:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a2:	f043 030b 	orr.w	r3, r3, #11
 80028a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028cc:	461a      	mov	r2, r3
 80028ce:	f002 fdfd 	bl	80054cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fd2c 	bl	8005344 <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	d124      	bne.n	8002942 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fdc2 	bl	8005486 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fd77 	bl	80043fa <USB_GetDevSpeed>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681c      	ldr	r4, [r3, #0]
 8002918:	f001 fa10 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 800291c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4620      	mov	r0, r4
 8002928:	f001 fa76 	bl	8003e18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f004 ff0c 	bl	800774a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002940:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fcfc 	bl	8005344 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d10a      	bne.n	800296c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f004 fee9 	bl	800772e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f002 0208 	and.w	r2, r2, #8
 800296a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fce7 	bl	8005344 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b80      	cmp	r3, #128	; 0x80
 800297e:	d122      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800298c:	2301      	movs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	e014      	b.n	80029bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fb0f 	bl	8002fd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	3301      	adds	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d3e5      	bcc.n	8002992 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fcba 	bl	8005344 <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029da:	d13b      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029dc:	2301      	movs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	e02b      	b.n	8002a3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3340      	adds	r3, #64	; 0x40
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d115      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da12      	bge.n	8002a34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	333f      	adds	r3, #63	; 0x3f
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fad0 	bl	8002fd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	3301      	adds	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3ce      	bcc.n	80029e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fc73 	bl	8005344 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a68:	d155      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e045      	b.n	8002afc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d12e      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da2b      	bge.n	8002af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d121      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af2:	6053      	str	r3, [r2, #4]
            break;
 8002af4:	e007      	b.n	8002b06 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	3301      	adds	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d3b4      	bcc.n	8002a70 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fc12 	bl	8005344 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d10a      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f004 fe8d 	bl	800784c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fbfc 	bl	8005344 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d115      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f004 fe7d 	bl	8007868 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e000      	b.n	8002b82 <HAL_PCD_IRQHandler+0x938>
      return;
 8002b80:	bf00      	nop
    }
  }
}
 8002b82:	3734      	adds	r7, #52	; 0x34
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}

08002b88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_SetAddress+0x1a>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e013      	b.n	8002bca <HAL_PCD_SetAddress+0x42>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fb5a 	bl	8005274 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	70fb      	strb	r3, [r7, #3]
 8002be4:	460b      	mov	r3, r1
 8002be6:	803b      	strh	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da0f      	bge.n	8002c18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 020f 	and.w	r2, r3, #15
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	3338      	adds	r3, #56	; 0x38
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	705a      	strb	r2, [r3, #1]
 8002c16:	e00f      	b.n	8002c38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 020f 	and.w	r2, r3, #15
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c44:	883a      	ldrh	r2, [r7, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	78ba      	ldrb	r2, [r7, #2]
 8002c4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c62:	78bb      	ldrb	r3, [r7, #2]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_PCD_EP_Open+0xaa>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e00e      	b.n	8002c9a <HAL_PCD_EP_Open+0xc8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68f9      	ldr	r1, [r7, #12]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fbda 	bl	8004444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c98:	7afb      	ldrb	r3, [r7, #11]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da0f      	bge.n	8002cd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 020f 	and.w	r2, r3, #15
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	3338      	adds	r3, #56	; 0x38
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	705a      	strb	r2, [r3, #1]
 8002cd4:	e00f      	b.n	8002cf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	3304      	adds	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_EP_Close+0x6e>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e00e      	b.n	8002d2e <HAL_PCD_EP_Close+0x8c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fc18 	bl	8004554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	460b      	mov	r3, r1
 8002d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d92:	7afb      	ldrb	r3, [r7, #11]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	6979      	ldr	r1, [r7, #20]
 8002daa:	f001 fef7 	bl	8004b9c <USB_EP0StartXfer>
 8002dae:	e008      	b.n	8002dc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6979      	ldr	r1, [r7, #20]
 8002dbe:	f001 fca5 	bl	800470c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6979      	ldr	r1, [r7, #20]
 8002e3e:	f001 fead 	bl	8004b9c <USB_EP0StartXfer>
 8002e42:	e008      	b.n	8002e56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6979      	ldr	r1, [r7, #20]
 8002e52:	f001 fc5b 	bl	800470c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d901      	bls.n	8002e7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e050      	b.n	8002f20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da0f      	bge.n	8002ea6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3338      	adds	r3, #56	; 0x38
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	705a      	strb	r2, [r3, #1]
 8002ea4:	e00d      	b.n	8002ec2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_PCD_EP_SetStall+0x82>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e01e      	b.n	8002f20 <HAL_PCD_EP_SetStall+0xc0>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f002 f8eb 	bl	80050cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	b2d9      	uxtb	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f10:	461a      	mov	r2, r3
 8002f12:	f002 fadb 	bl	80054cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d901      	bls.n	8002f46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e042      	b.n	8002fcc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0f      	bge.n	8002f6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	3338      	adds	r3, #56	; 0x38
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	705a      	strb	r2, [r3, #1]
 8002f6c:	e00f      	b.n	8002f8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_PCD_EP_ClrStall+0x86>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e00e      	b.n	8002fcc <HAL_PCD_EP_ClrStall+0xa4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 f8f3 	bl	80051a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da0c      	bge.n	8003002 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e00c      	b.n	800301c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	4618      	mov	r0, r3
 8003024:	f001 ff12 	bl	8004e4c <USB_EPStopXfer>
 8003028:	4603      	mov	r3, r0
 800302a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800302c:	7afb      	ldrb	r3, [r7, #11]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08a      	sub	sp, #40	; 0x28
 800303a:	af02      	add	r7, sp, #8
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3338      	adds	r3, #56	; 0x38
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	429a      	cmp	r2, r3
 8003068:	d901      	bls.n	800306e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06c      	b.n	8003148 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	d902      	bls.n	800308a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3303      	adds	r3, #3
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003092:	e02b      	b.n	80030ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d902      	bls.n	80030b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	3303      	adds	r3, #3
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6919      	ldr	r1, [r3, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4603      	mov	r3, r0
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f001 ff66 	bl	8004fa0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	441a      	add	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	441a      	add	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d809      	bhi.n	8003116 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310a:	429a      	cmp	r2, r3
 800310c:	d203      	bcs.n	8003116 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1be      	bne.n	8003094 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	429a      	cmp	r2, r3
 8003120:	d811      	bhi.n	8003146 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	43db      	mvns	r3, r3
 800313c:	6939      	ldr	r1, [r7, #16]
 800313e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003142:	4013      	ands	r3, r2
 8003144:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	333c      	adds	r3, #60	; 0x3c
 8003168:	3304      	adds	r3, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d17b      	bne.n	800327e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4a61      	ldr	r2, [pc, #388]	; (8003318 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	f240 80b9 	bls.w	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80b3 	beq.w	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b8:	6093      	str	r3, [r2, #8]
 80031ba:	e0a7      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	2320      	movs	r3, #32
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e098      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 8093 	bne.w	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d90f      	bls.n	800320e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	6093      	str	r3, [r2, #8]
 800320c:	e07e      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	0159      	lsls	r1, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	440b      	add	r3, r1
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	1ad2      	subs	r2, r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d114      	bne.n	8003270 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003258:	461a      	mov	r2, r3
 800325a:	2101      	movs	r1, #1
 800325c:	f002 f936 	bl	80054cc <USB_EP0_OutStart>
 8003260:	e006      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	441a      	add	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f004 fa24 	bl	80076c4 <HAL_PCD_DataOutStageCallback>
 800327c:	e046      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a26      	ldr	r2, [pc, #152]	; (800331c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d124      	bne.n	80032d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	6093      	str	r3, [r2, #8]
 80032a4:	e032      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	461a      	mov	r2, r3
 80032be:	2320      	movs	r3, #32
 80032c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f004 f9fb 	bl	80076c4 <HAL_PCD_DataOutStageCallback>
 80032ce:	e01d      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f8:	461a      	mov	r2, r3
 80032fa:	2100      	movs	r1, #0
 80032fc:	f002 f8e6 	bl	80054cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f004 f9dc 	bl	80076c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	4f54300a 	.word	0x4f54300a
 800331c:	4f54310a 	.word	0x4f54310a

08003320 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	333c      	adds	r3, #60	; 0x3c
 8003338:	3304      	adds	r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d90e      	bls.n	8003374 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f004 f993 	bl	80076a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d90c      	bls.n	800339c <PCD_EP_OutSetupPacket_int+0x7c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003394:	461a      	mov	r2, r3
 8003396:	2101      	movs	r1, #1
 8003398:	f002 f898 	bl	80054cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a

080033ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
 80033b8:	4613      	mov	r3, r2
 80033ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ca:	883b      	ldrh	r3, [r7, #0]
 80033cc:	0419      	lsls	r1, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
 80033d8:	e028      	b.n	800342c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4413      	add	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e00d      	b.n	800340a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	3340      	adds	r3, #64	; 0x40
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4413      	add	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	3301      	adds	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	3b01      	subs	r3, #1
 8003410:	429a      	cmp	r2, r3
 8003412:	d3ec      	bcc.n	80033ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003414:	883b      	ldrh	r3, [r7, #0]
 8003416:	0418      	lsls	r0, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	3b01      	subs	r3, #1
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4302      	orrs	r2, r0
 8003424:	3340      	adds	r3, #64	; 0x40
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e267      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d075      	beq.n	800357e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003492:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b04      	cmp	r3, #4
 800349c:	d00c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d112      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	4b7e      	ldr	r3, [pc, #504]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d05b      	beq.n	800357c <HAL_RCC_OscConfig+0x108>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d157      	bne.n	800357c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e242      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_OscConfig+0x74>
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a75      	ldr	r2, [pc, #468]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xb0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x98>
 80034f2:	4b70      	ldr	r3, [pc, #448]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6f      	ldr	r2, [pc, #444]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6c      	ldr	r2, [pc, #432]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xb0>
 800350c:	4b69      	ldr	r3, [pc, #420]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a68      	ldr	r2, [pc, #416]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd fb9e 	bl	8000c6c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003534:	f7fd fb9a 	bl	8000c6c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e207      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xc0>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd fb8a 	bl	8000c6c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fd fb86 	bl	8000c6c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1f3      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0xe8>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d063      	beq.n	8003652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x152>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1c7      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4937      	ldr	r1, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e03a      	b.n	8003652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <HAL_RCC_OscConfig+0x244>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fd fb3f 	bl	8000c6c <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fd fb3b 	bl	8000c6c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1a8      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4925      	ldr	r1, [pc, #148]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_OscConfig+0x244>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd fb1e 	bl	8000c6c <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003634:	f7fd fb1a 	bl	8000c6c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e187      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d036      	beq.n	80036cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCC_OscConfig+0x248>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fd fafe 	bl	8000c6c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003674:	f7fd fafa 	bl	8000c6c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e167      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x200>
 8003692:	e01b      	b.n	80036cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_OscConfig+0x248>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369a:	f7fd fae7 	bl	8000c6c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	e00e      	b.n	80036c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fd fae3 	bl	8000c6c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d907      	bls.n	80036c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e150      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	42470000 	.word	0x42470000
 80036bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ea      	bne.n	80036a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8097 	beq.w	8003808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a7c      	ldr	r2, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b7a      	ldr	r3, [pc, #488]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b77      	ldr	r3, [pc, #476]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b74      	ldr	r3, [pc, #464]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a73      	ldr	r2, [pc, #460]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fd faa3 	bl	8000c6c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fd fa9f 	bl	8000c6c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e10c      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x2ea>
 8003750:	4b64      	ldr	r3, [pc, #400]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a63      	ldr	r2, [pc, #396]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x324>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b05      	cmp	r3, #5
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x30c>
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
 8003772:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a5b      	ldr	r2, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0x324>
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a57      	ldr	r2, [pc, #348]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a54      	ldr	r2, [pc, #336]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd fa64 	bl	8000c6c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd fa60 	bl	8000c6c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0cb      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ee      	beq.n	80037a8 <HAL_RCC_OscConfig+0x334>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fd fa4e 	bl	8000c6c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fd fa4a 	bl	8000c6c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0b5      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ee      	bne.n	80037d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a38      	ldr	r2, [pc, #224]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a1 	beq.w	8003954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d05c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d141      	bne.n	80038aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_OscConfig+0x478>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd fa1e 	bl	8000c6c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fd fa1a 	bl	8000c6c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e087      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	3b01      	subs	r3, #1
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	491b      	ldr	r1, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x478>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fd f9f3 	bl	8000c6c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fd f9ef 	bl	8000c6c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e05c      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x416>
 80038a8:	e054      	b.n	8003954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fd f9dc 	bl	8000c6c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd f9d8 	bl	8000c6c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e045      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x444>
 80038d6:	e03d      	b.n	8003954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e038      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40007000 	.word	0x40007000
 80038ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x4ec>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d028      	beq.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d121      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d11a      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003928:	4293      	cmp	r3, r2
 800392a:	d111      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	3b01      	subs	r3, #1
 800393a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0cc      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d90c      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0b8      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	494d      	ldr	r1, [pc, #308]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d044      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d119      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e067      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f023 0203 	bic.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4934      	ldr	r1, [pc, #208]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a54:	f7fd f90a 	bl	8000c6c <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5c:	f7fd f906 	bl	8000c6c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e04f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 020c 	and.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1eb      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d20c      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4916      	ldr	r1, [pc, #88]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd f86a 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023c00 	.word	0x40023c00
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08007ccc 	.word	0x08007ccc
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b094      	sub	sp, #80	; 0x50
 8003b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	2300      	movs	r3, #0
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b48:	4b79      	ldr	r3, [pc, #484]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x40>
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	f200 80e1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b62:	e0db      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b68:	e0db      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6a:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b70:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	6139      	str	r1, [r7, #16]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4651      	mov	r1, sl
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4651      	mov	r1, sl
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4651      	mov	r1, sl
 8003be4:	ebb2 0801 	subs.w	r8, r2, r1
 8003be8:	4659      	mov	r1, fp
 8003bea:	eb63 0901 	sbc.w	r9, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb18 0303 	adds.w	r3, r8, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	462b      	mov	r3, r5
 8003c10:	eb49 0303 	adc.w	r3, r9, r3
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c22:	4629      	mov	r1, r5
 8003c24:	024b      	lsls	r3, r1, #9
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	024a      	lsls	r2, r1, #9
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c40:	f7fc fac2 	bl	80001c8 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	e058      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	2200      	movs	r2, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	4611      	mov	r1, r2
 8003c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	0159      	lsls	r1, r3, #5
 8003c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7a:	0150      	lsls	r0, r2, #5
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4641      	mov	r1, r8
 8003c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	00eb      	lsls	r3, r5, #3
 8003cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb6:	00e2      	lsls	r2, r4, #3
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	18e3      	adds	r3, r4, r3
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	eb45 0303 	adc.w	r3, r5, r3
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	61fa      	str	r2, [r7, #28]
 8003cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf4:	f7fc fa68 	bl	80001c8 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3750      	adds	r7, #80	; 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000

08003d54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d54:	b084      	sub	sp, #16
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	f107 001c 	add.w	r0, r7, #28
 8003d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d122      	bne.n	8003db2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 fbee 	bl	8005588 <USB_CoreReset>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e01a      	b.n	8003de8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f001 fbe2 	bl	8005588 <USB_CoreReset>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8003dda:	e005      	b.n	8003de8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10b      	bne.n	8003e06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f043 0206 	orr.w	r2, r3, #6
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e12:	b004      	add	sp, #16
 8003e14:	4770      	bx	lr
	...

08003e18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d165      	bne.n	8003ef8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a41      	ldr	r2, [pc, #260]	; (8003f34 <USB_SetTurnaroundTime+0x11c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d906      	bls.n	8003e42 <USB_SetTurnaroundTime+0x2a>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4a40      	ldr	r2, [pc, #256]	; (8003f38 <USB_SetTurnaroundTime+0x120>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d202      	bcs.n	8003e42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e3c:	230f      	movs	r3, #15
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e062      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <USB_SetTurnaroundTime+0x120>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d306      	bcc.n	8003e58 <USB_SetTurnaroundTime+0x40>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <USB_SetTurnaroundTime+0x124>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d202      	bcs.n	8003e58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e52:	230e      	movs	r3, #14
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e057      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a38      	ldr	r2, [pc, #224]	; (8003f3c <USB_SetTurnaroundTime+0x124>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d306      	bcc.n	8003e6e <USB_SetTurnaroundTime+0x56>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4a37      	ldr	r2, [pc, #220]	; (8003f40 <USB_SetTurnaroundTime+0x128>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d202      	bcs.n	8003e6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e68:	230d      	movs	r3, #13
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e04c      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a33      	ldr	r2, [pc, #204]	; (8003f40 <USB_SetTurnaroundTime+0x128>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d306      	bcc.n	8003e84 <USB_SetTurnaroundTime+0x6c>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4a32      	ldr	r2, [pc, #200]	; (8003f44 <USB_SetTurnaroundTime+0x12c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d802      	bhi.n	8003e84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e7e:	230c      	movs	r3, #12
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e041      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a2f      	ldr	r2, [pc, #188]	; (8003f44 <USB_SetTurnaroundTime+0x12c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d906      	bls.n	8003e9a <USB_SetTurnaroundTime+0x82>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <USB_SetTurnaroundTime+0x130>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d802      	bhi.n	8003e9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e94:	230b      	movs	r3, #11
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e036      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <USB_SetTurnaroundTime+0x130>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d906      	bls.n	8003eb0 <USB_SetTurnaroundTime+0x98>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <USB_SetTurnaroundTime+0x134>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d802      	bhi.n	8003eb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003eaa:	230a      	movs	r3, #10
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e02b      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <USB_SetTurnaroundTime+0x134>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d906      	bls.n	8003ec6 <USB_SetTurnaroundTime+0xae>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <USB_SetTurnaroundTime+0x138>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d202      	bcs.n	8003ec6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ec0:	2309      	movs	r3, #9
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e020      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <USB_SetTurnaroundTime+0x138>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d306      	bcc.n	8003edc <USB_SetTurnaroundTime+0xc4>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <USB_SetTurnaroundTime+0x13c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d802      	bhi.n	8003edc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e015      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <USB_SetTurnaroundTime+0x13c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d906      	bls.n	8003ef2 <USB_SetTurnaroundTime+0xda>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <USB_SetTurnaroundTime+0x140>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d202      	bcs.n	8003ef2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003eec:	2307      	movs	r3, #7
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e00a      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ef2:	2306      	movs	r3, #6
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e007      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003efe:	2309      	movs	r3, #9
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e001      	b.n	8003f08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f04:	2309      	movs	r3, #9
 8003f06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	029b      	lsls	r3, r3, #10
 8003f1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	00d8acbf 	.word	0x00d8acbf
 8003f38:	00e4e1c0 	.word	0x00e4e1c0
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	01067380 	.word	0x01067380
 8003f44:	011a499f 	.word	0x011a499f
 8003f48:	01312cff 	.word	0x01312cff
 8003f4c:	014ca43f 	.word	0x014ca43f
 8003f50:	016e3600 	.word	0x016e3600
 8003f54:	01a6ab1f 	.word	0x01a6ab1f
 8003f58:	01e84800 	.word	0x01e84800

08003f5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d115      	bne.n	8003fee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f7fc fe58 	bl	8000c84 <HAL_Delay>
      ms++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 fa45 	bl	800546a <USB_GetMode>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d01e      	beq.n	8004024 <USB_SetCurrentMode+0x84>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b31      	cmp	r3, #49	; 0x31
 8003fea:	d9f0      	bls.n	8003fce <USB_SetCurrentMode+0x2e>
 8003fec:	e01a      	b.n	8004024 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d115      	bne.n	8004020 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004000:	2001      	movs	r0, #1
 8004002:	f7fc fe3f 	bl	8000c84 <HAL_Delay>
      ms++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f001 fa2c 	bl	800546a <USB_GetMode>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <USB_SetCurrentMode+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b31      	cmp	r3, #49	; 0x31
 800401c:	d9f0      	bls.n	8004000 <USB_SetCurrentMode+0x60>
 800401e:	e001      	b.n	8004024 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e005      	b.n	8004030 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b32      	cmp	r3, #50	; 0x32
 8004028:	d101      	bne.n	800402e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004038:	b084      	sub	sp, #16
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e009      	b.n	800406c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3340      	adds	r3, #64	; 0x40
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3301      	adds	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b0e      	cmp	r3, #14
 8004070:	d9f2      	bls.n	8004058 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11c      	bne.n	80040b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
 80040b0:	e00b      	b.n	80040ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040dc:	4619      	mov	r1, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	461a      	mov	r2, r3
 80040e6:	680b      	ldr	r3, [r1, #0]
 80040e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10c      	bne.n	800410a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040f6:	2100      	movs	r1, #0
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f965 	bl	80043c8 <USB_SetDevSpeed>
 80040fe:	e008      	b.n	8004112 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004100:	2101      	movs	r1, #1
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f960 	bl	80043c8 <USB_SetDevSpeed>
 8004108:	e003      	b.n	8004112 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800410a:	2103      	movs	r1, #3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f95b 	bl	80043c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004112:	2110      	movs	r1, #16
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8f3 	bl	8004300 <USB_FlushTxFifo>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f91f 	bl	8004368 <USB_FlushRxFifo>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e043      	b.n	80041e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004174:	d118      	bne.n	80041a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e013      	b.n	80041ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	461a      	mov	r2, r3
 80041a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e008      	b.n	80041ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	461a      	mov	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	461a      	mov	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3301      	adds	r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3b7      	bcc.n	800415e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e043      	b.n	800427c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420a:	d118      	bne.n	800423e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e013      	b.n	8004250 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e008      	b.n	8004250 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	461a      	mov	r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	461a      	mov	r2, r3
 8004270:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3301      	adds	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d3b7      	bcc.n	80041f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004296:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <USB_DevInit+0x2c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f043 0208 	orr.w	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f8:	b004      	add	sp, #16
 80042fa:	4770      	bx	lr
 80042fc:	803c3800 	.word	0x803c3800

08004300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <USB_FlushTxFifo+0x64>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e01b      	b.n	8004358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	daf2      	bge.n	800430e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	019b      	lsls	r3, r3, #6
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a08      	ldr	r2, [pc, #32]	; (8004364 <USB_FlushTxFifo+0x64>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e006      	b.n	8004358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	d0f0      	beq.n	8004338 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	00030d40 	.word	0x00030d40

08004368 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <USB_FlushRxFifo+0x5c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e018      	b.n	80043b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	daf2      	bge.n	8004374 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2210      	movs	r2, #16
 8004396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <USB_FlushRxFifo+0x5c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e006      	b.n	80043b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d0f0      	beq.n	8004398 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	00030d40 	.word	0x00030d40

080043c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b087      	sub	sp, #28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0306 	and.w	r3, r3, #6
 8004412:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]
 800441e:	e00a      	b.n	8004436 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d002      	beq.n	800442c <USB_GetDevSpeed+0x32>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d102      	bne.n	8004432 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800442c:	2302      	movs	r3, #2
 800442e:	75fb      	strb	r3, [r7, #23]
 8004430:	e001      	b.n	8004436 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004432:	230f      	movs	r3, #15
 8004434:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d13a      	bne.n	80044d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800447e:	4313      	orrs	r3, r2
 8004480:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d155      	bne.n	8004544 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	791b      	ldrb	r3, [r3, #4]
 80044b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	059b      	lsls	r3, r3, #22
 80044ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044bc:	4313      	orrs	r3, r2
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	e036      	b.n	8004544 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	2101      	movs	r1, #1
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11a      	bne.n	8004544 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	791b      	ldrb	r3, [r3, #4]
 8004528:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800452a:	430b      	orrs	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004542:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d161      	bne.n	8004634 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004586:	d11f      	bne.n	80045c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	b29b      	uxth	r3, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e8:	4013      	ands	r3, r2
 80045ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	b29b      	uxth	r3, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800460c:	4013      	ands	r3, r2
 800460e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	0159      	lsls	r1, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	440b      	add	r3, r1
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	4619      	mov	r1, r3
 800462c:	4b35      	ldr	r3, [pc, #212]	; (8004704 <USB_DeactivateEndpoint+0x1b0>)
 800462e:	4013      	ands	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
 8004632:	e060      	b.n	80046f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464a:	d11f      	bne.n	800468c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800466a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	2101      	movs	r1, #1
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	43db      	mvns	r3, r3
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ac:	4013      	ands	r3, r2
 80046ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	43db      	mvns	r3, r3
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d0:	4013      	ands	r3, r2
 80046d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	0159      	lsls	r1, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	4619      	mov	r1, r3
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <USB_DeactivateEndpoint+0x1b4>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	ec337800 	.word	0xec337800
 8004708:	eff37800 	.word	0xeff37800

0800470c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	f040 815c 	bne.w	80049e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d132      	bne.n	800479c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	440a      	add	r2, r1
 8004790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004794:	0cdb      	lsrs	r3, r3, #19
 8004796:	04db      	lsls	r3, r3, #19
 8004798:	6113      	str	r3, [r2, #16]
 800479a:	e074      	b.n	8004886 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	0cdb      	lsrs	r3, r3, #19
 80047b8:	04db      	lsls	r3, r3, #19
 80047ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	440b      	add	r3, r1
 80047f8:	1e59      	subs	r1, r3, #1
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004802:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004804:	4b9d      	ldr	r3, [pc, #628]	; (8004a7c <USB_EPStartXfer+0x370>)
 8004806:	400b      	ands	r3, r1
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	0148      	lsls	r0, r1, #5
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	4401      	add	r1, r0
 8004810:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004814:	4313      	orrs	r3, r2
 8004816:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	0148      	lsls	r0, r1, #5
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	4401      	add	r1, r0
 8004836:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800483a:	4313      	orrs	r3, r2
 800483c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	791b      	ldrb	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d11f      	bne.n	8004886 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004860:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004864:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004884:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d14b      	bne.n	8004924 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	461a      	mov	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d128      	bne.n	8004902 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d110      	bne.n	80048e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	e00f      	b.n	8004902 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004900:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e133      	b.n	8004b8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004942:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	791b      	ldrb	r3, [r3, #4]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d015      	beq.n	8004978 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 811b 	beq.w	8004b8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	2101      	movs	r1, #1
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	69f9      	ldr	r1, [r7, #28]
 800496e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004972:	4313      	orrs	r3, r2
 8004974:	634b      	str	r3, [r1, #52]	; 0x34
 8004976:	e109      	b.n	8004b8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d110      	bne.n	80049aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e00f      	b.n	80049ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6919      	ldr	r1, [r3, #16]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	b298      	uxth	r0, r3
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	4603      	mov	r3, r0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fade 	bl	8004fa0 <USB_WritePacket>
 80049e4:	e0d2      	b.n	8004b8c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a00:	0cdb      	lsrs	r3, r3, #19
 8004a02:	04db      	lsls	r3, r3, #19
 8004a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d126      	bne.n	8004a80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	0148      	lsls	r0, r1, #5
 8004a4c:	69f9      	ldr	r1, [r7, #28]
 8004a4e:	4401      	add	r1, r0
 8004a50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a76:	6113      	str	r3, [r2, #16]
 8004a78:	e03a      	b.n	8004af0 <USB_EPStartXfer+0x3e4>
 8004a7a:	bf00      	nop
 8004a7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	8afa      	ldrh	r2, [r7, #22]
 8004a9c:	fb03 f202 	mul.w	r2, r3, r2
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	04d9      	lsls	r1, r3, #19
 8004ab6:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <USB_EPStartXfer+0x48c>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	0148      	lsls	r0, r1, #5
 8004abe:	69f9      	ldr	r1, [r7, #28]
 8004ac0:	4401      	add	r1, r0
 8004ac2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	0148      	lsls	r0, r1, #5
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	4401      	add	r1, r0
 8004ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aec:	4313      	orrs	r3, r2
 8004aee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d10d      	bne.n	8004b12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6919      	ldr	r1, [r3, #16]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	460a      	mov	r2, r1
 8004b10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	791b      	ldrb	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d128      	bne.n	8004b6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d110      	bne.n	8004b4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00f      	b.n	8004b6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	1ff80000 	.word	0x1ff80000

08004b9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 80ce 	bne.w	8004d5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d132      	bne.n	8004c2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	0cdb      	lsrs	r3, r3, #19
 8004c26:	04db      	lsls	r3, r3, #19
 8004c28:	6113      	str	r3, [r2, #16]
 8004c2a:	e04e      	b.n	8004cca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c46:	0cdb      	lsrs	r3, r3, #19
 8004c48:	04db      	lsls	r3, r3, #19
 8004c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cba:	6939      	ldr	r1, [r7, #16]
 8004cbc:	0148      	lsls	r0, r1, #5
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	4401      	add	r1, r0
 8004cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d11e      	bne.n	8004d0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e097      	b.n	8004e3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8083 	beq.w	8004e3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	2101      	movs	r1, #1
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d54:	4313      	orrs	r3, r2
 8004d56:	634b      	str	r3, [r1, #52]	; 0x34
 8004d58:	e071      	b.n	8004e3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	0cdb      	lsrs	r3, r3, #19
 8004d76:	04db      	lsls	r3, r3, #19
 8004d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dec:	6939      	ldr	r1, [r7, #16]
 8004dee:	0148      	lsls	r0, r1, #5
 8004df0:	6979      	ldr	r1, [r7, #20]
 8004df2:	4401      	add	r1, r0
 8004df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d10d      	bne.n	8004e1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6919      	ldr	r1, [r3, #16]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d14a      	bne.n	8004f00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e82:	f040 8086 	bne.w	8004f92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ea8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ecc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d902      	bls.n	8004ee4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ee2:	e056      	b.n	8004f92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efc:	d0e7      	beq.n	8004ece <USB_EPStopXfer+0x82>
 8004efe:	e048      	b.n	8004f92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f18:	d13b      	bne.n	8004f92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	7812      	ldrb	r2, [r2, #0]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	7812      	ldrb	r2, [r2, #0]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d902      	bls.n	8004f78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
          break;
 8004f76:	e00c      	b.n	8004f92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f90:	d0e7      	beq.n	8004f62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	460b      	mov	r3, r1
 8004fb0:	71fb      	strb	r3, [r7, #7]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d123      	bne.n	800500e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fc6:	88bb      	ldrh	r3, [r7, #4]
 8004fc8:	3303      	adds	r3, #3
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	e018      	b.n	8005006 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	031a      	lsls	r2, r3, #12
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	3301      	adds	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	3301      	adds	r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d3e2      	bcc.n	8004fd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3724      	adds	r7, #36	; 0x24
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800501c:	b480      	push	{r7}
 800501e:	b08b      	sub	sp, #44	; 0x2c
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	b29b      	uxth	r3, r3
 8005038:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
 8005046:	e014      	b.n	8005072 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	601a      	str	r2, [r3, #0]
    pDest++;
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	3301      	adds	r3, #1
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	3301      	adds	r3, #1
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	3301      	adds	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	3301      	adds	r3, #1
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	3301      	adds	r3, #1
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	429a      	cmp	r2, r3
 8005078:	d3e6      	bcc.n	8005048 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800507a:	8bfb      	ldrh	r3, [r7, #30]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01e      	beq.n	80050be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508a:	461a      	mov	r2, r3
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	701a      	strb	r2, [r3, #0]
      i++;
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	3301      	adds	r3, #1
 80050aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	3301      	adds	r3, #1
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050b2:	8bfb      	ldrh	r3, [r7, #30]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050b8:	8bfb      	ldrh	r3, [r7, #30]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ea      	bne.n	8005094 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	372c      	adds	r7, #44	; 0x2c
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d12c      	bne.n	8005142 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db12      	blt.n	8005120 <USB_EPSetStall+0x54>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800511e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e02b      	b.n	800519a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	db12      	blt.n	800517a <USB_EPSetStall+0xae>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005174:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005178:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005198:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d128      	bne.n	8005216 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d003      	beq.n	80051f4 <USB_EPClearStall+0x4c>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	791b      	ldrb	r3, [r3, #4]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d138      	bne.n	8005266 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e027      	b.n	8005266 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005230:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005234:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	791b      	ldrb	r3, [r3, #4]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d003      	beq.n	8005246 <USB_EPClearStall+0x9e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	791b      	ldrb	r3, [r3, #4]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d10f      	bne.n	8005266 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005264:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005292:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005296:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ae:	4313      	orrs	r3, r2
 80052b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ee:	f023 0302 	bic.w	r3, r3, #2
 80052f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800531c:	f023 0303 	bic.w	r3, r3, #3
 8005320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005330:	f043 0302 	orr.w	r3, r3, #2
 8005334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	0c1b      	lsrs	r3, r3, #16
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	b29b      	uxth	r3, r3
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005400:	68bb      	ldr	r3, [r7, #8]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	fa22 f303 	lsr.w	r3, r2, r3
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	b2db      	uxtb	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800545c:	68bb      	ldr	r3, [r7, #8]
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054a4:	f023 0307 	bic.w	r3, r3, #7
 80054a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	460b      	mov	r3, r1
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	333c      	adds	r3, #60	; 0x3c
 80054e2:	3304      	adds	r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <USB_EP0_OutStart+0xb8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d90a      	bls.n	8005506 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005500:	d101      	bne.n	8005506 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e037      	b.n	8005576 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f043 0318 	orr.w	r3, r3, #24
 8005538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005548:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800554c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10f      	bne.n	8005574 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555a:	461a      	mov	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005572:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	4f54300a 	.word	0x4f54300a

08005588 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3301      	adds	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <USB_CoreReset+0x64>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e01b      	b.n	80055de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	daf2      	bge.n	8005594 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f043 0201 	orr.w	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3301      	adds	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <USB_CoreReset+0x64>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e006      	b.n	80055de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d0f0      	beq.n	80055be <USB_CoreReset+0x36>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	00030d40 	.word	0x00030d40

080055f0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80055fc:	2028      	movs	r0, #40	; 0x28
 80055fe:	f002 fab9 	bl	8007b74 <USBD_static_malloc>
 8005602:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32b0      	adds	r2, #176	; 0xb0
 8005614:	2100      	movs	r1, #0
 8005616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800561a:	2302      	movs	r3, #2
 800561c:	e08b      	b.n	8005736 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	32b0      	adds	r2, #176	; 0xb0
 8005628:	68f9      	ldr	r1, [r7, #12]
 800562a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	32b0      	adds	r2, #176	; 0xb0
 8005638:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	7c1b      	ldrb	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d11b      	bne.n	8005682 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800564a:	4b3d      	ldr	r3, [pc, #244]	; (8005740 <USBD_CUSTOM_HID_Init+0x150>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3326      	adds	r3, #38	; 0x26
 8005660:	2205      	movs	r2, #5
 8005662:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005664:	4b37      	ldr	r3, [pc, #220]	; (8005744 <USBD_CUSTOM_HID_Init+0x154>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f003 020f 	and.w	r2, r3, #15
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800567c:	2205      	movs	r2, #5
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e01a      	b.n	80056b8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005682:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <USBD_CUSTOM_HID_Init+0x150>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f003 020f 	and.w	r2, r3, #15
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3326      	adds	r3, #38	; 0x26
 8005698:	2205      	movs	r2, #5
 800569a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800569c:	4b29      	ldr	r3, [pc, #164]	; (8005744 <USBD_CUSTOM_HID_Init+0x154>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80056b4:	2205      	movs	r2, #5
 80056b6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <USBD_CUSTOM_HID_Init+0x150>)
 80056ba:	7819      	ldrb	r1, [r3, #0]
 80056bc:	2302      	movs	r3, #2
 80056be:	2203      	movs	r2, #3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f002 f946 	bl	8007952 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80056c6:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <USBD_CUSTOM_HID_Init+0x150>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f003 020f 	and.w	r2, r3, #15
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	3324      	adds	r3, #36	; 0x24
 80056dc:	2201      	movs	r2, #1
 80056de:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80056e0:	4b18      	ldr	r3, [pc, #96]	; (8005744 <USBD_CUSTOM_HID_Init+0x154>)
 80056e2:	7819      	ldrb	r1, [r3, #0]
 80056e4:	2302      	movs	r3, #2
 80056e6:	2203      	movs	r2, #3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f002 f932 	bl	8007952 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <USBD_CUSTOM_HID_Init+0x154>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005706:	2201      	movs	r2, #1
 8005708:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	33b0      	adds	r3, #176	; 0xb0
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005726:	4b07      	ldr	r3, [pc, #28]	; (8005744 <USBD_CUSTOM_HID_Init+0x154>)
 8005728:	7819      	ldrb	r1, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	2311      	movs	r3, #17
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 f9fe 	bl	8007b30 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000086 	.word	0x20000086
 8005744:	20000087 	.word	0x20000087

08005748 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005754:	4b37      	ldr	r3, [pc, #220]	; (8005834 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 f91f 	bl	800799e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005760:	4b34      	ldr	r3, [pc, #208]	; (8005834 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3324      	adds	r3, #36	; 0x24
 8005776:	2200      	movs	r2, #0
 8005778:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800577a:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <USBD_CUSTOM_HID_DeInit+0xec>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	3326      	adds	r3, #38	; 0x26
 8005790:	2200      	movs	r2, #0
 8005792:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005794:	4b28      	ldr	r3, [pc, #160]	; (8005838 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f002 f8ff 	bl	800799e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057b8:	2200      	movs	r2, #0
 80057ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80057bc:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80057d4:	2200      	movs	r2, #0
 80057d6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	32b0      	adds	r2, #176	; 0xb0
 80057e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01f      	beq.n	800582a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	33b0      	adds	r3, #176	; 0xb0
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	32b0      	adds	r2, #176	; 0xb0
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	4618      	mov	r0, r3
 800580e:	f002 f9bf 	bl	8007b90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32b0      	adds	r2, #176	; 0xb0
 800581c:	2100      	movs	r1, #0
 800581e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000086 	.word	0x20000086
 8005838:	20000087 	.word	0x20000087

0800583c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	32b0      	adds	r2, #176	; 0xb0
 8005850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005854:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800586c:	2303      	movs	r3, #3
 800586e:	e0f8      	b.n	8005a62 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005878:	2b00      	cmp	r3, #0
 800587a:	d056      	beq.n	800592a <USBD_CUSTOM_HID_Setup+0xee>
 800587c:	2b20      	cmp	r3, #32
 800587e:	f040 80e8 	bne.w	8005a52 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	3b02      	subs	r3, #2
 8005888:	2b09      	cmp	r3, #9
 800588a:	d846      	bhi.n	800591a <USBD_CUSTOM_HID_Setup+0xde>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <USBD_CUSTOM_HID_Setup+0x58>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058ed 	.word	0x080058ed
 8005898:	080058cb 	.word	0x080058cb
 800589c:	0800591b 	.word	0x0800591b
 80058a0:	0800591b 	.word	0x0800591b
 80058a4:	0800591b 	.word	0x0800591b
 80058a8:	0800591b 	.word	0x0800591b
 80058ac:	0800591b 	.word	0x0800591b
 80058b0:	080058fd 	.word	0x080058fd
 80058b4:	080058db 	.word	0x080058db
 80058b8:	080058bd 	.word	0x080058bd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	885b      	ldrh	r3, [r3, #2]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	615a      	str	r2, [r3, #20]
          break;
 80058c8:	e02e      	b.n	8005928 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3314      	adds	r3, #20
 80058ce:	2201      	movs	r2, #1
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fca8 	bl	8007228 <USBD_CtlSendData>
          break;
 80058d8:	e026      	b.n	8005928 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	885b      	ldrh	r3, [r3, #2]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	619a      	str	r2, [r3, #24]
          break;
 80058ea:	e01d      	b.n	8005928 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3318      	adds	r3, #24
 80058f0:	2201      	movs	r2, #1
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fc97 	bl	8007228 <USBD_CtlSendData>
          break;
 80058fa:	e015      	b.n	8005928 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2201      	movs	r2, #1
 8005900:	621a      	str	r2, [r3, #32]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005902:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	88db      	ldrh	r3, [r3, #6]
 8005908:	2b11      	cmp	r3, #17
 800590a:	bf28      	it	cs
 800590c:	2311      	movcs	r3, #17
 800590e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005910:	461a      	mov	r2, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fcb4 	bl	8007280 <USBD_CtlPrepareRx>
          break;
 8005918:	e006      	b.n	8005928 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 fc12 	bl	8007146 <USBD_CtlError>
          ret = USBD_FAIL;
 8005922:	2303      	movs	r3, #3
 8005924:	75fb      	strb	r3, [r7, #23]
          break;
 8005926:	bf00      	nop
      }
      break;
 8005928:	e09a      	b.n	8005a60 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b0b      	cmp	r3, #11
 8005930:	f200 8086 	bhi.w	8005a40 <USBD_CUSTOM_HID_Setup+0x204>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <USBD_CUSTOM_HID_Setup+0x100>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800596d 	.word	0x0800596d
 8005940:	08005a4f 	.word	0x08005a4f
 8005944:	08005a41 	.word	0x08005a41
 8005948:	08005a41 	.word	0x08005a41
 800594c:	08005a41 	.word	0x08005a41
 8005950:	08005a41 	.word	0x08005a41
 8005954:	08005997 	.word	0x08005997
 8005958:	08005a41 	.word	0x08005a41
 800595c:	08005a41 	.word	0x08005a41
 8005960:	08005a41 	.word	0x08005a41
 8005964:	080059ef 	.word	0x080059ef
 8005968:	08005a19 	.word	0x08005a19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d107      	bne.n	8005988 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005978:	f107 030e 	add.w	r3, r7, #14
 800597c:	2202      	movs	r2, #2
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fc51 	bl	8007228 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005986:	e063      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fbdb 	bl	8007146 <USBD_CtlError>
            ret = USBD_FAIL;
 8005990:	2303      	movs	r3, #3
 8005992:	75fb      	strb	r3, [r7, #23]
          break;
 8005994:	e05c      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	885b      	ldrh	r3, [r3, #2]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b22      	cmp	r3, #34	; 0x22
 80059a0:	d110      	bne.n	80059c4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	88db      	ldrh	r3, [r3, #6]
 80059a6:	2b21      	cmp	r3, #33	; 0x21
 80059a8:	bf28      	it	cs
 80059aa:	2321      	movcs	r3, #33	; 0x21
 80059ac:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	33b0      	adds	r3, #176	; 0xb0
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e00d      	b.n	80059e0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	885b      	ldrh	r3, [r3, #2]
 80059c8:	0a1b      	lsrs	r3, r3, #8
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b21      	cmp	r3, #33	; 0x21
 80059ce:	d107      	bne.n	80059e0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <USBD_CUSTOM_HID_Setup+0x230>)
 80059d2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	88db      	ldrh	r3, [r3, #6]
 80059d8:	2b09      	cmp	r3, #9
 80059da:	bf28      	it	cs
 80059dc:	2309      	movcs	r3, #9
 80059de:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80059e0:	8bfb      	ldrh	r3, [r7, #30]
 80059e2:	461a      	mov	r2, r3
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 fc1e 	bl	8007228 <USBD_CtlSendData>
          break;
 80059ec:	e030      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	331c      	adds	r3, #28
 80059fe:	2201      	movs	r2, #1
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 fc10 	bl	8007228 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a08:	e022      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fb9a 	bl	8007146 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a12:	2303      	movs	r3, #3
 8005a14:	75fb      	strb	r3, [r7, #23]
          break;
 8005a16:	e01b      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d106      	bne.n	8005a32 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	61da      	str	r2, [r3, #28]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a30:	e00e      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fb86 	bl	8007146 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a3e:	e007      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fb7f 	bl	8007146 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a4c:	e000      	b.n	8005a50 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8005a4e:	bf00      	nop
      }
      break;
 8005a50:	e006      	b.n	8005a60 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fb76 	bl	8007146 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	bf00      	nop
  }
  return (uint8_t)ret;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000070 	.word	0x20000070

08005a70 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	32b0      	adds	r2, #176	; 0xb0
 8005a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e021      	b.n	8005ad8 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	32b0      	adds	r2, #176	; 0xb0
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d112      	bne.n	8005ad6 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <USBD_CUSTOM_HID_SendReport+0x70>)
 8005ac4:	7819      	ldrb	r1, [r3, #0]
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f002 f80f 	bl	8007aee <USBD_LL_Transmit>
 8005ad0:	e001      	b.n	8005ad6 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000086 	.word	0x20000086

08005ae4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005aec:	2181      	movs	r1, #129	; 0x81
 8005aee:	4815      	ldr	r0, [pc, #84]	; (8005b44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005af0:	f000 fcf1 	bl	80064d6 <USBD_GetEpDesc>
 8005af4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005af6:	2101      	movs	r1, #1
 8005af8:	4812      	ldr	r0, [pc, #72]	; (8005b44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005afa:	f000 fcec 	bl	80064d6 <USBD_GetEpDesc>
 8005afe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f042 0202 	orr.w	r2, r2, #2
 8005b0e:	711a      	strb	r2, [r3, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2205      	movs	r2, #5
 8005b18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f042 0202 	orr.w	r2, r2, #2
 8005b28:	711a      	strb	r2, [r3, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2205      	movs	r2, #5
 8005b32:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2229      	movs	r2, #41	; 0x29
 8005b38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005b3a:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000044 	.word	0x20000044

08005b48 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005b50:	2181      	movs	r1, #129	; 0x81
 8005b52:	4815      	ldr	r0, [pc, #84]	; (8005ba8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005b54:	f000 fcbf 	bl	80064d6 <USBD_GetEpDesc>
 8005b58:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4812      	ldr	r0, [pc, #72]	; (8005ba8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005b5e:	f000 fcba 	bl	80064d6 <USBD_GetEpDesc>
 8005b62:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f042 0202 	orr.w	r2, r2, #2
 8005b72:	711a      	strb	r2, [r3, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2205      	movs	r2, #5
 8005b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f042 0202 	orr.w	r2, r2, #2
 8005b8c:	711a      	strb	r2, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2205      	movs	r2, #5
 8005b96:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2229      	movs	r2, #41	; 0x29
 8005b9c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005b9e:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000044 	.word	0x20000044

08005bac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005bb4:	2181      	movs	r1, #129	; 0x81
 8005bb6:	4815      	ldr	r0, [pc, #84]	; (8005c0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005bb8:	f000 fc8d 	bl	80064d6 <USBD_GetEpDesc>
 8005bbc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4812      	ldr	r0, [pc, #72]	; (8005c0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005bc2:	f000 fc88 	bl	80064d6 <USBD_GetEpDesc>
 8005bc6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f042 0202 	orr.w	r2, r2, #2
 8005bd6:	711a      	strb	r2, [r3, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2205      	movs	r2, #5
 8005be0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f042 0202 	orr.w	r2, r2, #2
 8005bf0:	711a      	strb	r2, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2229      	movs	r2, #41	; 0x29
 8005c00:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005c02:	4b02      	ldr	r3, [pc, #8]	; (8005c0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000044 	.word	0x20000044

08005c10 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	32b0      	adds	r2, #176	; 0xb0
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return (uint8_t)USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	32b0      	adds	r2, #176	; 0xb0
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e017      	b.n	8005c90 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	32b0      	adds	r2, #176	; 0xb0
 8005c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	33b0      	adds	r3, #176	; 0xb0
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	7810      	ldrb	r0, [r2, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	7852      	ldrb	r2, [r2, #1]
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	32b0      	adds	r2, #176	; 0xb0
 8005caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cae:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e016      	b.n	8005ce8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d111      	bne.n	8005ce6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	33b0      	adds	r3, #176	; 0xb0
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	7810      	ldrb	r0, [r2, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	7852      	ldrb	r2, [r2, #1]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	621a      	str	r2, [r3, #32]
  }

  return (uint8_t)USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005cfe:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	2000007c 	.word	0x2000007c

08005d10 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e009      	b.n	8005d38 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	33b0      	adds	r3, #176	; 0xb0
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e01f      	b.n	8005d9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	79fa      	ldrb	r2, [r7, #7]
 8005d8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 fd77 	bl	8007884 <USBD_LL_Init>
 8005d96:	4603      	mov	r3, r0
 8005d98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e025      	b.n	8005e08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	32ae      	adds	r2, #174	; 0xae
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00f      	beq.n	8005df8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32ae      	adds	r2, #174	; 0xae
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f107 020e 	add.w	r2, r7, #14
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	4602      	mov	r2, r0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 fd7f 	bl	800791c <USBD_LL_Start>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	4611      	mov	r1, r2
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	4611      	mov	r1, r2
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f908 	bl	80070d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d01a      	beq.n	8005f1c <USBD_LL_SetupStage+0x72>
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d822      	bhi.n	8005f30 <USBD_LL_SetupStage+0x86>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <USBD_LL_SetupStage+0x4a>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d00a      	beq.n	8005f08 <USBD_LL_SetupStage+0x5e>
 8005ef2:	e01d      	b.n	8005f30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fb5f 	bl	80065c0 <USBD_StdDevReq>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
      break;
 8005f06:	e020      	b.n	8005f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fbc7 	bl	80066a4 <USBD_StdItfReq>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1a:	e016      	b.n	8005f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc29 	bl	800677c <USBD_StdEPReq>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2e:	e00c      	b.n	8005f4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fd4c 	bl	80079dc <USBD_LL_StallEP>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]
      break;
 8005f48:	bf00      	nop
  }

  return ret;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d16e      	bne.n	800604a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	f040 8098 	bne.w	80060b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d913      	bls.n	8005fb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	1ad2      	subs	r2, r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	bf28      	it	cs
 8005fa6:	4613      	movcs	r3, r2
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f001 f984 	bl	80072ba <USBD_CtlContinueRx>
 8005fb2:	e07d      	b.n	80060b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d014      	beq.n	8005fec <USBD_LL_DataOutStage+0x98>
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d81d      	bhi.n	8006002 <USBD_LL_DataOutStage+0xae>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <USBD_LL_DataOutStage+0x7c>
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d003      	beq.n	8005fd6 <USBD_LL_DataOutStage+0x82>
 8005fce:	e018      	b.n	8006002 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75bb      	strb	r3, [r7, #22]
            break;
 8005fd4:	e018      	b.n	8006008 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fa5e 	bl	80064a2 <USBD_CoreFindIF>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75bb      	strb	r3, [r7, #22]
            break;
 8005fea:	e00d      	b.n	8006008 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa60 	bl	80064bc <USBD_CoreFindEP>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75bb      	strb	r3, [r7, #22]
            break;
 8006000:	e002      	b.n	8006008 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	75bb      	strb	r3, [r7, #22]
            break;
 8006006:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006008:	7dbb      	ldrb	r3, [r7, #22]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d119      	bne.n	8006042 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b03      	cmp	r3, #3
 8006018:	d113      	bne.n	8006042 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800601a:	7dba      	ldrb	r2, [r7, #22]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	32ae      	adds	r2, #174	; 0xae
 8006020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800602a:	7dba      	ldrb	r2, [r7, #22]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006032:	7dba      	ldrb	r2, [r7, #22]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	32ae      	adds	r2, #174	; 0xae
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 f94a 	bl	80072dc <USBD_CtlSendStatus>
 8006048:	e032      	b.n	80060b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fa31 	bl	80064bc <USBD_CoreFindEP>
 800605a:	4603      	mov	r3, r0
 800605c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800605e:	7dbb      	ldrb	r3, [r7, #22]
 8006060:	2bff      	cmp	r3, #255	; 0xff
 8006062:	d025      	beq.n	80060b0 <USBD_LL_DataOutStage+0x15c>
 8006064:	7dbb      	ldrb	r3, [r7, #22]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d122      	bne.n	80060b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b03      	cmp	r3, #3
 8006074:	d117      	bne.n	80060a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006076:	7dba      	ldrb	r2, [r7, #22]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	32ae      	adds	r2, #174	; 0xae
 800607c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00f      	beq.n	80060a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006086:	7dba      	ldrb	r2, [r7, #22]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800608e:	7dba      	ldrb	r2, [r7, #22]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	32ae      	adds	r2, #174	; 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	7afa      	ldrb	r2, [r7, #11]
 800609c:	4611      	mov	r1, r2
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	e000      	b.n	80060b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	460b      	mov	r3, r1
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d16f      	bne.n	80061ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3314      	adds	r3, #20
 80060d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d15a      	bne.n	8006194 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d914      	bls.n	8006114 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f001 f8ac 	bl	800725e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006106:	2300      	movs	r3, #0
 8006108:	2200      	movs	r2, #0
 800610a:	2100      	movs	r1, #0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f001 fd0f 	bl	8007b30 <USBD_LL_PrepareReceive>
 8006112:	e03f      	b.n	8006194 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	d11c      	bne.n	800615a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006128:	429a      	cmp	r2, r3
 800612a:	d316      	bcc.n	800615a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006136:	429a      	cmp	r2, r3
 8006138:	d20f      	bcs.n	800615a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800613a:	2200      	movs	r2, #0
 800613c:	2100      	movs	r1, #0
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f001 f88d 	bl	800725e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800614c:	2300      	movs	r3, #0
 800614e:	2200      	movs	r2, #0
 8006150:	2100      	movs	r1, #0
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f001 fcec 	bl	8007b30 <USBD_LL_PrepareReceive>
 8006158:	e01c      	b.n	8006194 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d10f      	bne.n	8006186 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f001 fc27 	bl	80079dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f001 f8b7 	bl	8007302 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d03a      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fe42 	bl	8005e28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061ac:	e032      	b.n	8006214 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80061ae:	7afb      	ldrb	r3, [r7, #11]
 80061b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f97f 	bl	80064bc <USBD_CoreFindEP>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	2bff      	cmp	r3, #255	; 0xff
 80061c6:	d025      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d122      	bne.n	8006214 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d11c      	bne.n	8006214 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061da:	7dfa      	ldrb	r2, [r7, #23]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	32ae      	adds	r2, #174	; 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d014      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061ea:	7dfa      	ldrb	r2, [r7, #23]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061f2:	7dfa      	ldrb	r2, [r7, #23]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	32ae      	adds	r2, #174	; 0xae
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	7afa      	ldrb	r2, [r7, #11]
 8006200:	4611      	mov	r1, r2
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800620a:	7dbb      	ldrb	r3, [r7, #22]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006210:	7dbb      	ldrb	r3, [r7, #22]
 8006212:	e000      	b.n	8006216 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d014      	beq.n	8006284 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6852      	ldr	r2, [r2, #4]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	4611      	mov	r1, r2
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006280:	2303      	movs	r3, #3
 8006282:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006284:	2340      	movs	r3, #64	; 0x40
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fb61 	bl	8007952 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2240      	movs	r2, #64	; 0x40
 800629c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	2200      	movs	r2, #0
 80062a4:	2180      	movs	r1, #128	; 0x80
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fb53 	bl	8007952 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	621a      	str	r2, [r3, #32]

  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2204      	movs	r2, #4
 80062fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b04      	cmp	r3, #4
 8006320:	d106      	bne.n	8006330 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006328:	b2da      	uxtb	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d110      	bne.n	8006374 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	32ae      	adds	r2, #174	; 0xae
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800639c:	2303      	movs	r3, #3
 800639e:	e01c      	b.n	80063da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d115      	bne.n	80063d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	32ae      	adds	r2, #174	; 0xae
 80063b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32ae      	adds	r2, #174	; 0xae
 80063ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	4611      	mov	r1, r2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32ae      	adds	r2, #174	; 0xae
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006400:	2303      	movs	r3, #3
 8006402:	e01c      	b.n	800643e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b03      	cmp	r3, #3
 800640e:	d115      	bne.n	800643c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	32ae      	adds	r2, #174	; 0xae
 800641a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	32ae      	adds	r2, #174	; 0xae
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	78fa      	ldrb	r2, [r7, #3]
 8006436:	4611      	mov	r1, r2
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6852      	ldr	r2, [r2, #4]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	4611      	mov	r1, r2
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006494:	2303      	movs	r3, #3
 8006496:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b086      	sub	sp, #24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	885b      	ldrh	r3, [r3, #2]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d920      	bls.n	8006540 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006506:	e013      	b.n	8006530 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006508:	f107 030a 	add.w	r3, r7, #10
 800650c:	4619      	mov	r1, r3
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f000 f81b 	bl	800654a <USBD_GetNextDesc>
 8006514:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d108      	bne.n	8006530 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	789b      	ldrb	r3, [r3, #2]
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	429a      	cmp	r2, r3
 800652a:	d008      	beq.n	800653e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	885b      	ldrh	r3, [r3, #2]
 8006534:	b29a      	uxth	r2, r3
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	429a      	cmp	r2, r3
 800653a:	d8e5      	bhi.n	8006508 <USBD_GetEpDesc+0x32>
 800653c:	e000      	b.n	8006540 <USBD_GetEpDesc+0x6a>
          break;
 800653e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006540:	693b      	ldr	r3, [r7, #16]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	4413      	add	r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	3301      	adds	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065a2:	8a3b      	ldrh	r3, [r7, #16]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	b21a      	sxth	r2, r3
 80065a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065b2:	89fb      	ldrh	r3, [r7, #14]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d005      	beq.n	80065e6 <USBD_StdDevReq+0x26>
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d857      	bhi.n	800668e <USBD_StdDevReq+0xce>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00f      	beq.n	8006602 <USBD_StdDevReq+0x42>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d153      	bne.n	800668e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	32ae      	adds	r2, #174	; 0xae
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	4798      	blx	r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006600:	e04a      	b.n	8006698 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b09      	cmp	r3, #9
 8006608:	d83b      	bhi.n	8006682 <USBD_StdDevReq+0xc2>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <USBD_StdDevReq+0x50>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006665 	.word	0x08006665
 8006614:	08006679 	.word	0x08006679
 8006618:	08006683 	.word	0x08006683
 800661c:	0800666f 	.word	0x0800666f
 8006620:	08006683 	.word	0x08006683
 8006624:	08006643 	.word	0x08006643
 8006628:	08006639 	.word	0x08006639
 800662c:	08006683 	.word	0x08006683
 8006630:	0800665b 	.word	0x0800665b
 8006634:	0800664d 	.word	0x0800664d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa3c 	bl	8006ab8 <USBD_GetDescriptor>
          break;
 8006640:	e024      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fba1 	bl	8006d8c <USBD_SetAddress>
          break;
 800664a:	e01f      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fbe0 	bl	8006e14 <USBD_SetConfig>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
          break;
 8006658:	e018      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc83 	bl	8006f68 <USBD_GetConfig>
          break;
 8006662:	e013      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fcb4 	bl	8006fd4 <USBD_GetStatus>
          break;
 800666c:	e00e      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fce3 	bl	800703c <USBD_SetFeature>
          break;
 8006676:	e009      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fd07 	bl	800708e <USBD_ClrFeature>
          break;
 8006680:	e004      	b.n	800668c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fd5e 	bl	8007146 <USBD_CtlError>
          break;
 800668a:	bf00      	nop
      }
      break;
 800668c:	e004      	b.n	8006698 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fd58 	bl	8007146 <USBD_CtlError>
      break;
 8006696:	bf00      	nop
  }

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop

080066a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d005      	beq.n	80066ca <USBD_StdItfReq+0x26>
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d852      	bhi.n	8006768 <USBD_StdItfReq+0xc4>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <USBD_StdItfReq+0x26>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d14e      	bne.n	8006768 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d840      	bhi.n	800675a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	889b      	ldrh	r3, [r3, #4]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d836      	bhi.n	8006750 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	889b      	ldrh	r3, [r3, #4]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fed9 	bl	80064a2 <USBD_CoreFindIF>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2bff      	cmp	r3, #255	; 0xff
 80066f8:	d01d      	beq.n	8006736 <USBD_StdItfReq+0x92>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11a      	bne.n	8006736 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006700:	7bba      	ldrb	r2, [r7, #14]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	32ae      	adds	r2, #174	; 0xae
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00f      	beq.n	8006730 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006710:	7bba      	ldrb	r2, [r7, #14]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006718:	7bba      	ldrb	r2, [r7, #14]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	32ae      	adds	r2, #174	; 0xae
 800671e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800672e:	e004      	b.n	800673a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006734:	e001      	b.n	800673a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d110      	bne.n	8006764 <USBD_StdItfReq+0xc0>
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fdc7 	bl	80072dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800674e:	e009      	b.n	8006764 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fcf7 	bl	8007146 <USBD_CtlError>
          break;
 8006758:	e004      	b.n	8006764 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fcf2 	bl	8007146 <USBD_CtlError>
          break;
 8006762:	e000      	b.n	8006766 <USBD_StdItfReq+0xc2>
          break;
 8006764:	bf00      	nop
      }
      break;
 8006766:	e004      	b.n	8006772 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fceb 	bl	8007146 <USBD_CtlError>
      break;
 8006770:	bf00      	nop
  }

  return ret;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	889b      	ldrh	r3, [r3, #4]
 800678e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d007      	beq.n	80067ac <USBD_StdEPReq+0x30>
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	f200 817f 	bhi.w	8006aa0 <USBD_StdEPReq+0x324>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d02a      	beq.n	80067fc <USBD_StdEPReq+0x80>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f040 817a 	bne.w	8006aa0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fe83 	bl	80064bc <USBD_CoreFindEP>
 80067b6:	4603      	mov	r3, r0
 80067b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ba:	7b7b      	ldrb	r3, [r7, #13]
 80067bc:	2bff      	cmp	r3, #255	; 0xff
 80067be:	f000 8174 	beq.w	8006aaa <USBD_StdEPReq+0x32e>
 80067c2:	7b7b      	ldrb	r3, [r7, #13]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 8170 	bne.w	8006aaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067ca:	7b7a      	ldrb	r2, [r7, #13]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067d2:	7b7a      	ldrb	r2, [r7, #13]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32ae      	adds	r2, #174	; 0xae
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8163 	beq.w	8006aaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067e4:	7b7a      	ldrb	r2, [r7, #13]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	; 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067fa:	e156      	b.n	8006aaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d008      	beq.n	8006816 <USBD_StdEPReq+0x9a>
 8006804:	2b03      	cmp	r3, #3
 8006806:	f300 8145 	bgt.w	8006a94 <USBD_StdEPReq+0x318>
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 809b 	beq.w	8006946 <USBD_StdEPReq+0x1ca>
 8006810:	2b01      	cmp	r3, #1
 8006812:	d03c      	beq.n	800688e <USBD_StdEPReq+0x112>
 8006814:	e13e      	b.n	8006a94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d002      	beq.n	8006828 <USBD_StdEPReq+0xac>
 8006822:	2b03      	cmp	r3, #3
 8006824:	d016      	beq.n	8006854 <USBD_StdEPReq+0xd8>
 8006826:	e02c      	b.n	8006882 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <USBD_StdEPReq+0xce>
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d00a      	beq.n	800684a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f8cf 	bl	80079dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800683e:	2180      	movs	r1, #128	; 0x80
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f8cb 	bl	80079dc <USBD_LL_StallEP>
 8006846:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006848:	e020      	b.n	800688c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc7a 	bl	8007146 <USBD_CtlError>
              break;
 8006852:	e01b      	b.n	800688c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	885b      	ldrh	r3, [r3, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10e      	bne.n	800687a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <USBD_StdEPReq+0xfe>
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d008      	beq.n	800687a <USBD_StdEPReq+0xfe>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	88db      	ldrh	r3, [r3, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 f8b1 	bl	80079dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fd2e 	bl	80072dc <USBD_CtlSendStatus>

              break;
 8006880:	e004      	b.n	800688c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc5e 	bl	8007146 <USBD_CtlError>
              break;
 800688a:	bf00      	nop
          }
          break;
 800688c:	e107      	b.n	8006a9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d002      	beq.n	80068a0 <USBD_StdEPReq+0x124>
 800689a:	2b03      	cmp	r3, #3
 800689c:	d016      	beq.n	80068cc <USBD_StdEPReq+0x150>
 800689e:	e04b      	b.n	8006938 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <USBD_StdEPReq+0x146>
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d00a      	beq.n	80068c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 f893 	bl	80079dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068b6:	2180      	movs	r1, #128	; 0x80
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 f88f 	bl	80079dc <USBD_LL_StallEP>
 80068be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068c0:	e040      	b.n	8006944 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fc3e 	bl	8007146 <USBD_CtlError>
              break;
 80068ca:	e03b      	b.n	8006944 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d136      	bne.n	8006942 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f899 	bl	8007a1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fcf7 	bl	80072dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fde2 	bl	80064bc <USBD_CoreFindEP>
 80068f8:	4603      	mov	r3, r0
 80068fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068fc:	7b7b      	ldrb	r3, [r7, #13]
 80068fe:	2bff      	cmp	r3, #255	; 0xff
 8006900:	d01f      	beq.n	8006942 <USBD_StdEPReq+0x1c6>
 8006902:	7b7b      	ldrb	r3, [r7, #13]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11c      	bne.n	8006942 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006908:	7b7a      	ldrb	r2, [r7, #13]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006910:	7b7a      	ldrb	r2, [r7, #13]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32ae      	adds	r2, #174	; 0xae
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d010      	beq.n	8006942 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006920:	7b7a      	ldrb	r2, [r7, #13]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32ae      	adds	r2, #174	; 0xae
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006936:	e004      	b.n	8006942 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fc03 	bl	8007146 <USBD_CtlError>
              break;
 8006940:	e000      	b.n	8006944 <USBD_StdEPReq+0x1c8>
              break;
 8006942:	bf00      	nop
          }
          break;
 8006944:	e0ab      	b.n	8006a9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d002      	beq.n	8006958 <USBD_StdEPReq+0x1dc>
 8006952:	2b03      	cmp	r3, #3
 8006954:	d032      	beq.n	80069bc <USBD_StdEPReq+0x240>
 8006956:	e097      	b.n	8006a88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <USBD_StdEPReq+0x1f2>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b80      	cmp	r3, #128	; 0x80
 8006962:	d004      	beq.n	800696e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fbed 	bl	8007146 <USBD_CtlError>
                break;
 800696c:	e091      	b.n	8006a92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800696e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0b      	bge.n	800698e <USBD_StdEPReq+0x212>
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	3310      	adds	r3, #16
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	3304      	adds	r3, #4
 800698c:	e00b      	b.n	80069a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	3304      	adds	r3, #4
 80069a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2202      	movs	r2, #2
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc37 	bl	8007228 <USBD_CtlSendData>
              break;
 80069ba:	e06a      	b.n	8006a92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da11      	bge.n	80069e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	f003 020f 	and.w	r2, r3, #15
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	3324      	adds	r3, #36	; 0x24
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d117      	bne.n	8006a0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fbb0 	bl	8007146 <USBD_CtlError>
                  break;
 80069e6:	e054      	b.n	8006a92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	f003 020f 	and.w	r2, r3, #15
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb9d 	bl	8007146 <USBD_CtlError>
                  break;
 8006a0c:	e041      	b.n	8006a92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	da0b      	bge.n	8006a2e <USBD_StdEPReq+0x2b2>
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	3310      	adds	r3, #16
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	e00b      	b.n	8006a46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4413      	add	r3, r2
 8006a44:	3304      	adds	r3, #4
 8006a46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <USBD_StdEPReq+0x2d8>
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d103      	bne.n	8006a5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e00e      	b.n	8006a7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fff9 	bl	8007a58 <USBD_LL_IsStallEP>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fbd1 	bl	8007228 <USBD_CtlSendData>
              break;
 8006a86:	e004      	b.n	8006a92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb5b 	bl	8007146 <USBD_CtlError>
              break;
 8006a90:	bf00      	nop
          }
          break;
 8006a92:	e004      	b.n	8006a9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb55 	bl	8007146 <USBD_CtlError>
          break;
 8006a9c:	bf00      	nop
      }
      break;
 8006a9e:	e005      	b.n	8006aac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fb4f 	bl	8007146 <USBD_CtlError>
      break;
 8006aa8:	e000      	b.n	8006aac <USBD_StdEPReq+0x330>
      break;
 8006aaa:	bf00      	nop
  }

  return ret;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	f200 8128 	bhi.w	8006d2e <USBD_GetDescriptor+0x276>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <USBD_GetDescriptor+0x2c>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b19 	.word	0x08006b19
 8006aec:	08006b59 	.word	0x08006b59
 8006af0:	08006d2f 	.word	0x08006d2f
 8006af4:	08006d2f 	.word	0x08006d2f
 8006af8:	08006ccf 	.word	0x08006ccf
 8006afc:	08006cfb 	.word	0x08006cfb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7c12      	ldrb	r2, [r2, #16]
 8006b0c:	f107 0108 	add.w	r1, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
      break;
 8006b16:	e112      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7c1b      	ldrb	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	f107 0208 	add.w	r2, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	2202      	movs	r2, #2
 8006b38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b3a:	e100      	b.n	8006d3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	f107 0208 	add.w	r2, r7, #8
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	2202      	movs	r2, #2
 8006b54:	701a      	strb	r2, [r3, #0]
      break;
 8006b56:	e0f2      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	f200 80ac 	bhi.w	8006cbc <USBD_GetDescriptor+0x204>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <USBD_GetDescriptor+0xb4>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b85 	.word	0x08006b85
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006c21 	.word	0x08006c21
 8006b7c:	08006c55 	.word	0x08006c55
 8006b80:	08006c89 	.word	0x08006c89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7c12      	ldrb	r2, [r2, #16]
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ba6:	e091      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 facb 	bl	8007146 <USBD_CtlError>
            err++;
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bb6:	e089      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7c12      	ldrb	r2, [r2, #16]
 8006bd0:	f107 0108 	add.w	r1, r7, #8
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bda:	e077      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fab1 	bl	8007146 <USBD_CtlError>
            err++;
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	3301      	adds	r3, #1
 8006be8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bea:	e06f      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0e:	e05d      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa97 	bl	8007146 <USBD_CtlError>
            err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1e:	e055      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	7c12      	ldrb	r2, [r2, #16]
 8006c38:	f107 0108 	add.w	r1, r7, #8
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4798      	blx	r3
 8006c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c42:	e043      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa7d 	bl	8007146 <USBD_CtlError>
            err++;
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	72fb      	strb	r3, [r7, #11]
          break;
 8006c52:	e03b      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	7c12      	ldrb	r2, [r2, #16]
 8006c6c:	f107 0108 	add.w	r1, r7, #8
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
 8006c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c76:	e029      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa63 	bl	8007146 <USBD_CtlError>
            err++;
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	3301      	adds	r3, #1
 8006c84:	72fb      	strb	r3, [r7, #11]
          break;
 8006c86:	e021      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7c12      	ldrb	r2, [r2, #16]
 8006ca0:	f107 0108 	add.w	r1, r7, #8
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006caa:	e00f      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa49 	bl	8007146 <USBD_CtlError>
            err++;
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cba:	e007      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa41 	bl	8007146 <USBD_CtlError>
          err++;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006cca:	bf00      	nop
      }
      break;
 8006ccc:	e037      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7c1b      	ldrb	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	f107 0208 	add.w	r2, r7, #8
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4798      	blx	r3
 8006ce6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ce8:	e029      	b.n	8006d3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa2a 	bl	8007146 <USBD_CtlError>
        err++;
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8006cf8:	e021      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7c1b      	ldrb	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	f107 0208 	add.w	r2, r7, #8
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4798      	blx	r3
 8006d12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	2207      	movs	r2, #7
 8006d1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d1c:	e00f      	b.n	8006d3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fa10 	bl	8007146 <USBD_CtlError>
        err++;
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d2c:	e007      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa08 	bl	8007146 <USBD_CtlError>
      err++;
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d3c:	bf00      	nop
  }

  if (err != 0U)
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11e      	bne.n	8006d82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	88db      	ldrh	r3, [r3, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d016      	beq.n	8006d7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d4c:	893b      	ldrh	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	88da      	ldrh	r2, [r3, #6]
 8006d56:	893b      	ldrh	r3, [r7, #8]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bf28      	it	cs
 8006d5c:	4613      	movcs	r3, r2
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d62:	893b      	ldrh	r3, [r7, #8]
 8006d64:	461a      	mov	r2, r3
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa5d 	bl	8007228 <USBD_CtlSendData>
 8006d6e:	e009      	b.n	8006d84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9e7 	bl	8007146 <USBD_CtlError>
 8006d78:	e004      	b.n	8006d84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 faae 	bl	80072dc <USBD_CtlSendStatus>
 8006d80:	e000      	b.n	8006d84 <USBD_GetDescriptor+0x2cc>
    return;
 8006d82:	bf00      	nop
  }
}
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop

08006d8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	889b      	ldrh	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d131      	bne.n	8006e02 <USBD_SetAddress+0x76>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	88db      	ldrh	r3, [r3, #6]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d12d      	bne.n	8006e02 <USBD_SetAddress+0x76>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dac:	d829      	bhi.n	8006e02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d104      	bne.n	8006dd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f9bc 	bl	8007146 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dce:	e01d      	b.n	8006e0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7bfa      	ldrb	r2, [r7, #15]
 8006dd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fe67 	bl	8007ab0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa7a 	bl	80072dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df6:	e009      	b.n	8006e0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	e004      	b.n	8006e0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f99e 	bl	8007146 <USBD_CtlError>
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	4b4e      	ldr	r3, [pc, #312]	; (8006f64 <USBD_SetConfig+0x150>)
 8006e2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e2c:	4b4d      	ldr	r3, [pc, #308]	; (8006f64 <USBD_SetConfig+0x150>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d905      	bls.n	8006e40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f985 	bl	8007146 <USBD_CtlError>
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e08c      	b.n	8006f5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d002      	beq.n	8006e52 <USBD_SetConfig+0x3e>
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d029      	beq.n	8006ea4 <USBD_SetConfig+0x90>
 8006e50:	e075      	b.n	8006f3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e52:	4b44      	ldr	r3, [pc, #272]	; (8006f64 <USBD_SetConfig+0x150>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d020      	beq.n	8006e9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e5a:	4b42      	ldr	r3, [pc, #264]	; (8006f64 <USBD_SetConfig+0x150>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e64:	4b3f      	ldr	r3, [pc, #252]	; (8006f64 <USBD_SetConfig+0x150>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fe ffe7 	bl	8005e3e <USBD_SetClassConfig>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f962 	bl	8007146 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e8a:	e065      	b.n	8006f58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa25 	bl	80072dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2203      	movs	r2, #3
 8006e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e9a:	e05d      	b.n	8006f58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa1d 	bl	80072dc <USBD_CtlSendStatus>
      break;
 8006ea2:	e059      	b.n	8006f58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	; (8006f64 <USBD_SetConfig+0x150>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d112      	bne.n	8006ed2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	; (8006f64 <USBD_SetConfig+0x150>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ebe:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <USBD_SetConfig+0x150>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fe ffd6 	bl	8005e76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa06 	bl	80072dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ed0:	e042      	b.n	8006f58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ed2:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <USBD_SetConfig+0x150>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d02a      	beq.n	8006f36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe ffc4 	bl	8005e76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006eee:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <USBD_SetConfig+0x150>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <USBD_SetConfig+0x150>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fe ff9d 	bl	8005e3e <USBD_SetClassConfig>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f918 	bl	8007146 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe ffa9 	bl	8005e76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f2c:	e014      	b.n	8006f58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9d4 	bl	80072dc <USBD_CtlSendStatus>
      break;
 8006f34:	e010      	b.n	8006f58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f9d0 	bl	80072dc <USBD_CtlSendStatus>
      break;
 8006f3c:	e00c      	b.n	8006f58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f900 	bl	8007146 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f46:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <USBD_SetConfig+0x150>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fe ff92 	bl	8005e76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f52:	2303      	movs	r3, #3
 8006f54:	73fb      	strb	r3, [r7, #15]
      break;
 8006f56:	bf00      	nop
  }

  return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200002d8 	.word	0x200002d8

08006f68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	88db      	ldrh	r3, [r3, #6]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d004      	beq.n	8006f84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f8e2 	bl	8007146 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f82:	e023      	b.n	8006fcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	dc02      	bgt.n	8006f96 <USBD_GetConfig+0x2e>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dc03      	bgt.n	8006f9c <USBD_GetConfig+0x34>
 8006f94:	e015      	b.n	8006fc2 <USBD_GetConfig+0x5a>
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d00b      	beq.n	8006fb2 <USBD_GetConfig+0x4a>
 8006f9a:	e012      	b.n	8006fc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f93c 	bl	8007228 <USBD_CtlSendData>
        break;
 8006fb0:	e00c      	b.n	8006fcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f934 	bl	8007228 <USBD_CtlSendData>
        break;
 8006fc0:	e004      	b.n	8006fcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f8be 	bl	8007146 <USBD_CtlError>
        break;
 8006fca:	bf00      	nop
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d81e      	bhi.n	800702a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	88db      	ldrh	r3, [r3, #6]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d004      	beq.n	8006ffe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8a5 	bl	8007146 <USBD_CtlError>
        break;
 8006ffc:	e01a      	b.n	8007034 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f043 0202 	orr.w	r2, r3, #2
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	330c      	adds	r3, #12
 800701e:	2202      	movs	r2, #2
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f900 	bl	8007228 <USBD_CtlSendData>
      break;
 8007028:	e004      	b.n	8007034 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f88a 	bl	8007146 <USBD_CtlError>
      break;
 8007032:	bf00      	nop
  }
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d107      	bne.n	800705e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f940 	bl	80072dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800705c:	e013      	b.n	8007086 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d10b      	bne.n	800707e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	889b      	ldrh	r3, [r3, #4]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	b29b      	uxth	r3, r3
 800706e:	b2da      	uxtb	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f930 	bl	80072dc <USBD_CtlSendStatus>
}
 800707c:	e003      	b.n	8007086 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f860 	bl	8007146 <USBD_CtlError>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d80b      	bhi.n	80070be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d10c      	bne.n	80070c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f910 	bl	80072dc <USBD_CtlSendStatus>
      }
      break;
 80070bc:	e004      	b.n	80070c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f840 	bl	8007146 <USBD_CtlError>
      break;
 80070c6:	e000      	b.n	80070ca <USBD_ClrFeature+0x3c>
      break;
 80070c8:	bf00      	nop
  }
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fa41 	bl	8006584 <SWAPBYTE>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fa34 	bl	8006584 <SWAPBYTE>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fa27 	bl	8006584 <SWAPBYTE>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	80da      	strh	r2, [r3, #6]
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc42 	bl	80079dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007158:	2100      	movs	r1, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fc3e 	bl	80079dc <USBD_LL_StallEP>
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d036      	beq.n	80071ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007182:	6938      	ldr	r0, [r7, #16]
 8007184:	f000 f836 	bl	80071f4 <USBD_GetLen>
 8007188:	4603      	mov	r3, r0
 800718a:	3301      	adds	r3, #1
 800718c:	b29b      	uxth	r3, r3
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	4413      	add	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	3301      	adds	r3, #1
 80071a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4413      	add	r3, r2
 80071ae:	2203      	movs	r2, #3
 80071b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	3301      	adds	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071b8:	e013      	b.n	80071e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4413      	add	r3, r2
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
    idx++;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	3301      	adds	r3, #1
 80071d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4413      	add	r3, r2
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
    idx++;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	3301      	adds	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e7      	bne.n	80071ba <USBD_GetString+0x52>
 80071ea:	e000      	b.n	80071ee <USBD_GetString+0x86>
    return;
 80071ec:	bf00      	nop
  }
}
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007204:	e005      	b.n	8007212 <USBD_GetLen+0x1e>
  {
    len++;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	3301      	adds	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	3301      	adds	r3, #1
 8007210:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f5      	bne.n	8007206 <USBD_GetLen+0x12>
  }

  return len;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2202      	movs	r2, #2
 8007238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	2100      	movs	r1, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fc4d 	bl	8007aee <USBD_LL_Transmit>

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	2100      	movs	r1, #0
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fc3c 	bl	8007aee <USBD_LL_Transmit>

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2203      	movs	r2, #3
 8007290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fc40 	bl	8007b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	2100      	movs	r1, #0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fc2f 	bl	8007b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ec:	2300      	movs	r3, #0
 80072ee:	2200      	movs	r2, #0
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fbfb 	bl	8007aee <USBD_LL_Transmit>

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc09 	bl	8007b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800732c:	2200      	movs	r2, #0
 800732e:	4912      	ldr	r1, [pc, #72]	; (8007378 <MX_USB_DEVICE_Init+0x50>)
 8007330:	4812      	ldr	r0, [pc, #72]	; (800737c <MX_USB_DEVICE_Init+0x54>)
 8007332:	f7fe fd07 	bl	8005d44 <USBD_Init>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800733c:	f7f9 fa28 	bl	8000790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007340:	490f      	ldr	r1, [pc, #60]	; (8007380 <MX_USB_DEVICE_Init+0x58>)
 8007342:	480e      	ldr	r0, [pc, #56]	; (800737c <MX_USB_DEVICE_Init+0x54>)
 8007344:	f7fe fd2e 	bl	8005da4 <USBD_RegisterClass>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800734e:	f7f9 fa1f 	bl	8000790 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007352:	490c      	ldr	r1, [pc, #48]	; (8007384 <MX_USB_DEVICE_Init+0x5c>)
 8007354:	4809      	ldr	r0, [pc, #36]	; (800737c <MX_USB_DEVICE_Init+0x54>)
 8007356:	f7fe fcdb 	bl	8005d10 <USBD_CUSTOM_HID_RegisterInterface>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007360:	f7f9 fa16 	bl	8000790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007364:	4805      	ldr	r0, [pc, #20]	; (800737c <MX_USB_DEVICE_Init+0x54>)
 8007366:	f7fe fd53 	bl	8005e10 <USBD_Start>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007370:	f7f9 fa0e 	bl	8000790 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007374:	bf00      	nop
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200000bc 	.word	0x200000bc
 800737c:	200002dc 	.word	0x200002dc
 8007380:	2000000c 	.word	0x2000000c
 8007384:	200000ac 	.word	0x200000ac

08007388 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800738c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800738e:	4618      	mov	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800739c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	460a      	mov	r2, r1
 80073b2:	71fb      	strb	r3, [r7, #7]
 80073b4:	4613      	mov	r3, r2
 80073b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <CUSTOM_HID_OutEvent_FS+0x2c>)
 80073ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073be:	60fb      	str	r3, [r7, #12]

	AddUsbRxBuffer(hhid->Report_buf);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f9 fbb6 	bl	8000b34 <AddUsbRxBuffer>
  return (USBD_OK);
 80073c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200002dc 	.word	0x200002dc

080073d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2212      	movs	r2, #18
 80073e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073ea:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	200000d8 	.word	0x200000d8

080073fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2204      	movs	r2, #4
 800740c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	200000ec 	.word	0x200000ec

08007420 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d105      	bne.n	800743e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4907      	ldr	r1, [pc, #28]	; (8007454 <USBD_FS_ProductStrDescriptor+0x34>)
 8007436:	4808      	ldr	r0, [pc, #32]	; (8007458 <USBD_FS_ProductStrDescriptor+0x38>)
 8007438:	f7ff fe96 	bl	8007168 <USBD_GetString>
 800743c:	e004      	b.n	8007448 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	4904      	ldr	r1, [pc, #16]	; (8007454 <USBD_FS_ProductStrDescriptor+0x34>)
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <USBD_FS_ProductStrDescriptor+0x38>)
 8007444:	f7ff fe90 	bl	8007168 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	200005b8 	.word	0x200005b8
 8007458:	08007c6c 	.word	0x08007c6c

0800745c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	4904      	ldr	r1, [pc, #16]	; (800747c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800746c:	4804      	ldr	r0, [pc, #16]	; (8007480 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800746e:	f7ff fe7b 	bl	8007168 <USBD_GetString>
  return USBD_StrDesc;
 8007472:	4b02      	ldr	r3, [pc, #8]	; (800747c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200005b8 	.word	0x200005b8
 8007480:	08007c8c 	.word	0x08007c8c

08007484 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	221a      	movs	r2, #26
 8007494:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007496:	f000 f843 	bl	8007520 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800749a:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200000f0 	.word	0x200000f0

080074a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80074be:	4808      	ldr	r0, [pc, #32]	; (80074e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074c0:	f7ff fe52 	bl	8007168 <USBD_GetString>
 80074c4:	e004      	b.n	80074d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ca:	4805      	ldr	r0, [pc, #20]	; (80074e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074cc:	f7ff fe4c 	bl	8007168 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200005b8 	.word	0x200005b8
 80074e0:	08007ca0 	.word	0x08007ca0

080074e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d105      	bne.n	8007502 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4907      	ldr	r1, [pc, #28]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074fa:	4808      	ldr	r0, [pc, #32]	; (800751c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074fc:	f7ff fe34 	bl	8007168 <USBD_GetString>
 8007500:	e004      	b.n	800750c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	4904      	ldr	r1, [pc, #16]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007506:	4805      	ldr	r0, [pc, #20]	; (800751c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007508:	f7ff fe2e 	bl	8007168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	200005b8 	.word	0x200005b8
 800751c:	08007cb4 	.word	0x08007cb4

08007520 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <Get_SerialNum+0x44>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <Get_SerialNum+0x48>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007532:	4b0e      	ldr	r3, [pc, #56]	; (800756c <Get_SerialNum+0x4c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007546:	2208      	movs	r2, #8
 8007548:	4909      	ldr	r1, [pc, #36]	; (8007570 <Get_SerialNum+0x50>)
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f814 	bl	8007578 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007550:	2204      	movs	r2, #4
 8007552:	4908      	ldr	r1, [pc, #32]	; (8007574 <Get_SerialNum+0x54>)
 8007554:	68b8      	ldr	r0, [r7, #8]
 8007556:	f000 f80f 	bl	8007578 <IntToUnicode>
  }
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	1fff7a10 	.word	0x1fff7a10
 8007568:	1fff7a14 	.word	0x1fff7a14
 800756c:	1fff7a18 	.word	0x1fff7a18
 8007570:	200000f2 	.word	0x200000f2
 8007574:	20000102 	.word	0x20000102

08007578 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
 800758e:	e027      	b.n	80075e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	0f1b      	lsrs	r3, r3, #28
 8007594:	2b09      	cmp	r3, #9
 8007596:	d80b      	bhi.n	80075b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0f1b      	lsrs	r3, r3, #28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4619      	mov	r1, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	440b      	add	r3, r1
 80075a8:	3230      	adds	r2, #48	; 0x30
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e00a      	b.n	80075c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	0f1b      	lsrs	r3, r3, #28
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	4619      	mov	r1, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	440b      	add	r3, r1
 80075c0:	3237      	adds	r2, #55	; 0x37
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	3301      	adds	r3, #1
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	3301      	adds	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]
 80075e0:	7dfa      	ldrb	r2, [r7, #23]
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3d3      	bcc.n	8007590 <IntToUnicode+0x18>
  }
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	609a      	str	r2, [r3, #8]
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007618:	d13a      	bne.n	8007690 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	6313      	str	r3, [r2, #48]	; 0x30
 800762a:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007636:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800763a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763c:	2302      	movs	r3, #2
 800763e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007644:	2303      	movs	r3, #3
 8007646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007648:	230a      	movs	r3, #10
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	4619      	mov	r1, r3
 8007652:	4812      	ldr	r0, [pc, #72]	; (800769c <HAL_PCD_MspInit+0xa4>)
 8007654:	f7fa fab8 	bl	8001bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	4a0e      	ldr	r2, [pc, #56]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	6353      	str	r3, [r2, #52]	; 0x34
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 800766e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007672:	6453      	str	r3, [r2, #68]	; 0x44
 8007674:	4b08      	ldr	r3, [pc, #32]	; (8007698 <HAL_PCD_MspInit+0xa0>)
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007680:	2200      	movs	r2, #0
 8007682:	2100      	movs	r1, #0
 8007684:	2043      	movs	r0, #67	; 0x43
 8007686:	f7fa fa68 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800768a:	2043      	movs	r0, #67	; 0x43
 800768c:	f7fa fa81 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007690:	bf00      	nop
 8007692:	3728      	adds	r7, #40	; 0x28
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40023800 	.word	0x40023800
 800769c:	40020000 	.word	0x40020000

080076a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe fbf7 	bl	8005eaa <USBD_LL_SetupStage>
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f7fe fc31 	bl	8005f54 <USBD_LL_DataOutStage>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	334c      	adds	r3, #76	; 0x4c
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	4619      	mov	r1, r3
 8007722:	f7fe fcca 	bl	80060ba <USBD_LL_DataInStage>
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fdfe 	bl	800633e <USBD_LL_SOF>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007752:	2301      	movs	r3, #1
 8007754:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
 8007762:	e008      	b.n	8007776 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d102      	bne.n	8007772 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
 8007770:	e001      	b.n	8007776 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007772:	f7f9 f80d 	bl	8000790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800777c:	7bfa      	ldrb	r2, [r7, #15]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fd9e 	bl	80062c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fd46 	bl	800621e <USBD_LL_Reset>
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fd99 	bl	80062e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077d0:	4b04      	ldr	r3, [pc, #16]	; (80077e4 <HAL_PCD_SuspendCallback+0x48>)
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	4a03      	ldr	r2, [pc, #12]	; (80077e4 <HAL_PCD_SuspendCallback+0x48>)
 80077d6:	f043 0306 	orr.w	r3, r3, #6
 80077da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	e000ed00 	.word	0xe000ed00

080077e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fd89 	bl	800630e <USBD_LL_Resume>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fde1 	bl	80063e2 <USBD_LL_IsoOUTIncomplete>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fd9d 	bl	800637e <USBD_LL_IsoINIncomplete>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fdf3 	bl	8006446 <USBD_LL_DevConnected>
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fdf0 	bl	800645c <USBD_LL_DevDisconnected>
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d13c      	bne.n	800790e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007894:	4a20      	ldr	r2, [pc, #128]	; (8007918 <USBD_LL_Init+0x94>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a1e      	ldr	r2, [pc, #120]	; (8007918 <USBD_LL_Init+0x94>)
 80078a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078a4:	4b1c      	ldr	r3, [pc, #112]	; (8007918 <USBD_LL_Init+0x94>)
 80078a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078ac:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <USBD_LL_Init+0x94>)
 80078ae:	2204      	movs	r2, #4
 80078b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078b2:	4b19      	ldr	r3, [pc, #100]	; (8007918 <USBD_LL_Init+0x94>)
 80078b4:	2202      	movs	r2, #2
 80078b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078b8:	4b17      	ldr	r3, [pc, #92]	; (8007918 <USBD_LL_Init+0x94>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078be:	4b16      	ldr	r3, [pc, #88]	; (8007918 <USBD_LL_Init+0x94>)
 80078c0:	2202      	movs	r2, #2
 80078c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078c4:	4b14      	ldr	r3, [pc, #80]	; (8007918 <USBD_LL_Init+0x94>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078ca:	4b13      	ldr	r3, [pc, #76]	; (8007918 <USBD_LL_Init+0x94>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078d0:	4b11      	ldr	r3, [pc, #68]	; (8007918 <USBD_LL_Init+0x94>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <USBD_LL_Init+0x94>)
 80078d8:	2200      	movs	r2, #0
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <USBD_LL_Init+0x94>)
 80078de:	2200      	movs	r2, #0
 80078e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078e2:	480d      	ldr	r0, [pc, #52]	; (8007918 <USBD_LL_Init+0x94>)
 80078e4:	f7fa fb61 	bl	8001faa <HAL_PCD_Init>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078ee:	f7f8 ff4f 	bl	8000790 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078f2:	2180      	movs	r1, #128	; 0x80
 80078f4:	4808      	ldr	r0, [pc, #32]	; (8007918 <USBD_LL_Init+0x94>)
 80078f6:	f7fb fda0 	bl	800343a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078fa:	2240      	movs	r2, #64	; 0x40
 80078fc:	2100      	movs	r1, #0
 80078fe:	4806      	ldr	r0, [pc, #24]	; (8007918 <USBD_LL_Init+0x94>)
 8007900:	f7fb fd54 	bl	80033ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007904:	2280      	movs	r2, #128	; 0x80
 8007906:	2101      	movs	r1, #1
 8007908:	4803      	ldr	r0, [pc, #12]	; (8007918 <USBD_LL_Init+0x94>)
 800790a:	f7fb fd4f 	bl	80033ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200007b8 	.word	0x200007b8

0800791c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa fc56 	bl	80021e4 <HAL_PCD_Start>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f930 	bl	8007ba4 <USBD_Get_USB_Status>
 8007944:	4603      	mov	r3, r0
 8007946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007948:	7bbb      	ldrb	r3, [r7, #14]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	4608      	mov	r0, r1
 800795c:	4611      	mov	r1, r2
 800795e:	461a      	mov	r2, r3
 8007960:	4603      	mov	r3, r0
 8007962:	70fb      	strb	r3, [r7, #3]
 8007964:	460b      	mov	r3, r1
 8007966:	70bb      	strb	r3, [r7, #2]
 8007968:	4613      	mov	r3, r2
 800796a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800797a:	78bb      	ldrb	r3, [r7, #2]
 800797c:	883a      	ldrh	r2, [r7, #0]
 800797e:	78f9      	ldrb	r1, [r7, #3]
 8007980:	f7fb f927 	bl	8002bd2 <HAL_PCD_EP_Open>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f90a 	bl	8007ba4 <USBD_Get_USB_Status>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007994:	7bbb      	ldrb	r3, [r7, #14]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fb f970 	bl	8002ca2 <HAL_PCD_EP_Close>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f8eb 	bl	8007ba4 <USBD_Get_USB_Status>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fb fa30 	bl	8002e60 <HAL_PCD_EP_SetStall>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f8cc 	bl	8007ba4 <USBD_Get_USB_Status>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fb fa75 	bl	8002f28 <HAL_PCD_EP_ClrStall>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 f8ad 	bl	8007ba4 <USBD_Get_USB_Status>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da0b      	bge.n	8007a8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	333e      	adds	r3, #62	; 0x3e
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	e00b      	b.n	8007aa4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007aa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fb f85a 	bl	8002b88 <HAL_PCD_SetAddress>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 f862 	bl	8007ba4 <USBD_Get_USB_Status>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b086      	sub	sp, #24
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	460b      	mov	r3, r1
 8007afc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b0c:	7af9      	ldrb	r1, [r7, #11]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	f7fb f95b 	bl	8002dcc <HAL_PCD_EP_Transmit>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 f841 	bl	8007ba4 <USBD_Get_USB_Status>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b4e:	7af9      	ldrb	r1, [r7, #11]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	f7fb f8ef 	bl	8002d36 <HAL_PCD_EP_Receive>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f820 	bl	8007ba4 <USBD_Get_USB_Status>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b68:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007b7c:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <USBD_static_malloc+0x18>)
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000cc4 	.word	0x20000cc4

08007b90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d817      	bhi.n	8007be8 <USBD_Get_USB_Status+0x44>
 8007bb8:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <USBD_Get_USB_Status+0x1c>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007bd7 	.word	0x08007bd7
 8007bc8:	08007bdd 	.word	0x08007bdd
 8007bcc:	08007be3 	.word	0x08007be3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd4:	e00b      	b.n	8007bee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bda:	e008      	b.n	8007bee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
    break;
 8007be0:	e005      	b.n	8007bee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007be2:	2303      	movs	r3, #3
 8007be4:	73fb      	strb	r3, [r7, #15]
    break;
 8007be6:	e002      	b.n	8007bee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007be8:	2303      	movs	r3, #3
 8007bea:	73fb      	strb	r3, [r7, #15]
    break;
 8007bec:	bf00      	nop
  }
  return usb_status;
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	4d0d      	ldr	r5, [pc, #52]	; (8007c34 <__libc_init_array+0x38>)
 8007c00:	4c0d      	ldr	r4, [pc, #52]	; (8007c38 <__libc_init_array+0x3c>)
 8007c02:	1b64      	subs	r4, r4, r5
 8007c04:	10a4      	asrs	r4, r4, #2
 8007c06:	2600      	movs	r6, #0
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	4d0b      	ldr	r5, [pc, #44]	; (8007c3c <__libc_init_array+0x40>)
 8007c0e:	4c0c      	ldr	r4, [pc, #48]	; (8007c40 <__libc_init_array+0x44>)
 8007c10:	f000 f820 	bl	8007c54 <_init>
 8007c14:	1b64      	subs	r4, r4, r5
 8007c16:	10a4      	asrs	r4, r4, #2
 8007c18:	2600      	movs	r6, #0
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	08007ce4 	.word	0x08007ce4
 8007c38:	08007ce4 	.word	0x08007ce4
 8007c3c:	08007ce4 	.word	0x08007ce4
 8007c40:	08007ce8 	.word	0x08007ce8

08007c44 <memset>:
 8007c44:	4402      	add	r2, r0
 8007c46:	4603      	mov	r3, r0
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d100      	bne.n	8007c4e <memset+0xa>
 8007c4c:	4770      	bx	lr
 8007c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c52:	e7f9      	b.n	8007c48 <memset+0x4>

08007c54 <_init>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr

08007c60 <_fini>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr
