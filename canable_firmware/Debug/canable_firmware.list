
canable_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008428  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008640  08008640  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008648  08008648  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800864c  0800864c  0001864c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08008650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020118  2**0
                  CONTENTS
 10 .bss          00000df8  20000118  20000118  00020118  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f10  20000f10  00020118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012348  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a6  00000000  00000000  00032490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00035b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  000369a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255a3  00000000  00000000  00037670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014cd2  00000000  00000000  0005cc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c705c  00000000  00000000  000718e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138941  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038fc  00000000  00000000  00138994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008598 	.word	0x08008598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	08008598 	.word	0x08008598

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <PollingRoutine>:

/*
 *  Description: The main entry point. Typically in all my projects I call this routine from main all do all my polling here, if i am not using Tasks.
 *
 */
void PollingRoutine(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	PortD_On(Led_Green_Pin);
 80004d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80004d4:	f000 fd88 	bl	8000fe8 <PortD_On>
	// polling is currently done in Tasks
	ParseUsbRec();
 80004d8:	f000 f864 	bl	80005a4 <ParseUsbRec>
	SendCanTxMessage1(&hcan1);
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <PollingRoutine+0x28>)
 80004de:	f000 fc4f 	bl	8000d80 <SendCanTxMessage1>
	ParseCanRec();
 80004e2:	f000 f94c 	bl	800077e <ParseCanRec>
	SendUsbMessage();
 80004e6:	f000 fdff 	bl	80010e8 <SendUsbMessage>
	BlinkkLed();
 80004ea:	f000 f805 	bl	80004f8 <BlinkkLed>

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000013c 	.word	0x2000013c

080004f8 <BlinkkLed>:

/*
 * function: blink blue led when there is CAN bus activity
 *
 */
void BlinkkLed(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	switch(ledBlinkMode)  {
 80004fc:	4b26      	ldr	r3, [pc, #152]	; (8000598 <BlinkkLed+0xa0>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d030      	beq.n	8000566 <BlinkkLed+0x6e>
 8000504:	2b02      	cmp	r3, #2
 8000506:	dc45      	bgt.n	8000594 <BlinkkLed+0x9c>
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <BlinkkLed+0x1a>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d012      	beq.n	8000536 <BlinkkLed+0x3e>
			ledBlinkMode = 0;
			currentHalCount = 0;
		}
		break;
	}
}
 8000510:	e040      	b.n	8000594 <BlinkkLed+0x9c>
		if(canBusActive) {
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <BlinkkLed+0xa4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d037      	beq.n	800058a <BlinkkLed+0x92>
			canBusActive = 0;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <BlinkkLed+0xa4>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
			PortB_On(Led_Blue_Pin);
 8000520:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000524:	f000 fd3c 	bl	8000fa0 <PortB_On>
			ledBlinkMode++;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <BlinkkLed+0xa0>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <BlinkkLed+0xa0>)
 8000532:	701a      	strb	r2, [r3, #0]
		break;
 8000534:	e029      	b.n	800058a <BlinkkLed+0x92>
		if(++currentHalCount > 2000) {
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <BlinkkLed+0xa8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <BlinkkLed+0xa8>)
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <BlinkkLed+0xa8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000548:	d921      	bls.n	800058e <BlinkkLed+0x96>
			PortB_Off(Led_Blue_Pin);
 800054a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800054e:	f000 fd39 	bl	8000fc4 <PortB_Off>
			ledBlinkMode++;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <BlinkkLed+0xa0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <BlinkkLed+0xa0>)
 800055c:	701a      	strb	r2, [r3, #0]
			currentHalCount = 0;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <BlinkkLed+0xa8>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
		break;
 8000564:	e013      	b.n	800058e <BlinkkLed+0x96>
		if(++currentHalCount > 50000) {
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <BlinkkLed+0xa8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <BlinkkLed+0xa8>)
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <BlinkkLed+0xa8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000578:	4293      	cmp	r3, r2
 800057a:	d90a      	bls.n	8000592 <BlinkkLed+0x9a>
			ledBlinkMode = 0;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <BlinkkLed+0xa0>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
			currentHalCount = 0;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <BlinkkLed+0xa8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
		break;
 8000588:	e003      	b.n	8000592 <BlinkkLed+0x9a>
		break;
 800058a:	bf00      	nop
 800058c:	e002      	b.n	8000594 <BlinkkLed+0x9c>
		break;
 800058e:	bf00      	nop
 8000590:	e000      	b.n	8000594 <BlinkkLed+0x9c>
		break;
 8000592:	bf00      	nop
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000135 	.word	0x20000135
 800059c:	20000134 	.word	0x20000134
 80005a0:	20000138 	.word	0x20000138

080005a4 <ParseUsbRec>:
 * function: Parse the USB data in the buffer.
 * input: none
 * output: none
 *
 */
void ParseUsbRec(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	uint8_t usbData[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE];
	if(UsbDataAvailable(usbData)) {
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fe31 	bl	8001214 <UsbDataAvailable>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01f      	beq.n	80005f8 <ParseUsbRec+0x54>
		switch(usbData[0])
 80005b8:	793b      	ldrb	r3, [r7, #4]
 80005ba:	2b95      	cmp	r3, #149	; 0x95
 80005bc:	d00c      	beq.n	80005d8 <ParseUsbRec+0x34>
 80005be:	2b95      	cmp	r3, #149	; 0x95
 80005c0:	dc1b      	bgt.n	80005fa <ParseUsbRec+0x56>
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d002      	beq.n	80005cc <ParseUsbRec+0x28>
 80005c6:	2b90      	cmp	r3, #144	; 0x90
 80005c8:	d00c      	beq.n	80005e4 <ParseUsbRec+0x40>
			SendFrequency();
			Send_CAN_BTR(&hcan1);
			break;
		}
	}
}
 80005ca:	e016      	b.n	80005fa <ParseUsbRec+0x56>
			SendUsbDataToCanBus(CAN1_NODE, usbData);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4619      	mov	r1, r3
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fe51 	bl	8001278 <SendUsbDataToCanBus>
			break;
 80005d6:	e010      	b.n	80005fa <ParseUsbRec+0x56>
			CanSnifferCanInit(&hcan1, usbData);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <ParseUsbRec+0x60>)
 80005de:	f000 f8fa 	bl	80007d6 <CanSnifferCanInit>
			break;
 80005e2:	e00a      	b.n	80005fa <ParseUsbRec+0x56>
			SendHardwareInfo();
 80005e4:	f000 f810 	bl	8000608 <SendHardwareInfo>
			SendVersionInfo();
 80005e8:	f000 f83e 	bl	8000668 <SendVersionInfo>
			SendFrequency();
 80005ec:	f000 f86c 	bl	80006c8 <SendFrequency>
			Send_CAN_BTR(&hcan1);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ParseUsbRec+0x60>)
 80005f2:	f000 f899 	bl	8000728 <Send_CAN_BTR>
			break;
 80005f6:	e000      	b.n	80005fa <ParseUsbRec+0x56>
	}
 80005f8:	bf00      	nop
}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000013c 	.word	0x2000013c

08000608 <SendHardwareInfo>:

void SendHardwareInfo(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	731a      	strb	r2, [r3, #12]
	uint8_t i = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	75fb      	strb	r3, [r7, #23]
	data[0] = COMMAND_HARDWARE;
 8000624:	2393      	movs	r3, #147	; 0x93
 8000626:	713b      	strb	r3, [r7, #4]
	while( Hardware[i] != '\0') {
 8000628:	e00d      	b.n	8000646 <SendHardwareInfo+0x3e>
		data[i + 1] = (uint8_t) Hardware[i];
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <SendHardwareInfo+0x5c>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	441a      	add	r2, r3
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3301      	adds	r3, #1
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	3318      	adds	r3, #24
 800063a:	443b      	add	r3, r7
 800063c:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3301      	adds	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
	while( Hardware[i] != '\0') {
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <SendHardwareInfo+0x5c>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1ea      	bne.n	800062a <SendHardwareInfo+0x22>
	}
	AddUsbTxBuffer(data);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd70 	bl	800113c <AddUsbTxBuffer>
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000004 	.word	0x20000004

08000668 <SendVersionInfo>:

void SendVersionInfo(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	731a      	strb	r2, [r3, #12]
	uint8_t i = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
	data[0] = COMMAND_VERSION;
 8000684:	2392      	movs	r3, #146	; 0x92
 8000686:	713b      	strb	r3, [r7, #4]
	while( Version[i] != '\0') {
 8000688:	e00d      	b.n	80006a6 <SendVersionInfo+0x3e>
		data[i + 1] = (uint8_t) Version[i];
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <SendVersionInfo+0x5c>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	441a      	add	r2, r3
 8000692:	7dfb      	ldrb	r3, [r7, #23]
 8000694:	3301      	adds	r3, #1
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	3318      	adds	r3, #24
 800069a:	443b      	add	r3, r7
 800069c:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	3301      	adds	r3, #1
 80006a4:	75fb      	strb	r3, [r7, #23]
	while( Version[i] != '\0') {
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <SendVersionInfo+0x5c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1ea      	bne.n	800068a <SendVersionInfo+0x22>
	}
	AddUsbTxBuffer(data);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fd40 	bl	800113c <AddUsbTxBuffer>
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000

080006c8 <SendFrequency>:

void SendFrequency(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	731a      	strb	r2, [r3, #12]
	uint8_t i = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	75fb      	strb	r3, [r7, #23]
	data[0] = COMMAND_FREQUENCY;
 80006e4:	2394      	movs	r3, #148	; 0x94
 80006e6:	713b      	strb	r3, [r7, #4]
	while( Frequency[i] != '\0') {
 80006e8:	e00d      	b.n	8000706 <SendFrequency+0x3e>
		data[i + 1] = (uint8_t) Frequency[i];
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <SendFrequency+0x5c>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	441a      	add	r2, r3
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	3301      	adds	r3, #1
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	3318      	adds	r3, #24
 80006fa:	443b      	add	r3, r7
 80006fc:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	3301      	adds	r3, #1
 8000704:	75fb      	strb	r3, [r7, #23]
	while( Frequency[i] != '\0') {
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <SendFrequency+0x5c>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1ea      	bne.n	80006ea <SendFrequency+0x22>
	}
	AddUsbTxBuffer(data);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fd10 	bl	800113c <AddUsbTxBuffer>
}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000008 	.word	0x20000008

08000728 <Send_CAN_BTR>:

void Send_CAN_BTR(CAN_HandleTypeDef *hcan) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	uint8_t data[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	731a      	strb	r2, [r3, #12]
	uint32_t btrValue = READ_REG(hcan->Instance->BTR);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	61fb      	str	r3, [r7, #28]

	data[0] = COMMAND_CAN_BTR;
 800074a:	2391      	movs	r3, #145	; 0x91
 800074c:	723b      	strb	r3, [r7, #8]
	data[1] = btrValue >> 24 & 0xFF;
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	0e1b      	lsrs	r3, r3, #24
 8000752:	b2db      	uxtb	r3, r3
 8000754:	727b      	strb	r3, [r7, #9]
	data[2] = btrValue >> 16 & 0xFF;
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	0c1b      	lsrs	r3, r3, #16
 800075a:	b2db      	uxtb	r3, r3
 800075c:	72bb      	strb	r3, [r7, #10]
	data[3] = btrValue >> 8 & 0xFF;
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b2db      	uxtb	r3, r3
 8000764:	72fb      	strb	r3, [r7, #11]
	data[4] = btrValue & 0xFF;
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	733b      	strb	r3, [r7, #12]
	AddUsbTxBuffer(data);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fce3 	bl	800113c <AddUsbTxBuffer>
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <ParseCanRec>:
 * function: Parse the CAN data in the buffer.
 * input: none
 * output: none
 *
 */
void ParseCanRec(void) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b090      	sub	sp, #64	; 0x40
 8000782:	af00      	add	r7, sp, #0
	uint8_t canMsgAvailableFlag = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CanRxMsgTypeDef canRxMsg;
	uint8_t usbData[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE];

	memset(&usbData, 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2211      	movs	r2, #17
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fef9 	bl	8008588 <memset>

	canMsgAvailableFlag = Can1DataAvailable(&canRxMsg); // check ring buffer for new message
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fb80 	bl	8000ea0 <Can1DataAvailable>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(canMsgAvailableFlag) {
 80007a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00f      	beq.n	80007ce <ParseCanRec+0x50>
		if(canRxMsg.CAN_RxHeaderTypeDef.IDE == CAN_EXT_ID) { // EXT ID
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d106      	bne.n	80007c2 <ParseCanRec+0x44>
			SendCanDataToUsb(&canRxMsg, CAN1_NODE);
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fd9a 	bl	80012f4 <SendCanDataToUsb>
		} else { // STD ID
			SendCanDataToUsb(&canRxMsg, CAN1_NODE);
		}
	}
}
 80007c0:	e005      	b.n	80007ce <ParseCanRec+0x50>
			SendCanDataToUsb(&canRxMsg, CAN1_NODE);
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fd93 	bl	80012f4 <SendCanDataToUsb>
}
 80007ce:	bf00      	nop
 80007d0:	3740      	adds	r7, #64	; 0x40
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <CanSnifferCanInit>:
/*
 * Description: Changes the CAN handle baud rate received from the PC. Use the calculator from "bittiming.can-wiki.info" to get the CAN_BTR value
 * Input: the CAN Handle and the CAN_BTR value
 * Output: none
 */
void CanSnifferCanInit(CAN_HandleTypeDef *hcan, uint8_t *data) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b088      	sub	sp, #32
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]

	uint32_t btrValue = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
	uint8_t usbData[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = {0};
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	731a      	strb	r2, [r3, #12]

	btrValue = data[1] << 24 | data[2] << 16 | data[3] << 8 | data[4]; // parse the BTR data
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	061a      	lsls	r2, r3, #24
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3302      	adds	r3, #2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	041b      	lsls	r3, r3, #16
 8000806:	431a      	orrs	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	3303      	adds	r3, #3
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	4313      	orrs	r3, r2
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	3204      	adds	r2, #4
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	4313      	orrs	r3, r2
 800081a:	61fb      	str	r3, [r7, #28]

	// some of these snippets were copied from HAL_CAN_Init()
	HAL_CAN_DeInit(hcan);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 ff50 	bl	80016c2 <HAL_CAN_DeInit>

	if (hcan->State == HAL_CAN_STATE_RESET)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d102      	bne.n	8000834 <CanSnifferCanInit+0x5e>
	{
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(hcan);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f978 	bl	8000b24 <HAL_CAN_MspInit>
	}

	/* Set the bit timing register */
	WRITE_REG(hcan->Instance->BTR, (uint32_t)(btrValue));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	69fa      	ldr	r2, [r7, #28]
 800083a:	61da      	str	r2, [r3, #28]

	/* Initialize the error code */
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialize the CAN state */
	hcan->State = HAL_CAN_STATE_READY;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	f883 2020 	strb.w	r2, [r3, #32]

	if(HAL_CAN_Start(hcan) != HAL_OK) { // start the CAN module
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 ff5c 	bl	8001708 <HAL_CAN_Start>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d007      	beq.n	8000866 <CanSnifferCanInit+0x90>
		usbData[0] = COMMAND_NAK; // NAK PC
 8000856:	2315      	movs	r3, #21
 8000858:	723b      	strb	r3, [r7, #8]
		AddUsbTxBuffer(usbData);
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fc6c 	bl	800113c <AddUsbTxBuffer>
 8000864:	e006      	b.n	8000874 <CanSnifferCanInit+0x9e>
		return;
	}
	usbData[0] = COMMAND_ACK; // ACK PC back
 8000866:	2306      	movs	r3, #6
 8000868:	723b      	strb	r3, [r7, #8]
	AddUsbTxBuffer(usbData);
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fc64 	bl	800113c <AddUsbTxBuffer>
}
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fd8f 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f809 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 f8a7 	bl	80009d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800088a:	f000 f86f 	bl	800096c <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 800088e:	f007 f9df 	bl	8007c50 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  PollingRoutine();
 8000892:	f7ff fe1b 	bl	80004cc <PollingRoutine>
  {
 8000896:	e7fc      	b.n	8000892 <main+0x18>

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 fe6e 	bl	8008588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800090c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fa3c 	bl	8003d9c <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800092a:	f000 f8cd 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2105      	movs	r1, #5
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fc9d 	bl	800428c <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000958:	f000 f8b6 	bl	8000ac8 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_CAN1_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_CAN1_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_CAN1_Init+0x64>)
 8000978:	2215      	movs	r2, #21
 800097a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_CAN1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_CAN1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_CAN1_Init+0x64>)
 800098a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800098e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_CAN1_Init+0x64>)
 8000992:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000996:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_CAN1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_CAN1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_CAN1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_CAN1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_CAN1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_CAN1_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_CAN1_Init+0x64>)
 80009be:	f000 fd85 	bl	80014cc <HAL_CAN_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009c8:	f000 f87e 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000013c 	.word	0x2000013c
 80009d4:	40006400 	.word	0x40006400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <MX_GPIO_Init+0xe4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a31      	ldr	r2, [pc, #196]	; (8000abc <MX_GPIO_Init+0xe4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led_Green_Pin|GPIO_PIN_13|GPIO_PIN_14|Led_Blue_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a64:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <MX_GPIO_Init+0xe8>)
 8000a66:	f001 fef7 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a80:	f001 fc3a 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Green_Pin PD13 PD14 Led_Blue_Pin */
  GPIO_InitStruct.Pin = Led_Green_Pin|GPIO_PIN_13|GPIO_PIN_14|Led_Blue_Pin;
 8000a84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_GPIO_Init+0xe8>)
 8000a9e:	f001 fc2b 	bl	80022f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2006      	movs	r0, #6
 8000aa8:	f001 fbe1 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aac:	2006      	movs	r0, #6
 8000aae:	f001 fbfa 	bl	80022a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f001 fba0 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_CAN_MspInit+0x94>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d133      	bne.n	8000bae <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_CAN_MspInit+0x98>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <HAL_CAN_MspInit+0x98>)
 8000b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_CAN_MspInit+0x98>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_CAN_MspInit+0x98>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_CAN_MspInit+0x98>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_CAN_MspInit+0x98>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b8e:	2309      	movs	r3, #9
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_CAN_MspInit+0x9c>)
 8000b9a:	f001 fbad 	bl	80022f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2014      	movs	r0, #20
 8000ba4:	f001 fb63 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ba8:	2014      	movs	r0, #20
 8000baa:	f001 fb7c 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40006400 	.word	0x40006400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_CAN_MspDeInit+0x34>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_CAN_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_CAN_MspDeInit+0x38>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_CAN_MspDeInit+0x38>)
 8000bdc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000be2:	2103      	movs	r1, #3
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <HAL_CAN_MspDeInit+0x3c>)
 8000be6:	f001 fd23 	bl	8002630 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000bea:	2014      	movs	r0, #20
 8000bec:	f001 fb69 	bl	80022c2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40006400 	.word	0x40006400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 fbf8 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	for (int n=0;n<1000000;n++); //this loop is used to make a software delay, remove optimization for this to work
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e002      	b.n	8000c6a <EXTI0_IRQHandler+0x12>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <EXTI0_IRQHandler+0x50>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	ddf8      	ble.n	8000c64 <EXTI0_IRQHandler+0xc>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) //check to ensure pin is pressed
 8000c72:	2101      	movs	r1, #1
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <EXTI0_IRQHandler+0x54>)
 8000c76:	f001 fdd7 	bl	8002828 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00b      	beq.n	8000c98 <EXTI0_IRQHandler+0x40>
		{
			a++; //increment a
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <EXTI0_IRQHandler+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <EXTI0_IRQHandler+0x58>)
 8000c8a:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);  //function to add message for transmition
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <EXTI0_IRQHandler+0x5c>)
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <EXTI0_IRQHandler+0x58>)
 8000c90:	4909      	ldr	r1, [pc, #36]	; (8000cb8 <EXTI0_IRQHandler+0x60>)
 8000c92:	480a      	ldr	r0, [pc, #40]	; (8000cbc <EXTI0_IRQHandler+0x64>)
 8000c94:	f000 fdc5 	bl	8001822 <HAL_CAN_AddTxMessage>
		}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f001 fdf7 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	000f423f 	.word	0x000f423f
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	2000019c 	.word	0x2000019c
 8000cb4:	20000198 	.word	0x20000198
 8000cb8:	20000164 	.word	0x20000164
 8000cbc:	2000013c 	.word	0x2000013c

08000cc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <CAN1_RX0_IRQHandler+0x24>)
 8000cc6:	f000 ff99 	bl	8001bfc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
   HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <CAN1_RX0_IRQHandler+0x28>)
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <CAN1_RX0_IRQHandler+0x2c>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <CAN1_RX0_IRQHandler+0x24>)
 8000cd2:	f000 fe81 	bl	80019d8 <HAL_CAN_GetRxMessage>
    GPIOD->ODR=r<<12; //use output data register to turn on LED
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <CAN1_RX0_IRQHandler+0x28>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	031a      	lsls	r2, r3, #12
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <CAN1_RX0_IRQHandler+0x30>)
 8000cde:	615a      	str	r2, [r3, #20]
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000013c 	.word	0x2000013c
 8000ce8:	2000019d 	.word	0x2000019d
 8000cec:	2000017c 	.word	0x2000017c
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <OTG_FS_IRQHandler+0x10>)
 8000cfa:	f001 ff3a 	bl	8002b72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200009d8 	.word	0x200009d8

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ffd7 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f007 fbe3 	bl	8008524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fd8c 	bl	800087a <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8000d70:	08008650 	.word	0x08008650
  ldr r2, =_sbss
 8000d74:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8000d78:	20000f10 	.word	0x20000f10

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <SendCanTxMessage1>:
RING_BUFF_INFO RxMessagePtr2;
#endif


HAL_StatusTypeDef CAN_Status1; // make it global for debugger window
int SendCanTxMessage1(CAN_HandleTypeDef *hcan) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	uint32_t CAN_Tx_Mailboxes; // indicates which tx buffer was used
	if(TxMessagePtr1.iCnt_Handle) { // send available message
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <SendCanTxMessage1+0x54>)
 8000d8a:	889b      	ldrh	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d01b      	beq.n	8000dc8 <SendCanTxMessage1+0x48>
		CAN_Status1 = HAL_CAN_AddTxMessage(hcan, &TxMessageBuffer1[TxMessagePtr1.iIndexOUT].CAN_TxHeaderTypeDef, TxMessageBuffer1[TxMessagePtr1.iIndexOUT].Data, &CAN_Tx_Mailboxes);
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SendCanTxMessage1+0x54>)
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	015b      	lsls	r3, r3, #5
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <SendCanTxMessage1+0x58>)
 8000d98:	1899      	adds	r1, r3, r2
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <SendCanTxMessage1+0x54>)
 8000d9c:	885b      	ldrh	r3, [r3, #2]
 8000d9e:	015b      	lsls	r3, r3, #5
 8000da0:	3318      	adds	r3, #24
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <SendCanTxMessage1+0x58>)
 8000da4:	441a      	add	r2, r3
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fd39 	bl	8001822 <HAL_CAN_AddTxMessage>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <SendCanTxMessage1+0x5c>)
 8000db6:	701a      	strb	r2, [r3, #0]
		if (CAN_Status1 == HAL_OK)
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SendCanTxMessage1+0x5c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d103      	bne.n	8000dc8 <SendCanTxMessage1+0x48>
		{
			DRV_RingBuffPtr__Output(&TxMessagePtr1, CAN_MAX_TX_BUFF); // increment output buffer ptr
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <SendCanTxMessage1+0x54>)
 8000dc4:	f000 f96b 	bl	800109e <DRV_RingBuffPtr__Output>
		}
	}
	return TxMessagePtr1.iCnt_Handle; // if no more message to handle then 0 will be returned
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <SendCanTxMessage1+0x54>)
 8000dca:	889b      	ldrh	r3, [r3, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200003c0 	.word	0x200003c0
 8000dd8:	200001a0 	.word	0x200001a0
 8000ddc:	200003d0 	.word	0x200003d0

08000de0 <AddCanTxBuffer1>:

// add to Tx buffer
void AddCanTxBuffer1(CanTxMsgTypeDef *canMsg) {
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	unsigned char i;
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.ExtId = canMsg->CAN_TxHeaderTypeDef.ExtId;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	492a      	ldr	r1, [pc, #168]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000df4:	0143      	lsls	r3, r0, #5
 8000df6:	440b      	add	r3, r1
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.StdId = canMsg->CAN_TxHeaderTypeDef.StdId;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4925      	ldr	r1, [pc, #148]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000e08:	0143      	lsls	r3, r0, #5
 8000e0a:	440b      	add	r3, r1
 8000e0c:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.RTR = canMsg->CAN_TxHeaderTypeDef.RTR;
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	4920      	ldr	r1, [pc, #128]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000e1a:	0143      	lsls	r3, r0, #5
 8000e1c:	440b      	add	r3, r1
 8000e1e:	330c      	adds	r3, #12
 8000e20:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.IDE = canMsg->CAN_TxHeaderTypeDef.IDE;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	491b      	ldr	r1, [pc, #108]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000e2e:	0143      	lsls	r3, r0, #5
 8000e30:	440b      	add	r3, r1
 8000e32:	3308      	adds	r3, #8
 8000e34:	601a      	str	r2, [r3, #0]
	TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.DLC = canMsg->CAN_TxHeaderTypeDef.DLC;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	4916      	ldr	r1, [pc, #88]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000e42:	0143      	lsls	r3, r0, #5
 8000e44:	440b      	add	r3, r1
 8000e46:	3310      	adds	r3, #16
 8000e48:	601a      	str	r2, [r3, #0]
	for(i = 0; i < TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.DLC; i++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e011      	b.n	8000e74 <AddCanTxBuffer1+0x94>
		TxMessageBuffer1[TxMessagePtr1.iIndexIN].Data[i] = canMsg->Data[i];
 8000e50:	7bfa      	ldrb	r2, [r7, #15]
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461c      	mov	r4, r3
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	440a      	add	r2, r1
 8000e5e:	7e10      	ldrb	r0, [r2, #24]
 8000e60:	490e      	ldr	r1, [pc, #56]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000e62:	0162      	lsls	r2, r4, #5
 8000e64:	440a      	add	r2, r1
 8000e66:	4413      	add	r3, r2
 8000e68:	3318      	adds	r3, #24
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < TxMessageBuffer1[TxMessagePtr1.iIndexIN].CAN_TxHeaderTypeDef.DLC; i++) {
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <AddCanTxBuffer1+0xbc>)
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	440b      	add	r3, r1
 8000e80:	3310      	adds	r3, #16
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3e3      	bcc.n	8000e50 <AddCanTxBuffer1+0x70>
	}
	DRV_RingBuffPtr__Input(&TxMessagePtr1, CAN_MAX_TX_BUFF); // increment input buffer ptr
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <AddCanTxBuffer1+0xb8>)
 8000e8c:	f000 f8be 	bl	800100c <DRV_RingBuffPtr__Input>
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	200003c0 	.word	0x200003c0
 8000e9c:	200001a0 	.word	0x200001a0

08000ea0 <Can1DataAvailable>:
 * Copy buffer to canMsg array
 * Input canMsg: pointer to array
 * Output: 1 if data available, 0 if no new data
 */
uint8_t Can1DataAvailable(CanRxMsgTypeDef *canMsg)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	uint8_t i, canMsgAvailable = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73bb      	strb	r3, [r7, #14]
	if(RxMessagePtr1.iCnt_Handle) {
 8000eac:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000eae:	889b      	ldrh	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d06b      	beq.n	8000f8c <Can1DataAvailable+0xec>
		canMsg->CAN_RxHeaderTypeDef.ExtId = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.ExtId;
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000eb6:	885b      	ldrh	r3, [r3, #2]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	605a      	str	r2, [r3, #4]
		canMsg->CAN_RxHeaderTypeDef.StdId = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.StdId;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000ed0:	885b      	ldrh	r3, [r3, #2]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
		canMsg->CAN_RxHeaderTypeDef.RTR = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.RTR;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000eee:	460b      	mov	r3, r1
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	330c      	adds	r3, #12
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	60da      	str	r2, [r3, #12]
		canMsg->CAN_RxHeaderTypeDef.IDE = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.IDE;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000f02:	885b      	ldrh	r3, [r3, #2]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000f08:	460b      	mov	r3, r1
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3308      	adds	r3, #8
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
		canMsg->CAN_RxHeaderTypeDef.DLC = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.DLC;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000f1c:	885b      	ldrh	r3, [r3, #2]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000f22:	460b      	mov	r3, r1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	611a      	str	r2, [r3, #16]
		for(i = 0; i < RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.DLC; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e014      	b.n	8000f64 <Can1DataAvailable+0xc4>
			canMsg->Data[i] = RxMessageBuffer1[RxMessagePtr1.iIndexOUT].Data[i];
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	461c      	mov	r4, r3
 8000f40:	7bf9      	ldrb	r1, [r7, #15]
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	4815      	ldr	r0, [pc, #84]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000f46:	4623      	mov	r3, r4
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4423      	add	r3, r4
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4403      	add	r3, r0
 8000f50:	440b      	add	r3, r1
 8000f52:	331c      	adds	r3, #28
 8000f54:	7819      	ldrb	r1, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	771a      	strb	r2, [r3, #28]
		for(i = 0; i < RxMessageBuffer1[RxMessagePtr1.iIndexOUT].CAN_RxHeaderTypeDef.DLC; i++) {
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	3301      	adds	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000f68:	885b      	ldrh	r3, [r3, #2]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	490b      	ldr	r1, [pc, #44]	; (8000f9c <Can1DataAvailable+0xfc>)
 8000f6e:	4603      	mov	r3, r0
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4403      	add	r3, r0
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	3310      	adds	r3, #16
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3dc      	bcc.n	8000f3a <Can1DataAvailable+0x9a>
		}
		DRV_RingBuffPtr__Output(&RxMessagePtr1, CAN_MAX_RX_BUFF); // increment output buffer ptr
 8000f80:	2108      	movs	r1, #8
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <Can1DataAvailable+0xf8>)
 8000f84:	f000 f88b 	bl	800109e <DRV_RingBuffPtr__Output>
		canMsgAvailable = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73bb      	strb	r3, [r7, #14]
	}
	return canMsgAvailable;
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200003c8 	.word	0x200003c8
 8000f9c:	200002a0 	.word	0x200002a0

08000fa0 <PortB_On>:
	HAL_GPIO_TogglePin(GPIOA, pin);
  return 0;
}

// port B
int8_t PortB_On (uint32_t pin) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2201      	movs	r2, #1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <PortB_On+0x20>)
 8000fb2:	f001 fc51 	bl	8002858 <HAL_GPIO_WritePin>
  return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <PortB_Off>:

int8_t PortB_Off (uint32_t pin) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <PortB_Off+0x20>)
 8000fd6:	f001 fc3f 	bl	8002858 <HAL_GPIO_WritePin>
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <PortD_On>:
}
#endif // __STM32F1xx_HAL_CAN_H

#ifdef STM32F407xx
// port D
int8_t PortD_On (uint32_t pin) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, pin, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <PortD_On+0x20>)
 8000ffa:	f001 fc2d 	bl	8002858 <HAL_GPIO_WritePin>
  return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020c00 	.word	0x40020c00

0800100c <DRV_RingBuffPtr__Input>:

	ptr->iCnt_Handle = 0;
	ptr->iCnt_OverFlow = 0;
}

void DRV_RingBuffPtr__Input(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	ptr->iIndexIN++;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	801a      	strh	r2, [r3, #0]
	if (ptr->iIndexIN >= iBufferSize)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	4293      	cmp	r3, r2
 800102c:	d802      	bhi.n	8001034 <DRV_RingBuffPtr__Input+0x28>
		ptr->iIndexIN = 0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	801a      	strh	r2, [r3, #0]

	ptr->iCnt_Handle++;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	809a      	strh	r2, [r3, #4]
	if (ptr->iIndexIN == ptr->iIndexOUT) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	881a      	ldrh	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	885b      	ldrh	r3, [r3, #2]
 8001048:	429a      	cmp	r2, r3
 800104a:	d122      	bne.n	8001092 <DRV_RingBuffPtr__Input+0x86>
		ptr->iCnt_OverFlow++;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	88db      	ldrh	r3, [r3, #6]
 8001050:	3301      	adds	r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	80da      	strh	r2, [r3, #6]
		if (ptr->iCnt_OverFlow > 50000)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	88db      	ldrh	r3, [r3, #6]
 800105c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001060:	4293      	cmp	r3, r2
 8001062:	d902      	bls.n	800106a <DRV_RingBuffPtr__Input+0x5e>
			ptr->iCnt_OverFlow = 0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	80da      	strh	r2, [r3, #6]
		if (ptr->iIndexIN == 0) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <DRV_RingBuffPtr__Input+0x74>
			ptr->iIndexOUT = iBufferSize - 1;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	3b01      	subs	r3, #1
 8001078:	b29a      	uxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	805a      	strh	r2, [r3, #2]
 800107e:	e005      	b.n	800108c <DRV_RingBuffPtr__Input+0x80>
		} else {
			ptr->iIndexOUT = ptr->iIndexIN - 1;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	805a      	strh	r2, [r3, #2]
		}
		ptr->iCnt_Handle = 1;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	809a      	strh	r2, [r3, #4]
	}
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DRV_RingBuffPtr__Output>:

void DRV_RingBuffPtr__Output(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	if (ptr->iCnt_Handle) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	889b      	ldrh	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d014      	beq.n	80010da <DRV_RingBuffPtr__Output+0x3c>
		ptr->iIndexOUT++;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	885b      	ldrh	r3, [r3, #2]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	805a      	strh	r2, [r3, #2]
		if (ptr->iIndexOUT >= iBufferSize)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	885b      	ldrh	r3, [r3, #2]
 80010c0:	461a      	mov	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d802      	bhi.n	80010ce <DRV_RingBuffPtr__Output+0x30>
			ptr->iIndexOUT = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	805a      	strh	r2, [r3, #2]
		ptr->iCnt_Handle--;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	889b      	ldrh	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	809a      	strh	r2, [r3, #4]
	}
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SendUsbMessage>:
RING_BUFF_INFO usbRxRingBuffPtr;

extern USBD_HandleTypeDef hUsbDeviceFS;

// poll this to check if usb data is available to send
int SendUsbMessage(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint8_t USB_Status;
	if(usbTxRingBuffPtr.iCnt_Handle) { // send available message
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <SendUsbMessage+0x48>)
 80010f0:	889b      	ldrh	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <SendUsbMessage+0x3a>
		USB_Status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, usbTxBuffer[usbTxRingBuffPtr.iIndexOUT], USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SendUsbMessage+0x48>)
 80010f8:	885b      	ldrh	r3, [r3, #2]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4613      	mov	r3, r2
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <SendUsbMessage+0x4c>)
 8001104:	4413      	add	r3, r2
 8001106:	2211      	movs	r2, #17
 8001108:	4619      	mov	r1, r3
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <SendUsbMessage+0x50>)
 800110c:	f005 f944 	bl	8006398 <USBD_CUSTOM_HID_SendReport>
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
		if (USB_Status == USBD_OK) // make sure data was sent before incrementing pointer
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <SendUsbMessage+0x3a>
		{
			DRV_RingBuffPtr__Output(&usbTxRingBuffPtr, USB_MAX_RING_BUFF); // increment output buffer ptr
 800111a:	2108      	movs	r1, #8
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <SendUsbMessage+0x48>)
 800111e:	f7ff ffbe 	bl	800109e <DRV_RingBuffPtr__Output>
		}
	}
	return usbTxRingBuffPtr.iCnt_Handle; // if no more message to handle then 0 will be returned
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <SendUsbMessage+0x48>)
 8001124:	889b      	ldrh	r3, [r3, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000045c 	.word	0x2000045c
 8001134:	200003d4 	.word	0x200003d4
 8001138:	200004fc 	.word	0x200004fc

0800113c <AddUsbTxBuffer>:

// adds data to USB Tx buffer
void AddUsbTxBuffer(uint8_t *data) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	memset(&usbTxBuffer[usbTxRingBuffPtr.iIndexIN], 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <AddUsbTxBuffer+0x64>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	4413      	add	r3, r2
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <AddUsbTxBuffer+0x68>)
 8001152:	4413      	add	r3, r2
 8001154:	2211      	movs	r2, #17
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f007 fa15 	bl	8008588 <memset>
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e012      	b.n	800118a <AddUsbTxBuffer+0x4e>
		usbTxBuffer[usbTxRingBuffPtr.iIndexIN][i] = data[i];
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <AddUsbTxBuffer+0x64>)
 800116c:	8812      	ldrh	r2, [r2, #0]
 800116e:	4611      	mov	r1, r2
 8001170:	7818      	ldrb	r0, [r3, #0]
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <AddUsbTxBuffer+0x68>)
 8001174:	460b      	mov	r3, r1
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	440b      	add	r3, r1
 800117a:	441a      	add	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	4602      	mov	r2, r0
 8001182:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b10      	cmp	r3, #16
 800118e:	d9e9      	bls.n	8001164 <AddUsbTxBuffer+0x28>
	}
	DRV_RingBuffPtr__Input(&usbTxRingBuffPtr, USB_MAX_RING_BUFF);
 8001190:	2108      	movs	r1, #8
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <AddUsbTxBuffer+0x64>)
 8001194:	f7ff ff3a 	bl	800100c <DRV_RingBuffPtr__Input>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000045c 	.word	0x2000045c
 80011a4:	200003d4 	.word	0x200003d4

080011a8 <AddUsbRxBuffer>:

// add data to USB Rx buffer
void AddUsbRxBuffer(uint8_t *data) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	memset(&usbRxBuffer[usbRxRingBuffPtr.iIndexIN], 0, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <AddUsbRxBuffer+0x64>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <AddUsbRxBuffer+0x68>)
 80011be:	4413      	add	r3, r2
 80011c0:	2211      	movs	r2, #17
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 f9df 	bl	8008588 <memset>
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e012      	b.n	80011f6 <AddUsbRxBuffer+0x4e>
		usbRxBuffer[usbRxRingBuffPtr.iIndexIN][i] = data[i];
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <AddUsbRxBuffer+0x64>)
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	7818      	ldrb	r0, [r3, #0]
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <AddUsbRxBuffer+0x68>)
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	441a      	add	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	4602      	mov	r2, r0
 80011ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d9e9      	bls.n	80011d0 <AddUsbRxBuffer+0x28>
	}
	DRV_RingBuffPtr__Input(&usbRxRingBuffPtr, USB_MAX_RING_BUFF);
 80011fc:	2108      	movs	r1, #8
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <AddUsbRxBuffer+0x64>)
 8001200:	f7ff ff04 	bl	800100c <DRV_RingBuffPtr__Input>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200004ec 	.word	0x200004ec
 8001210:	20000464 	.word	0x20000464

08001214 <UsbDataAvailable>:
/*
 * Check for USB Rx message
 * Input data: pointer to array to save data from Rx buffer
 * Output return 1 if data available, 0 if no data
 */
uint8_t UsbDataAvailable(uint8_t *data) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	uint8_t dataAvailableFlag = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
	if(usbRxRingBuffPtr.iCnt_Handle) {
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <UsbDataAvailable+0x5c>)
 8001222:	889b      	ldrh	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01d      	beq.n	8001264 <UsbDataAvailable+0x50>
		for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	e011      	b.n	8001252 <UsbDataAvailable+0x3e>
			data[i] = usbRxBuffer[usbRxRingBuffPtr.iIndexOUT][i];
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <UsbDataAvailable+0x5c>)
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	4618      	mov	r0, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	441a      	add	r2, r3
 800123a:	490e      	ldr	r1, [pc, #56]	; (8001274 <UsbDataAvailable+0x60>)
 800123c:	4603      	mov	r3, r0
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4403      	add	r3, r0
 8001242:	4419      	add	r1, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	440b      	add	r3, r1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	7013      	strb	r3, [r2, #0]
		for(int i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	3301      	adds	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b10      	cmp	r3, #16
 8001256:	d9ea      	bls.n	800122e <UsbDataAvailable+0x1a>
		}
		dataAvailableFlag = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
		DRV_RingBuffPtr__Output(&usbRxRingBuffPtr, USB_MAX_RING_BUFF);
 800125c:	2108      	movs	r1, #8
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <UsbDataAvailable+0x5c>)
 8001260:	f7ff ff1d 	bl	800109e <DRV_RingBuffPtr__Output>
	}
	return dataAvailableFlag;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200004ec 	.word	0x200004ec
 8001274:	20000464 	.word	0x20000464

08001278 <SendUsbDataToCanBus>:
/* Description: parse usb data
 * Input canChannel: which CAN node to send message to
 * Input data: The USB data
 * Output none
 */
void SendUsbDataToCanBus(uint8_t canChannel, uint8_t *data) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b090      	sub	sp, #64	; 0x40
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]

	CanTxMsgTypeDef msg;
	UsbCanStruct usbCanStruct;

	memcpy(usbCanStruct.array.msgArray, data, 20); // remove command
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	2214      	movs	r2, #20
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f007 f96d 	bl	800856c <memcpy>

	// data[0] is command from USB
	msg.CAN_TxHeaderTypeDef.IDE = usbCanStruct.msgBytes.IDE;
 8001292:	7a7b      	ldrb	r3, [r7, #9]
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
	if(msg.CAN_TxHeaderTypeDef.IDE == CAN_ID_STD) {
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <SendUsbDataToCanBus+0x2a>
		msg.CAN_TxHeaderTypeDef.StdId = usbCanStruct.msgBytes.ArbId;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e001      	b.n	80012a6 <SendUsbDataToCanBus+0x2e>
	} else {
		msg.CAN_TxHeaderTypeDef.ExtId = usbCanStruct.msgBytes.ArbId;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	623b      	str	r3, [r7, #32]
	}
	msg.CAN_TxHeaderTypeDef.RTR = usbCanStruct.msgBytes.RTR;// RTR
 80012a6:	7abb      	ldrb	r3, [r7, #10]
 80012a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
	msg.CAN_TxHeaderTypeDef.DLC = usbCanStruct.msgBytes.DLC;//
 80012b0:	7c3b      	ldrb	r3, [r7, #16]
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < 8; i++) { // copy 8 bytes even though DLC could be less
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b8:	e00d      	b.n	80012d6 <SendUsbDataToCanBus+0x5e>
		msg.Data[i] = usbCanStruct.dataBytes.array[i];
 80012ba:	f107 0211 	add.w	r2, r7, #17
 80012be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012c0:	4413      	add	r3, r2
 80012c2:	7819      	ldrb	r1, [r3, #0]
 80012c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ca:	4413      	add	r3, r2
 80012cc:	460a      	mov	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++) { // copy 8 bytes even though DLC could be less
 80012d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d2:	3301      	adds	r3, #1
 80012d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d8:	2b07      	cmp	r3, #7
 80012da:	ddee      	ble.n	80012ba <SendUsbDataToCanBus+0x42>
	}

	if(canChannel == CAN1_NODE) {
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <SendUsbDataToCanBus+0x74>
		AddCanTxBuffer1(&msg);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fd7a 	bl	8000de0 <AddCanTxBuffer1>
	} else {
#ifdef USE_CAN_BUFFER_2
		AddCanTxBuffer2(&msg);
#endif
	}
}
 80012ec:	bf00      	nop
 80012ee:	3740      	adds	r7, #64	; 0x40
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SendCanDataToUsb>:

// just the opposite, copy CAN to USB data
void SendCanDataToUsb(CanRxMsgTypeDef *msg, uint8_t node) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	77fb      	strb	r3, [r7, #31]
	UsbCanStruct usbCanStruct = {0};
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]


	usbCanStruct.msgBytes.Command = COMMAND_MESSAGE;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	723b      	strb	r3, [r7, #8]
	usbCanStruct.msgBytes.IDE = msg->CAN_RxHeaderTypeDef.IDE & 0x0F;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	b2db      	uxtb	r3, r3
 8001324:	727b      	strb	r3, [r7, #9]

	if(usbCanStruct.msgBytes.IDE == CAN_EXT_ID) {
 8001326:	7a7b      	ldrb	r3, [r7, #9]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d103      	bne.n	8001334 <SendCanDataToUsb+0x40>
		usbCanStruct.msgBytes.ArbId = msg->CAN_RxHeaderTypeDef.ExtId;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	e002      	b.n	800133a <SendCanDataToUsb+0x46>
	} else {
		usbCanStruct.msgBytes.ArbId = msg->CAN_RxHeaderTypeDef.StdId;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
	}

	usbCanStruct.msgBytes.RTR = msg->CAN_RxHeaderTypeDef.RTR & 0x0F;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	7abb      	ldrb	r3, [r7, #10]
 8001346:	f362 0300 	bfi	r3, r2, #0, #1
 800134a:	72bb      	strb	r3, [r7, #10]
	usbCanStruct.msgBytes.Node = node;
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	b2da      	uxtb	r2, r3
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	f362 0303 	bfi	r3, r2, #0, #4
 800135a:	72fb      	strb	r3, [r7, #11]
	usbCanStruct.msgBytes.DLC = msg->CAN_RxHeaderTypeDef.DLC & 0x0F;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	b2db      	uxtb	r3, r3
 8001368:	743b      	strb	r3, [r7, #16]

	for(i = 0; i < 8; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	77fb      	strb	r3, [r7, #31]
 800136e:	e00b      	b.n	8001388 <SendCanDataToUsb+0x94>
		usbCanStruct.dataBytes.array[i] = msg->Data[i];
 8001370:	7ffa      	ldrb	r2, [r7, #31]
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	440a      	add	r2, r1
 8001378:	7f12      	ldrb	r2, [r2, #28]
 800137a:	3320      	adds	r3, #32
 800137c:	443b      	add	r3, r7
 800137e:	f803 2c0f 	strb.w	r2, [r3, #-15]
	for(i = 0; i < 8; i++) {
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	3301      	adds	r3, #1
 8001386:	77fb      	strb	r3, [r7, #31]
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	2b07      	cmp	r3, #7
 800138c:	d9f0      	bls.n	8001370 <SendCanDataToUsb+0x7c>
	}

	AddUsbTxBuffer(usbCanStruct.array.msgArray);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fed2 	bl	800113c <AddUsbTxBuffer>
}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_Init+0x40>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_Init+0x40>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_Init+0x40>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 ff45 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fb7e 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 ff6b 	bl	80022de <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 ff25 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000000c 	.word	0x2000000c
 800143c:	20000014 	.word	0x20000014
 8001440:	20000010 	.word	0x20000010

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000014 	.word	0x20000014
 8001468:	200004f4 	.word	0x200004f4

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200004f4 	.word	0x200004f4

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffde 	bl	800146c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000014 	.word	0x20000014

080014cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0ed      	b.n	80016ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fb1a 	bl	8000b24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ffb4 	bl	800146c <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff ffb0 	bl	800146c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0c5      	b.n	80016ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0e5      	beq.n	8001508 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0202 	bic.w	r2, r2, #2
 800154a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154c:	f7ff ff8e 	bl	800146c <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001552:	e012      	b.n	800157a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001554:	f7ff ff8a 	bl	800146c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90b      	bls.n	800157a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e09f      	b.n	80016ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e1b      	ldrb	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e007      	b.n	80015b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7e5b      	ldrb	r3, [r3, #25]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e007      	b.n	80015dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e9b      	ldrb	r3, [r3, #26]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0220 	bic.w	r2, r2, #32
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7edb      	ldrb	r3, [r3, #27]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0210 	bic.w	r2, r2, #16
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0210 	orr.w	r2, r2, #16
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f1b      	ldrb	r3, [r3, #28]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0208 	orr.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f5b      	ldrb	r3, [r3, #29]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0204 	orr.w	r2, r2, #4
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	ea42 0103 	orr.w	r1, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e015      	b.n	8001700 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f85b 	bl	8001790 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fa72 	bl	8000bc4 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ee:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d12e      	bne.n	800177a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001734:	f7ff fe9a 	bl	800146c <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800173a:	e012      	b.n	8001762 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800173c:	f7ff fe96 	bl	800146c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b0a      	cmp	r3, #10
 8001748:	d90b      	bls.n	8001762 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2205      	movs	r2, #5
 800175a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e012      	b.n	8001788 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e5      	bne.n	800173c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e006      	b.n	8001788 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d133      	bne.n	800180c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff fe5a 	bl	800146c <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ba:	e012      	b.n	80017e2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017bc:	f7ff fe56 	bl	800146c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b0a      	cmp	r3, #10
 80017c8:	d90b      	bls.n	80017e2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2205      	movs	r2, #5
 80017da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e01b      	b.n	800181a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0e5      	beq.n	80017bc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0202 	bic.w	r2, r2, #2
 80017fe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	e006      	b.n	800181a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001822:	b480      	push	{r7}
 8001824:	b089      	sub	sp, #36	; 0x24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001840:	7ffb      	ldrb	r3, [r7, #31]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <HAL_CAN_AddTxMessage+0x2c>
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b02      	cmp	r3, #2
 800184a:	f040 80b8 	bne.w	80019be <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10a      	bne.n	800186e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80a0 	beq.w	80019ae <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	0e1b      	lsrs	r3, r3, #24
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d907      	bls.n	800188e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09e      	b.n	80019cc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800188e:	2201      	movs	r2, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10d      	bne.n	80018bc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018aa:	68f9      	ldr	r1, [r7, #12]
 80018ac:	6809      	ldr	r1, [r1, #0]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3318      	adds	r3, #24
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e00f      	b.n	80018dc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018cc:	68f9      	ldr	r1, [r7, #12]
 80018ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3318      	adds	r3, #24
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	440b      	add	r3, r1
 80018da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3318      	adds	r3, #24
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	440b      	add	r3, r1
 80018ec:	3304      	adds	r3, #4
 80018ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	7d1b      	ldrb	r3, [r3, #20]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d111      	bne.n	800191c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3318      	adds	r3, #24
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	3304      	adds	r3, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6811      	ldr	r1, [r2, #0]
 800190c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3318      	adds	r3, #24
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	440b      	add	r3, r1
 8001918:	3304      	adds	r3, #4
 800191a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3307      	adds	r3, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	061a      	lsls	r2, r3, #24
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3306      	adds	r3, #6
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3305      	adds	r3, #5
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	4313      	orrs	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	3204      	adds	r2, #4
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4610      	mov	r0, r2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	6811      	ldr	r1, [r2, #0]
 8001944:	ea43 0200 	orr.w	r2, r3, r0
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	440b      	add	r3, r1
 800194e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001952:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3303      	adds	r3, #3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	061a      	lsls	r2, r3, #24
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3302      	adds	r3, #2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4313      	orrs	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	4610      	mov	r0, r2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	6811      	ldr	r1, [r2, #0]
 800197a:	ea43 0200 	orr.w	r2, r3, r0
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	440b      	add	r3, r1
 8001984:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001988:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3318      	adds	r3, #24
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	6811      	ldr	r1, [r2, #0]
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3318      	adds	r3, #24
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	440b      	add	r3, r1
 80019a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e00e      	b.n	80019cc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e006      	b.n	80019cc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3724      	adds	r7, #36	; 0x24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_GetRxMessage+0x24>
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f040 80f3 	bne.w	8001be2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10e      	bne.n	8001a20 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d116      	bne.n	8001a3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e7      	b.n	8001bf0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0d8      	b.n	8001bf0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	331b      	adds	r3, #27
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0204 	and.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10c      	bne.n	8001a76 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	331b      	adds	r3, #27
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e00b      	b.n	8001a8e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	331b      	adds	r3, #27
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	331b      	adds	r3, #27
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0202 	and.w	r2, r3, #2
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	331b      	adds	r3, #27
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 020f 	and.w	r2, r3, #15
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331b      	adds	r3, #27
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	331b      	adds	r3, #27
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0a1a      	lsrs	r2, r3, #8
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0c1a      	lsrs	r2, r3, #16
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3302      	adds	r3, #2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0e1a      	lsrs	r2, r3, #24
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0a1a      	lsrs	r2, r3, #8
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	3305      	adds	r3, #5
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0c1a      	lsrs	r2, r3, #16
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3306      	adds	r3, #6
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e1a      	lsrs	r2, r3, #24
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	3307      	adds	r3, #7
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d108      	bne.n	8001bce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0220 	orr.w	r2, r2, #32
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	e007      	b.n	8001bde <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0220 	orr.w	r2, r2, #32
 8001bdc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e006      	b.n	8001bf0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d07c      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d023      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f983 	bl	8001f6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001c64:	e016      	b.n	8001c94 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e00c      	b.n	8001c94 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	e002      	b.n	8001c94 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f989 	bl	8001fa6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d024      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f963 	bl	8001f7e <HAL_CAN_TxMailbox1CompleteCallback>
 8001cb8:	e016      	b.n	8001ce8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	e00c      	b.n	8001ce8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	e002      	b.n	8001ce8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f969 	bl	8001fba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d024      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f943 	bl	8001f92 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d0c:	e016      	b.n	8001d3c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e00c      	b.n	8001d3c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
 8001d34:	e002      	b.n	8001d3c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f949 	bl	8001fce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00c      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f93a 	bl	8001ff6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f921 	bl	8001fe2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f91c 	bl	800201e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f903 	bl	800200a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f906 	bl	8002032 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ff 	bl	8002046 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07b      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d072      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d043      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03e      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eca:	2b60      	cmp	r3, #96	; 0x60
 8001ecc:	d02b      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x32a>
 8001ece:	2b60      	cmp	r3, #96	; 0x60
 8001ed0:	d82e      	bhi.n	8001f30 <HAL_CAN_IRQHandler+0x334>
 8001ed2:	2b50      	cmp	r3, #80	; 0x50
 8001ed4:	d022      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x320>
 8001ed6:	2b50      	cmp	r3, #80	; 0x50
 8001ed8:	d82a      	bhi.n	8001f30 <HAL_CAN_IRQHandler+0x334>
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d019      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x316>
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d826      	bhi.n	8001f30 <HAL_CAN_IRQHandler+0x334>
 8001ee2:	2b30      	cmp	r3, #48	; 0x30
 8001ee4:	d010      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x30c>
 8001ee6:	2b30      	cmp	r3, #48	; 0x30
 8001ee8:	d822      	bhi.n	8001f30 <HAL_CAN_IRQHandler+0x334>
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d002      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x2f8>
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d005      	beq.n	8001efe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ef2:	e01d      	b.n	8001f30 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001efc:	e019      	b.n	8001f32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f06:	e014      	b.n	8001f32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f043 0320 	orr.w	r3, r3, #32
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f10:	e00f      	b.n	8001f32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f1a:	e00a      	b.n	8001f32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f24:	e005      	b.n	8001f32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f2e:	e000      	b.n	8001f32 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2204      	movs	r2, #4
 8001f48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f87c 	bl	800205a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db12      	blt.n	8002148 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	490a      	ldr	r1, [pc, #40]	; (8002154 <__NVIC_DisableIRQ+0x44>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	3320      	adds	r3, #32
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800213c:	f3bf 8f4f 	dsb	sy
}
 8002140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002142:	f3bf 8f6f 	isb	sy
}
 8002146:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff05 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff1a 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff8e 	bl	80021ac <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff0d 	bl	80020d4 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff1d 	bl	8002110 <__NVIC_DisableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff94 	bl	8002214 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e16b      	b.n	80025ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 815a 	bne.w	80025e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80b4 	beq.w	80025e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b60      	ldr	r3, [pc, #384]	; (8002604 <HAL_GPIO_Init+0x30c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a5f      	ldr	r2, [pc, #380]	; (8002604 <HAL_GPIO_Init+0x30c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_GPIO_Init+0x30c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a5b      	ldr	r2, [pc, #364]	; (8002608 <HAL_GPIO_Init+0x310>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x314>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02b      	beq.n	800251e <HAL_GPIO_Init+0x226>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_GPIO_Init+0x318>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d025      	beq.n	800251a <HAL_GPIO_Init+0x222>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a50      	ldr	r2, [pc, #320]	; (8002614 <HAL_GPIO_Init+0x31c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x21e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <HAL_GPIO_Init+0x320>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x21a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4e      	ldr	r2, [pc, #312]	; (800261c <HAL_GPIO_Init+0x324>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x216>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_GPIO_Init+0x328>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x212>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_GPIO_Init+0x32c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x20e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_GPIO_Init+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x20a>
 80024fe:	2307      	movs	r3, #7
 8002500:	e00e      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002502:	2308      	movs	r3, #8
 8002504:	e00c      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002506:	2306      	movs	r3, #6
 8002508:	e00a      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800250a:	2305      	movs	r3, #5
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800250e:	2304      	movs	r3, #4
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800251e:	2300      	movs	r3, #0
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002530:	4935      	ldr	r1, [pc, #212]	; (8002608 <HAL_GPIO_Init+0x310>)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_GPIO_Init+0x334>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_GPIO_Init+0x334>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_GPIO_Init+0x334>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_GPIO_Init+0x334>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_GPIO_Init+0x334>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x334>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x334>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_GPIO_Init+0x334>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	f67f ae90 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40013800 	.word	0x40013800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	40020800 	.word	0x40020800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40021000 	.word	0x40021000
 8002620:	40021400 	.word	0x40021400
 8002624:	40021800 	.word	0x40021800
 8002628:	40021c00 	.word	0x40021c00
 800262c:	40013c00 	.word	0x40013c00

08002630 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e0cd      	b.n	80027e8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800264c:	2201      	movs	r2, #1
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	f040 80bd 	bne.w	80027e2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002668:	4a65      	ldr	r2, [pc, #404]	; (8002800 <HAL_GPIO_DeInit+0x1d0>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002674:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <HAL_GPIO_DeInit+0x1d4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <HAL_GPIO_DeInit+0xba>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_GPIO_DeInit+0x1d8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_DeInit+0xb6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_GPIO_DeInit+0x1dc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_DeInit+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_GPIO_DeInit+0x1e0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_DeInit+0xae>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_GPIO_DeInit+0x1e4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_DeInit+0xaa>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_GPIO_DeInit+0x1e8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_DeInit+0xa6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_GPIO_DeInit+0x1ec>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_DeInit+0xa2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_GPIO_DeInit+0x1f0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_DeInit+0x9e>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e00e      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026ce:	2308      	movs	r3, #8
 80026d0:	e00c      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026d2:	2306      	movs	r3, #6
 80026d4:	e00a      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e008      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026da:	2304      	movs	r3, #4
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026de:	2303      	movs	r3, #3
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_DeInit+0xbc>
 80026ea:	2300      	movs	r3, #0
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d132      	bne.n	8002762 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	4947      	ldr	r1, [pc, #284]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800270a:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	4944      	ldr	r1, [pc, #272]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 8002714:	4013      	ands	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	4940      	ldr	r1, [pc, #256]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 8002722:	4013      	ands	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	493d      	ldr	r1, [pc, #244]	; (8002824 <HAL_GPIO_DeInit+0x1f4>)
 8002730:	4013      	ands	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002744:	4a2e      	ldr	r2, [pc, #184]	; (8002800 <HAL_GPIO_DeInit+0x1d0>)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	43da      	mvns	r2, r3
 8002754:	482a      	ldr	r0, [pc, #168]	; (8002800 <HAL_GPIO_DeInit+0x1d0>)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	400a      	ands	r2, r1
 800275c:	3302      	adds	r3, #2
 800275e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2103      	movs	r1, #3
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	08d2      	lsrs	r2, r2, #3
 8002798:	4019      	ands	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2103      	movs	r1, #3
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	401a      	ands	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	2101      	movs	r1, #1
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2103      	movs	r1, #3
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f af2e 	bls.w	800264c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40013800 	.word	0x40013800
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40021400 	.word	0x40021400
 800281c:	40021800 	.word	0x40021800
 8002820:	40021c00 	.word	0x40021c00
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e001      	b.n	800284a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f806 	bl	80028bc <HAL_GPIO_EXTI_Callback>
  }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d4:	b08f      	sub	sp, #60	; 0x3c
 80028d6:	af0a      	add	r7, sp, #40	; 0x28
 80028d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e10f      	b.n	8002b04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f005 fb0e 	bl	8007f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2203      	movs	r2, #3
 8002908:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f001 ffbf 	bl	80048a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	687e      	ldr	r6, [r7, #4]
 8002930:	466d      	mov	r5, sp
 8002932:	f106 0410 	add.w	r4, r6, #16
 8002936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800293a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800293c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800293e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002942:	e885 0003 	stmia.w	r5, {r0, r1}
 8002946:	1d33      	adds	r3, r6, #4
 8002948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	f001 fe96 	bl	800467c <USB_CoreInit>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0d0      	b.n	8002b04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 ffad 	bl	80048c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e04a      	b.n	8002a0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	333d      	adds	r3, #61	; 0x3d
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	333c      	adds	r3, #60	; 0x3c
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	b298      	uxth	r0, r3
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3344      	adds	r3, #68	; 0x44
 80029b0:	4602      	mov	r2, r0
 80029b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3340      	adds	r3, #64	; 0x40
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3348      	adds	r3, #72	; 0x48
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334c      	adds	r3, #76	; 0x4c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3354      	adds	r3, #84	; 0x54
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3301      	adds	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3af      	bcc.n	8002974 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e044      	b.n	8002aa4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3b5      	bcc.n	8002a1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	687e      	ldr	r6, [r7, #4]
 8002ab6:	466d      	mov	r5, sp
 8002ab8:	f106 0410 	add.w	r4, r6, #16
 8002abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002acc:	1d33      	adds	r3, r6, #4
 8002ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad0:	6838      	ldr	r0, [r7, #0]
 8002ad2:	f001 ff45 	bl	8004960 <USB_DevInit>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e00d      	b.n	8002b04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 f894 	bl	8005c2a <USB_DevDisconnect>

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_PCD_Start+0x1c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e020      	b.n	8002b6a <HAL_PCD_Start+0x5e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d109      	bne.n	8002b4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d005      	beq.n	8002b4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 fe97 	bl	8004884 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 f844 	bl	8005be8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b72:	b590      	push	{r4, r7, lr}
 8002b74:	b08d      	sub	sp, #52	; 0x34
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 f902 	bl	8005d92 <USB_GetMode>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 848a 	bne.w	80034aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 f866 	bl	8005c6c <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8480 	beq.w	80034a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 f853 	bl	8005c6c <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d107      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f002 0202 	and.w	r2, r2, #2
 8002bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 f841 	bl	8005c6c <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d161      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0210 	bic.w	r2, r2, #16
 8002c02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	0c5b      	lsrs	r3, r3, #17
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d124      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d035      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6a38      	ldr	r0, [r7, #32]
 8002c50:	f002 fe78 	bl	8005944 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c60:	441a      	add	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	6a1a      	ldr	r2, [r3, #32]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c72:	441a      	add	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
 8002c78:	e016      	b.n	8002ca8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	0c5b      	lsrs	r3, r3, #17
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d110      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6a38      	ldr	r0, [r7, #32]
 8002c92:	f002 fe57 	bl	8005944 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca2:	441a      	add	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0210 	orr.w	r2, r2, #16
 8002cb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 ffd5 	bl	8005c6c <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ccc:	f040 80a7 	bne.w	8002e1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 ffda 	bl	8005c92 <USB_ReadDevAllOutEpInterrupt>
 8002cde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ce0:	e099      	b.n	8002e16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 808e 	beq.w	8002e0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fffe 	bl	8005cfa <USB_ReadDevOutEPInterrupt>
 8002cfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	461a      	mov	r2, r3
 8002d18:	2301      	movs	r3, #1
 8002d1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 feaa 	bl	8003a78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00c      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 ff80 	bl	8003c48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2310      	movs	r3, #16
 8002d62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d030      	beq.n	8002dd0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b80      	cmp	r3, #128	; 0x80
 8002d78:	d109      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2200      	movs	r2, #0
 8002db0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f005 f9b7 	bl	800812c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2302      	movs	r3, #2
 8002dce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de6:	461a      	mov	r2, r3
 8002de8:	2320      	movs	r3, #32
 8002dea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	461a      	mov	r2, r3
 8002e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f af62 	bne.w	8002ce2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 ff22 	bl	8005c6c <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e32:	f040 80db 	bne.w	8002fec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 ff43 	bl	8005cc6 <USB_ReadDevAllInEpInterrupt>
 8002e40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e46:	e0cd      	b.n	8002fe4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80c2 	beq.w	8002fd8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 ff69 	bl	8005d36 <USB_ReadDevInEPInterrupt>
 8002e64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d057      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69f9      	ldr	r1, [r7, #28]
 8002e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e90:	4013      	ands	r3, r2
 8002e92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d132      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	334c      	adds	r3, #76	; 0x4c
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4403      	add	r3, r0
 8002ece:	3348      	adds	r3, #72	; 0x48
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4419      	add	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4403      	add	r3, r0
 8002ee2:	334c      	adds	r3, #76	; 0x4c
 8002ee4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d113      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x3a2>
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3354      	adds	r3, #84	; 0x54
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f002 ff70 	bl	8005df4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f005 f881 	bl	8008022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f36:	461a      	mov	r2, r3
 8002f38:	2308      	movs	r3, #8
 8002f3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	461a      	mov	r2, r3
 8002f54:	2310      	movs	r3, #16
 8002f56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2340      	movs	r3, #64	; 0x40
 8002f72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d023      	beq.n	8002fc6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f80:	6a38      	ldr	r0, [r7, #32]
 8002f82:	f001 fe51 	bl	8004c28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	3338      	adds	r3, #56	; 0x38
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	78db      	ldrb	r3, [r3, #3]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f005 f8ce 	bl	8008150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fcc3 	bl	800395e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	3301      	adds	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f47f af2e 	bne.w	8002e48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fe3b 	bl	8005c6c <USB_ReadInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003000:	d122      	bne.n	8003048 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003028:	2100      	movs	r1, #0
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 feaa 	bl	8003d84 <HAL_PCDEx_LPM_Callback>
 8003030:	e002      	b.n	8003038 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f005 f86c 	bl	8008110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f002 fe0d 	bl	8005c6c <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305c:	d112      	bne.n	8003084 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f005 f828 	bl	80080c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003082:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fdef 	bl	8005c6c <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003098:	f040 80b7 	bne.w	800320a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2110      	movs	r1, #16
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fdb6 	bl	8004c28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c0:	e046      	b.n	8003150 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ce:	461a      	mov	r2, r3
 80030d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003108:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311a:	0151      	lsls	r1, r2, #5
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	440a      	add	r2, r1
 8003120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003128:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	440a      	add	r2, r1
 8003140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003148:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	3301      	adds	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003156:	429a      	cmp	r2, r3
 8003158:	d3b3      	bcc.n	80030c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003168:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800316c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003186:	f043 030b 	orr.w	r3, r3, #11
 800318a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319c:	f043 030b 	orr.w	r3, r3, #11
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	e015      	b.n	80031d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ca:	f043 030b 	orr.w	r3, r3, #11
 80031ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031f4:	461a      	mov	r2, r3
 80031f6:	f002 fdfd 	bl	8005df4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fd2c 	bl	8005c6c <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321e:	d124      	bne.n	800326a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f002 fdc2 	bl	8005dae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fd77 	bl	8004d22 <USB_GetDevSpeed>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	f001 fa10 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8003244:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	4620      	mov	r0, r4
 8003250:	f001 fa76 	bl	8004740 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f004 ff0c 	bl	8008072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003268:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f002 fcfc 	bl	8005c6c <USB_ReadInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b08      	cmp	r3, #8
 800327c:	d10a      	bne.n	8003294 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f004 fee9 	bl	8008056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f002 0208 	and.w	r2, r2, #8
 8003292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fce7 	bl	8005c6c <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b80      	cmp	r3, #128	; 0x80
 80032a6:	d122      	bne.n	80032ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b4:	2301      	movs	r3, #1
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	e014      	b.n	80032e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fb0f 	bl	80038fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d3e5      	bcc.n	80032ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 fcba 	bl	8005c6c <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003302:	d13b      	bne.n	800337c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003304:	2301      	movs	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
 8003308:	e02b      	b.n	8003362 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d115      	bne.n	800335c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003330:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	da12      	bge.n	800335c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	333f      	adds	r3, #63	; 0x3f
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fad0 	bl	80038fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	3301      	adds	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	429a      	cmp	r2, r3
 800336a:	d3ce      	bcc.n	800330a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800337a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f002 fc73 	bl	8005c6c <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003390:	d155      	bne.n	800343e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003392:	2301      	movs	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	e045      	b.n	8003424 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d12e      	bne.n	800341e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da2b      	bge.n	800341e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d121      	bne.n	800341e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800341a:	6053      	str	r3, [r2, #4]
            break;
 800341c:	e007      	b.n	800342e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	3301      	adds	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	429a      	cmp	r2, r3
 800342c:	d3b4      	bcc.n	8003398 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800343c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fc12 	bl	8005c6c <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d10a      	bne.n	800346a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f004 fe8d 	bl	8008174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f002 fbfc 	bl	8005c6c <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d115      	bne.n	80034aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f004 fe7d 	bl	8008190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	e000      	b.n	80034aa <HAL_PCD_IRQHandler+0x938>
      return;
 80034a8:	bf00      	nop
    }
  }
}
 80034aa:	3734      	adds	r7, #52	; 0x34
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}

080034b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_PCD_SetAddress+0x1a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e013      	b.n	80034f2 <HAL_PCD_SetAddress+0x42>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 fb5a 	bl	8005b9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	4608      	mov	r0, r1
 8003504:	4611      	mov	r1, r2
 8003506:	461a      	mov	r2, r3
 8003508:	4603      	mov	r3, r0
 800350a:	70fb      	strb	r3, [r7, #3]
 800350c:	460b      	mov	r3, r1
 800350e:	803b      	strh	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da0f      	bge.n	8003540 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	f003 020f 	and.w	r2, r3, #15
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3338      	adds	r3, #56	; 0x38
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	705a      	strb	r2, [r3, #1]
 800353e:	e00f      	b.n	8003560 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800356c:	883a      	ldrh	r2, [r7, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	78ba      	ldrb	r2, [r7, #2]
 8003576:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800358a:	78bb      	ldrb	r3, [r7, #2]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d102      	bne.n	8003596 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_PCD_EP_Open+0xaa>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e00e      	b.n	80035c2 <HAL_PCD_EP_Open+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fbda 	bl	8004d6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80035c0:	7afb      	ldrb	r3, [r7, #11]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	da0f      	bge.n	80035fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	f003 020f 	and.w	r2, r3, #15
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	3338      	adds	r3, #56	; 0x38
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	705a      	strb	r2, [r3, #1]
 80035fc:	e00f      	b.n	800361e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 020f 	and.w	r2, r3, #15
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	3304      	adds	r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_PCD_EP_Close+0x6e>
 8003634:	2302      	movs	r3, #2
 8003636:	e00e      	b.n	8003656 <HAL_PCD_EP_Close+0x8c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f001 fc18 	bl	8004e7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	460b      	mov	r3, r1
 800366c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366e:	7afb      	ldrb	r3, [r7, #11]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d102      	bne.n	80036ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ba:	7afb      	ldrb	r3, [r7, #11]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	6979      	ldr	r1, [r7, #20]
 80036d2:	f001 fef7 	bl	80054c4 <USB_EP0StartXfer>
 80036d6:	e008      	b.n	80036ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	6979      	ldr	r1, [r7, #20]
 80036e6:	f001 fca5 	bl	8005034 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	460b      	mov	r3, r1
 8003702:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003704:	7afb      	ldrb	r3, [r7, #11]
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	3338      	adds	r3, #56	; 0x38
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2200      	movs	r2, #0
 800372c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2201      	movs	r2, #1
 8003732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	b2da      	uxtb	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	f001 fead 	bl	80054c4 <USB_EP0StartXfer>
 800376a:	e008      	b.n	800377e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	6979      	ldr	r1, [r7, #20]
 800377a:	f001 fc5b 	bl	8005034 <USB_EPStartXfer>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d901      	bls.n	80037a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e050      	b.n	8003848 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da0f      	bge.n	80037ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3338      	adds	r3, #56	; 0x38
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	705a      	strb	r2, [r3, #1]
 80037cc:	e00d      	b.n	80037ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	3304      	adds	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_PCD_EP_SetStall+0x82>
 8003806:	2302      	movs	r3, #2
 8003808:	e01e      	b.n	8003848 <HAL_PCD_EP_SetStall+0xc0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	4618      	mov	r0, r3
 800381a:	f002 f8eb 	bl	80059f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	b2d9      	uxtb	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003838:	461a      	mov	r2, r3
 800383a:	f002 fadb 	bl	8005df4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d901      	bls.n	800386e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800386e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	da0f      	bge.n	8003896 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3338      	adds	r3, #56	; 0x38
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	705a      	strb	r2, [r3, #1]
 8003894:	e00f      	b.n	80038b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 020f 	and.w	r2, r3, #15
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_PCD_EP_ClrStall+0x86>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e00e      	b.n	80038f4 <HAL_PCD_EP_ClrStall+0xa4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68f9      	ldr	r1, [r7, #12]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 f8f3 	bl	8005ad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0c      	bge.n	800392a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3338      	adds	r3, #56	; 0x38
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e00c      	b.n	8003944 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68f9      	ldr	r1, [r7, #12]
 800394a:	4618      	mov	r0, r3
 800394c:	f001 ff12 	bl	8005774 <USB_EPStopXfer>
 8003950:	4603      	mov	r3, r0
 8003952:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003954:	7afb      	ldrb	r3, [r7, #11]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b08a      	sub	sp, #40	; 0x28
 8003962:	af02      	add	r7, sp, #8
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	3338      	adds	r3, #56	; 0x38
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	3304      	adds	r3, #4
 8003984:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	429a      	cmp	r2, r3
 8003990:	d901      	bls.n	8003996 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06c      	b.n	8003a70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d902      	bls.n	80039b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3303      	adds	r3, #3
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ba:	e02b      	b.n	8003a14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d902      	bls.n	80039d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3303      	adds	r3, #3
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4603      	mov	r3, r0
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f001 ff66 	bl	80058c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1a      	ldr	r2, [r3, #32]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d809      	bhi.n	8003a3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d203      	bcs.n	8003a3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1be      	bne.n	80039bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d811      	bhi.n	8003a6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	2201      	movs	r2, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	6939      	ldr	r1, [r7, #16]
 8003a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	333c      	adds	r3, #60	; 0x3c
 8003a90:	3304      	adds	r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d17b      	bne.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4a61      	ldr	r2, [pc, #388]	; (8003c40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	f240 80b9 	bls.w	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80b3 	beq.w	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	461a      	mov	r2, r3
 8003adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae0:	6093      	str	r3, [r2, #8]
 8003ae2:	e0a7      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afa:	461a      	mov	r2, r3
 8003afc:	2320      	movs	r3, #32
 8003afe:	6093      	str	r3, [r2, #8]
 8003b00:	e098      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f040 8093 	bne.w	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d90f      	bls.n	8003b36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b32:	6093      	str	r3, [r2, #8]
 8003b34:	e07e      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	3304      	adds	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	0159      	lsls	r1, r3, #5
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d114      	bne.n	8003b98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b80:	461a      	mov	r2, r3
 8003b82:	2101      	movs	r1, #1
 8003b84:	f002 f936 	bl	8005df4 <USB_EP0_OutStart>
 8003b88:	e006      	b.n	8003b98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	441a      	add	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f004 fa24 	bl	8007fec <HAL_PCD_DataOutStageCallback>
 8003ba4:	e046      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4a26      	ldr	r2, [pc, #152]	; (8003c44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d124      	bne.n	8003bf8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	6093      	str	r3, [r2, #8]
 8003bcc:	e032      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	2320      	movs	r3, #32
 8003be8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f004 f9fb 	bl	8007fec <HAL_PCD_DataOutStageCallback>
 8003bf6:	e01d      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d114      	bne.n	8003c28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d108      	bne.n	8003c28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c20:	461a      	mov	r2, r3
 8003c22:	2100      	movs	r1, #0
 8003c24:	f002 f8e6 	bl	8005df4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f004 f9dc 	bl	8007fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	4f54300a 	.word	0x4f54300a
 8003c44:	4f54310a 	.word	0x4f54310a

08003c48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	333c      	adds	r3, #60	; 0x3c
 8003c60:	3304      	adds	r3, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d90e      	bls.n	8003c9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f004 f993 	bl	8007fc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d90c      	bls.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	f002 f898 	bl	8005df4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	4f54300a 	.word	0x4f54300a

08003cd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cf2:	883b      	ldrh	r3, [r7, #0]
 8003cf4:	0419      	lsls	r1, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003d00:	e028      	b.n	8003d54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e00d      	b.n	8003d32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	3340      	adds	r3, #64	; 0x40
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d3ec      	bcc.n	8003d16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d3c:	883b      	ldrh	r3, [r7, #0]
 8003d3e:	0418      	lsls	r0, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4302      	orrs	r2, r0
 8003d4c:	3340      	adds	r3, #64	; 0x40
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e267      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e242      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a75      	ldr	r2, [pc, #468]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6f      	ldr	r2, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6c      	ldr	r2, [pc, #432]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b69      	ldr	r3, [pc, #420]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a68      	ldr	r2, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a65      	ldr	r2, [pc, #404]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fb0a 	bl	800146c <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd fb06 	bl	800146c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e207      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd faf6 	bl	800146c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd faf2 	bl	800146c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1f3      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c7      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4937      	ldr	r1, [pc, #220]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_OscConfig+0x244>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd faab 	bl	800146c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fd faa7 	bl	800146c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a8      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4925      	ldr	r1, [pc, #148]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x244>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fa8a 	bl	800146c <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fd fa86 	bl	800146c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e187      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d036      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x248>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd fa6a 	bl	800146c <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fa66 	bl	800146c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e167      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e01b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x248>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fa53 	bl	800146c <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e00e      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fd fa4f 	bl	800146c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d907      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e150      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	42470000 	.word	0x42470000
 8003fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ea      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8097 	beq.w	8004130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	4b7d      	ldr	r3, [pc, #500]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a7c      	ldr	r2, [pc, #496]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004032:	4b77      	ldr	r3, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403e:	4b74      	ldr	r3, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a73      	ldr	r2, [pc, #460]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fd fa0f 	bl	800146c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fd fa0b 	bl	800146c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e10c      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x2ea>
 8004078:	4b64      	ldr	r3, [pc, #400]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a63      	ldr	r2, [pc, #396]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x324>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x30c>
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a5e      	ldr	r2, [pc, #376]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a5b      	ldr	r2, [pc, #364]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0x324>
 80040a8:	4b58      	ldr	r3, [pc, #352]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b55      	ldr	r3, [pc, #340]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a54      	ldr	r2, [pc, #336]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040ba:	f023 0304 	bic.w	r3, r3, #4
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fd f9d0 	bl	800146c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fd f9cc 	bl	800146c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0cb      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	4b49      	ldr	r3, [pc, #292]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ee      	beq.n	80040d0 <HAL_RCC_OscConfig+0x334>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fd f9ba 	bl	800146c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fd f9b6 	bl	800146c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0b5      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ee      	bne.n	80040fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a1 	beq.w	800427c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413a:	4b34      	ldr	r3, [pc, #208]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b08      	cmp	r3, #8
 8004144:	d05c      	beq.n	8004200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d141      	bne.n	80041d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd f98a 	bl	800146c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd f986 	bl	800146c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e087      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	3b01      	subs	r3, #1
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	491b      	ldr	r1, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fd f95f 	bl	800146c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fd f95b 	bl	800146c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e05c      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x416>
 80041d0:	e054      	b.n	800427c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fd f948 	bl	800146c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fd f944 	bl	800146c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e045      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x444>
 80041fe:	e03d      	b.n	800427c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e038      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
 800420c:	40023800 	.word	0x40023800
 8004210:	40007000 	.word	0x40007000
 8004214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d028      	beq.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d121      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d11a      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	4293      	cmp	r3, r2
 8004252:	d111      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	3b01      	subs	r3, #1
 8004262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0cc      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d90c      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b8      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e0:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	494d      	ldr	r1, [pc, #308]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d044      	beq.n	80043ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d119      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	2b03      	cmp	r3, #3
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435a:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e067      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4934      	ldr	r1, [pc, #208]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800437c:	f7fd f876 	bl	800146c <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	e00a      	b.n	800439a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fd f872 	bl	800146c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e04f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 020c 	and.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d1eb      	bne.n	8004384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d20c      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4916      	ldr	r1, [pc, #88]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004412:	f000 f821 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc ffd6 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00
 8004448:	40023800 	.word	0x40023800
 800444c:	08008630 	.word	0x08008630
 8004450:	2000000c 	.word	0x2000000c
 8004454:	20000010 	.word	0x20000010

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b094      	sub	sp, #80	; 0x50
 800445e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	647b      	str	r3, [r7, #68]	; 0x44
 8004464:	2300      	movs	r3, #0
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	2300      	movs	r3, #0
 800446a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004470:	4b79      	ldr	r3, [pc, #484]	; (8004658 <HAL_RCC_GetSysClockFreq+0x200>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d00d      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x40>
 800447c:	2b08      	cmp	r3, #8
 800447e:	f200 80e1 	bhi.w	8004644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x34>
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x3a>
 800448a:	e0db      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b73      	ldr	r3, [pc, #460]	; (800465c <HAL_RCC_GetSysClockFreq+0x204>)
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004490:	e0db      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004492:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_RCC_GetSysClockFreq+0x208>)
 8004494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004496:	e0d8      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004498:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_RCC_GetSysClockFreq+0x200>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b6d      	ldr	r3, [pc, #436]	; (8004658 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d063      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2200      	movs	r2, #0
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
 80044c2:	2300      	movs	r3, #0
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044ca:	4622      	mov	r2, r4
 80044cc:	462b      	mov	r3, r5
 80044ce:	f04f 0000 	mov.w	r0, #0
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	0159      	lsls	r1, r3, #5
 80044d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044dc:	0150      	lsls	r0, r2, #5
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4621      	mov	r1, r4
 80044e4:	1a51      	subs	r1, r2, r1
 80044e6:	6139      	str	r1, [r7, #16]
 80044e8:	4629      	mov	r1, r5
 80044ea:	eb63 0301 	sbc.w	r3, r3, r1
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044fc:	4659      	mov	r1, fp
 80044fe:	018b      	lsls	r3, r1, #6
 8004500:	4651      	mov	r1, sl
 8004502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004506:	4651      	mov	r1, sl
 8004508:	018a      	lsls	r2, r1, #6
 800450a:	4651      	mov	r1, sl
 800450c:	ebb2 0801 	subs.w	r8, r2, r1
 8004510:	4659      	mov	r1, fp
 8004512:	eb63 0901 	sbc.w	r9, r3, r1
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452a:	4690      	mov	r8, r2
 800452c:	4699      	mov	r9, r3
 800452e:	4623      	mov	r3, r4
 8004530:	eb18 0303 	adds.w	r3, r8, r3
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	462b      	mov	r3, r5
 8004538:	eb49 0303 	adc.w	r3, r9, r3
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800454a:	4629      	mov	r1, r5
 800454c:	024b      	lsls	r3, r1, #9
 800454e:	4621      	mov	r1, r4
 8004550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004554:	4621      	mov	r1, r4
 8004556:	024a      	lsls	r2, r1, #9
 8004558:	4610      	mov	r0, r2
 800455a:	4619      	mov	r1, r3
 800455c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455e:	2200      	movs	r2, #0
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
 8004562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004568:	f7fb fe2e 	bl	80001c8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004574:	e058      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004576:	4b38      	ldr	r3, [pc, #224]	; (8004658 <HAL_RCC_GetSysClockFreq+0x200>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	2200      	movs	r2, #0
 800457e:	4618      	mov	r0, r3
 8004580:	4611      	mov	r1, r2
 8004582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	0159      	lsls	r1, r3, #5
 800459e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a2:	0150      	lsls	r0, r2, #5
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4641      	mov	r1, r8
 80045aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80045ae:	4649      	mov	r1, r9
 80045b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045c8:	ebb2 040a 	subs.w	r4, r2, sl
 80045cc:	eb63 050b 	sbc.w	r5, r3, fp
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	00eb      	lsls	r3, r5, #3
 80045da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045de:	00e2      	lsls	r2, r4, #3
 80045e0:	4614      	mov	r4, r2
 80045e2:	461d      	mov	r5, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	18e3      	adds	r3, r4, r3
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	464b      	mov	r3, r9
 80045ec:	eb45 0303 	adc.w	r3, r5, r3
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045fe:	4629      	mov	r1, r5
 8004600:	028b      	lsls	r3, r1, #10
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004608:	4621      	mov	r1, r4
 800460a:	028a      	lsls	r2, r1, #10
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	61fa      	str	r2, [r7, #28]
 8004618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461c:	f7fb fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_GetSysClockFreq+0x200>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800463a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004642:	e002      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetSysClockFreq+0x204>)
 8004646:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800464c:	4618      	mov	r0, r3
 800464e:	3750      	adds	r7, #80	; 0x50
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	00f42400 	.word	0x00f42400
 8004660:	007a1200 	.word	0x007a1200

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_RCC_GetHCLKFreq+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	2000000c 	.word	0x2000000c

0800467c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800467c:	b084      	sub	sp, #16
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	f107 001c 	add.w	r0, r7, #28
 800468a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	2b01      	cmp	r3, #1
 8004692:	d122      	bne.n	80046da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 fbee 	bl	8005eb0 <USB_CoreReset>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e01a      	b.n	8004710 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 fbe2 	bl	8005eb0 <USB_CoreReset>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
 8004702:	e005      	b.n	8004710 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10b      	bne.n	800472e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f043 0206 	orr.w	r2, r3, #6
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800473a:	b004      	add	sp, #16
 800473c:	4770      	bx	lr
	...

08004740 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d165      	bne.n	8004820 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a41      	ldr	r2, [pc, #260]	; (800485c <USB_SetTurnaroundTime+0x11c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d906      	bls.n	800476a <USB_SetTurnaroundTime+0x2a>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <USB_SetTurnaroundTime+0x120>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d202      	bcs.n	800476a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004764:	230f      	movs	r3, #15
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e062      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4a3c      	ldr	r2, [pc, #240]	; (8004860 <USB_SetTurnaroundTime+0x120>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d306      	bcc.n	8004780 <USB_SetTurnaroundTime+0x40>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4a3b      	ldr	r2, [pc, #236]	; (8004864 <USB_SetTurnaroundTime+0x124>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d202      	bcs.n	8004780 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800477a:	230e      	movs	r3, #14
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e057      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4a38      	ldr	r2, [pc, #224]	; (8004864 <USB_SetTurnaroundTime+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d306      	bcc.n	8004796 <USB_SetTurnaroundTime+0x56>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a37      	ldr	r2, [pc, #220]	; (8004868 <USB_SetTurnaroundTime+0x128>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d202      	bcs.n	8004796 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004790:	230d      	movs	r3, #13
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e04c      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4a33      	ldr	r2, [pc, #204]	; (8004868 <USB_SetTurnaroundTime+0x128>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d306      	bcc.n	80047ac <USB_SetTurnaroundTime+0x6c>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a32      	ldr	r2, [pc, #200]	; (800486c <USB_SetTurnaroundTime+0x12c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d802      	bhi.n	80047ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047a6:	230c      	movs	r3, #12
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e041      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a2f      	ldr	r2, [pc, #188]	; (800486c <USB_SetTurnaroundTime+0x12c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d906      	bls.n	80047c2 <USB_SetTurnaroundTime+0x82>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a2e      	ldr	r2, [pc, #184]	; (8004870 <USB_SetTurnaroundTime+0x130>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d802      	bhi.n	80047c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047bc:	230b      	movs	r3, #11
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e036      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <USB_SetTurnaroundTime+0x130>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d906      	bls.n	80047d8 <USB_SetTurnaroundTime+0x98>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <USB_SetTurnaroundTime+0x134>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d802      	bhi.n	80047d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047d2:	230a      	movs	r3, #10
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e02b      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4a26      	ldr	r2, [pc, #152]	; (8004874 <USB_SetTurnaroundTime+0x134>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d906      	bls.n	80047ee <USB_SetTurnaroundTime+0xae>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a25      	ldr	r2, [pc, #148]	; (8004878 <USB_SetTurnaroundTime+0x138>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d202      	bcs.n	80047ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047e8:	2309      	movs	r3, #9
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e020      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <USB_SetTurnaroundTime+0x138>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d306      	bcc.n	8004804 <USB_SetTurnaroundTime+0xc4>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <USB_SetTurnaroundTime+0x13c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d802      	bhi.n	8004804 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047fe:	2308      	movs	r3, #8
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e015      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4a1d      	ldr	r2, [pc, #116]	; (800487c <USB_SetTurnaroundTime+0x13c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d906      	bls.n	800481a <USB_SetTurnaroundTime+0xda>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <USB_SetTurnaroundTime+0x140>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d202      	bcs.n	800481a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004814:	2307      	movs	r3, #7
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e00a      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800481a:	2306      	movs	r3, #6
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e007      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004826:	2309      	movs	r3, #9
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e001      	b.n	8004830 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800482c:	2309      	movs	r3, #9
 800482e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004848:	431a      	orrs	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	00d8acbf 	.word	0x00d8acbf
 8004860:	00e4e1c0 	.word	0x00e4e1c0
 8004864:	00f42400 	.word	0x00f42400
 8004868:	01067380 	.word	0x01067380
 800486c:	011a499f 	.word	0x011a499f
 8004870:	01312cff 	.word	0x01312cff
 8004874:	014ca43f 	.word	0x014ca43f
 8004878:	016e3600 	.word	0x016e3600
 800487c:	01a6ab1f 	.word	0x01a6ab1f
 8004880:	01e84800 	.word	0x01e84800

08004884 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d115      	bne.n	8004916 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048f6:	2001      	movs	r0, #1
 80048f8:	f7fc fdc4 	bl	8001484 <HAL_Delay>
      ms++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3301      	adds	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f001 fa45 	bl	8005d92 <USB_GetMode>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d01e      	beq.n	800494c <USB_SetCurrentMode+0x84>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b31      	cmp	r3, #49	; 0x31
 8004912:	d9f0      	bls.n	80048f6 <USB_SetCurrentMode+0x2e>
 8004914:	e01a      	b.n	800494c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d115      	bne.n	8004948 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004928:	2001      	movs	r0, #1
 800492a:	f7fc fdab 	bl	8001484 <HAL_Delay>
      ms++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 fa2c 	bl	8005d92 <USB_GetMode>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <USB_SetCurrentMode+0x84>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b31      	cmp	r3, #49	; 0x31
 8004944:	d9f0      	bls.n	8004928 <USB_SetCurrentMode+0x60>
 8004946:	e001      	b.n	800494c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e005      	b.n	8004958 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b32      	cmp	r3, #50	; 0x32
 8004950:	d101      	bne.n	8004956 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004960:	b084      	sub	sp, #16
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800496e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e009      	b.n	8004994 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3340      	adds	r3, #64	; 0x40
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	2200      	movs	r2, #0
 800498c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3301      	adds	r3, #1
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0e      	cmp	r3, #14
 8004998:	d9f2      	bls.n	8004980 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11c      	bne.n	80049da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
 80049d8:	e00b      	b.n	80049f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049f8:	461a      	mov	r2, r3
 80049fa:	2300      	movs	r3, #0
 80049fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	4619      	mov	r1, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	680b      	ldr	r3, [r1, #0]
 8004a10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10c      	bne.n	8004a32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f965 	bl	8004cf0 <USB_SetDevSpeed>
 8004a26:	e008      	b.n	8004a3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a28:	2101      	movs	r1, #1
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f960 	bl	8004cf0 <USB_SetDevSpeed>
 8004a30:	e003      	b.n	8004a3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a32:	2103      	movs	r1, #3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f95b 	bl	8004cf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8f3 	bl	8004c28 <USB_FlushTxFifo>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f91f 	bl	8004c90 <USB_FlushRxFifo>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	461a      	mov	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e043      	b.n	8004b0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a9c:	d118      	bne.n	8004ad0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e013      	b.n	8004ae2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e008      	b.n	8004ae2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3b7      	bcc.n	8004a86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	e043      	b.n	8004ba4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b32:	d118      	bne.n	8004b66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e013      	b.n	8004b78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e008      	b.n	8004b78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	2300      	movs	r3, #0
 8004b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3b7      	bcc.n	8004b1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f043 0210 	orr.w	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <USB_DevInit+0x2c4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f043 0208 	orr.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d107      	bne.n	8004c14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c20:	b004      	add	sp, #16
 8004c22:	4770      	bx	lr
 8004c24:	803c3800 	.word	0x803c3800

08004c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <USB_FlushTxFifo+0x64>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e01b      	b.n	8004c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	daf2      	bge.n	8004c36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	019b      	lsls	r3, r3, #6
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <USB_FlushTxFifo+0x64>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e006      	b.n	8004c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d0f0      	beq.n	8004c60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	00030d40 	.word	0x00030d40

08004c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a11      	ldr	r2, [pc, #68]	; (8004cec <USB_FlushRxFifo+0x5c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e018      	b.n	8004ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	daf2      	bge.n	8004c9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <USB_FlushRxFifo+0x5c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e006      	b.n	8004ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d0f0      	beq.n	8004cc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	00030d40 	.word	0x00030d40

08004cf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b087      	sub	sp, #28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0306 	and.w	r3, r3, #6
 8004d3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
 8004d46:	e00a      	b.n	8004d5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d002      	beq.n	8004d54 <USB_GetDevSpeed+0x32>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b06      	cmp	r3, #6
 8004d52:	d102      	bne.n	8004d5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d54:	2302      	movs	r3, #2
 8004d56:	75fb      	strb	r3, [r7, #23]
 8004d58:	e001      	b.n	8004d5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d5a:	230f      	movs	r3, #15
 8004d5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d13a      	bne.n	8004dfe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d155      	bne.n	8004e6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ddc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	059b      	lsls	r3, r3, #22
 8004de2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004de4:	4313      	orrs	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e036      	b.n	8004e6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	2101      	movs	r1, #1
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11a      	bne.n	8004e6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e52:	430b      	orrs	r3, r1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d161      	bne.n	8004f5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eae:	d11f      	bne.n	8004ef0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ece:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	2101      	movs	r1, #1
 8004f02:	fa01 f303 	lsl.w	r3, r1, r3
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f10:	4013      	ands	r3, r2
 8004f12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f34:	4013      	ands	r3, r2
 8004f36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	0159      	lsls	r1, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	440b      	add	r3, r1
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	4619      	mov	r1, r3
 8004f54:	4b35      	ldr	r3, [pc, #212]	; (800502c <USB_DeactivateEndpoint+0x1b0>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
 8004f5a:	e060      	b.n	800501e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f72:	d11f      	bne.n	8004fb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f303 	lsl.w	r3, r1, r3
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0159      	lsls	r1, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	440b      	add	r3, r1
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	4619      	mov	r1, r3
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <USB_DeactivateEndpoint+0x1b4>)
 800501a:	4013      	ands	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	ec337800 	.word	0xec337800
 8005030:	eff37800 	.word	0xeff37800

08005034 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b01      	cmp	r3, #1
 8005052:	f040 815c 	bne.w	800530e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d132      	bne.n	80050c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	0cdb      	lsrs	r3, r3, #19
 80050be:	04db      	lsls	r3, r3, #19
 80050c0:	6113      	str	r3, [r2, #16]
 80050c2:	e074      	b.n	80051ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050de:	0cdb      	lsrs	r3, r3, #19
 80050e0:	04db      	lsls	r3, r3, #19
 80050e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005102:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	440b      	add	r3, r1
 8005120:	1e59      	subs	r1, r3, #1
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	fbb1 f3f3 	udiv	r3, r1, r3
 800512a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800512c:	4b9d      	ldr	r3, [pc, #628]	; (80053a4 <USB_EPStartXfer+0x370>)
 800512e:	400b      	ands	r3, r1
 8005130:	69b9      	ldr	r1, [r7, #24]
 8005132:	0148      	lsls	r0, r1, #5
 8005134:	69f9      	ldr	r1, [r7, #28]
 8005136:	4401      	add	r1, r0
 8005138:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800513c:	4313      	orrs	r3, r2
 800513e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	0148      	lsls	r0, r1, #5
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	4401      	add	r1, r0
 800515e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d11f      	bne.n	80051ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005188:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800518c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d14b      	bne.n	800524c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	461a      	mov	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	791b      	ldrb	r3, [r3, #4]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d128      	bne.n	800522a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d110      	bne.n	800520a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e00f      	b.n	800522a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e133      	b.n	80054b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005266:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800526a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	791b      	ldrb	r3, [r3, #4]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d015      	beq.n	80052a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 811b 	beq.w	80054b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529a:	4313      	orrs	r3, r2
 800529c:	634b      	str	r3, [r1, #52]	; 0x34
 800529e:	e109      	b.n	80054b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d110      	bne.n	80052d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	e00f      	b.n	80052f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	6919      	ldr	r1, [r3, #16]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	b298      	uxth	r0, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	4603      	mov	r3, r0
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fade 	bl	80058c8 <USB_WritePacket>
 800530c:	e0d2      	b.n	80054b4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005328:	0cdb      	lsrs	r3, r3, #19
 800532a:	04db      	lsls	r3, r3, #19
 800532c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005348:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800534c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005350:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d126      	bne.n	80053a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	0148      	lsls	r0, r1, #5
 8005374:	69f9      	ldr	r1, [r7, #28]
 8005376:	4401      	add	r1, r0
 8005378:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800539e:	6113      	str	r3, [r2, #16]
 80053a0:	e03a      	b.n	8005418 <USB_EPStartXfer+0x3e4>
 80053a2:	bf00      	nop
 80053a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	8afa      	ldrh	r2, [r7, #22]
 80053c4:	fb03 f202 	mul.w	r2, r3, r2
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	8afb      	ldrh	r3, [r7, #22]
 80053dc:	04d9      	lsls	r1, r3, #19
 80053de:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <USB_EPStartXfer+0x48c>)
 80053e0:	400b      	ands	r3, r1
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	0148      	lsls	r0, r1, #5
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	4401      	add	r1, r0
 80053ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005408:	69b9      	ldr	r1, [r7, #24]
 800540a:	0148      	lsls	r0, r1, #5
 800540c:	69f9      	ldr	r1, [r7, #28]
 800540e:	4401      	add	r1, r0
 8005410:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10d      	bne.n	800543a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6919      	ldr	r1, [r3, #16]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	460a      	mov	r2, r1
 8005438:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	791b      	ldrb	r3, [r3, #4]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d128      	bne.n	8005494 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d110      	bne.n	8005474 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00f      	b.n	8005494 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	1ff80000 	.word	0x1ff80000

080054c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	f040 80ce 	bne.w	8005682 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d132      	bne.n	8005554 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005508:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800550c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005510:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	0cdb      	lsrs	r3, r3, #19
 800554e:	04db      	lsls	r3, r3, #19
 8005550:	6113      	str	r3, [r2, #16]
 8005552:	e04e      	b.n	80055f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	0cdb      	lsrs	r3, r3, #19
 8005570:	04db      	lsls	r3, r3, #19
 8005572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005592:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005596:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d903      	bls.n	80055ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	0148      	lsls	r0, r1, #5
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	4401      	add	r1, r0
 80055ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055ee:	4313      	orrs	r3, r2
 80055f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d11e      	bne.n	8005636 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	461a      	mov	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	e097      	b.n	8005766 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005654:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8083 	beq.w	8005766 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	6979      	ldr	r1, [r7, #20]
 8005678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567c:	4313      	orrs	r3, r2
 800567e:	634b      	str	r3, [r1, #52]	; 0x34
 8005680:	e071      	b.n	8005766 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	0cdb      	lsrs	r3, r3, #19
 800569e:	04db      	lsls	r3, r3, #19
 80056a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005714:	6939      	ldr	r1, [r7, #16]
 8005716:	0148      	lsls	r0, r1, #5
 8005718:	6979      	ldr	r1, [r7, #20]
 800571a:	4401      	add	r1, r0
 800571c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005720:	4313      	orrs	r3, r2
 8005722:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10d      	bne.n	8005746 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6919      	ldr	r1, [r3, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	460a      	mov	r2, r1
 8005744:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005760:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005764:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d14a      	bne.n	8005828 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057aa:	f040 8086 	bne.w	80058ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005802:	4293      	cmp	r3, r2
 8005804:	d902      	bls.n	800580c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
          break;
 800580a:	e056      	b.n	80058ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005824:	d0e7      	beq.n	80057f6 <USB_EPStopXfer+0x82>
 8005826:	e048      	b.n	80058ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005840:	d13b      	bne.n	80058ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005860:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005864:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f242 7210 	movw	r2, #10000	; 0x2710
 8005896:	4293      	cmp	r3, r2
 8005898:	d902      	bls.n	80058a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
          break;
 800589e:	e00c      	b.n	80058ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b8:	d0e7      	beq.n	800588a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4611      	mov	r1, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	460b      	mov	r3, r1
 80058d8:	71fb      	strb	r3, [r7, #7]
 80058da:	4613      	mov	r3, r2
 80058dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d123      	bne.n	8005936 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058ee:	88bb      	ldrh	r3, [r7, #4]
 80058f0:	3303      	adds	r3, #3
 80058f2:	089b      	lsrs	r3, r3, #2
 80058f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e018      	b.n	800592e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	031a      	lsls	r2, r3, #12
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	461a      	mov	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	3301      	adds	r3, #1
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d3e2      	bcc.n	80058fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3724      	adds	r7, #36	; 0x24
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005944:	b480      	push	{r7}
 8005946:	b08b      	sub	sp, #44	; 0x2c
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	b29b      	uxth	r3, r3
 8005960:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	e014      	b.n	800599a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	601a      	str	r2, [r3, #0]
    pDest++;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	3301      	adds	r3, #1
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	3301      	adds	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	3301      	adds	r3, #1
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	3301      	adds	r3, #1
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	3301      	adds	r3, #1
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3e6      	bcc.n	8005970 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059a2:	8bfb      	ldrh	r3, [r7, #30]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01e      	beq.n	80059e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b2:	461a      	mov	r2, r3
 80059b4:	f107 0310 	add.w	r3, r7, #16
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	701a      	strb	r2, [r3, #0]
      i++;
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	3301      	adds	r3, #1
 80059d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	3301      	adds	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059da:	8bfb      	ldrh	r3, [r7, #30]
 80059dc:	3b01      	subs	r3, #1
 80059de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059e0:	8bfb      	ldrh	r3, [r7, #30]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ea      	bne.n	80059bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	372c      	adds	r7, #44	; 0x2c
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d12c      	bne.n	8005a6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db12      	blt.n	8005a48 <USB_EPSetStall+0x54>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00f      	beq.n	8005a48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e02b      	b.n	8005ac2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	db12      	blt.n	8005aa2 <USB_EPSetStall+0xae>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00f      	beq.n	8005aa2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aa0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ac0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d128      	bne.n	8005b3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	791b      	ldrb	r3, [r3, #4]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d003      	beq.n	8005b1c <USB_EPClearStall+0x4c>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	791b      	ldrb	r3, [r3, #4]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d138      	bne.n	8005b8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e027      	b.n	8005b8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	791b      	ldrb	r3, [r3, #4]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d003      	beq.n	8005b6e <USB_EPClearStall+0x9e>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	791b      	ldrb	r3, [r3, #4]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d10f      	bne.n	8005b8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c16:	f023 0302 	bic.w	r3, r3, #2
 8005c1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c58:	f043 0302 	orr.w	r3, r3, #2
 8005c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	b29b      	uxth	r3, r3
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d28:	68bb      	ldr	r3, [r7, #8]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	01db      	lsls	r3, r3, #7
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4013      	ands	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d84:	68bb      	ldr	r3, [r7, #8]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	333c      	adds	r3, #60	; 0x3c
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4a26      	ldr	r2, [pc, #152]	; (8005eac <USB_EP0_OutStart+0xb8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d90a      	bls.n	8005e2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e28:	d101      	bne.n	8005e2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e037      	b.n	8005e9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f043 0318 	orr.w	r3, r3, #24
 8005e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d10f      	bne.n	8005e9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	4f54300a 	.word	0x4f54300a

08005eb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <USB_CoreReset+0x64>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e01b      	b.n	8005f06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	daf2      	bge.n	8005ebc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <USB_CoreReset+0x64>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e006      	b.n	8005f06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d0f0      	beq.n	8005ee6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	00030d40 	.word	0x00030d40

08005f18 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005f24:	2028      	movs	r0, #40	; 0x28
 8005f26:	f002 fab9 	bl	800849c <USBD_static_malloc>
 8005f2a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	32b0      	adds	r2, #176	; 0xb0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f42:	2302      	movs	r3, #2
 8005f44:	e08b      	b.n	800605e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	32b0      	adds	r2, #176	; 0xb0
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32b0      	adds	r2, #176	; 0xb0
 8005f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7c1b      	ldrb	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11b      	bne.n	8005faa <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005f72:	4b3d      	ldr	r3, [pc, #244]	; (8006068 <USBD_CUSTOM_HID_Init+0x150>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	3326      	adds	r3, #38	; 0x26
 8005f88:	2205      	movs	r2, #5
 8005f8a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005f8c:	4b37      	ldr	r3, [pc, #220]	; (800606c <USBD_CUSTOM_HID_Init+0x154>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	e01a      	b.n	8005fe0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <USBD_CUSTOM_HID_Init+0x150>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f003 020f 	and.w	r2, r3, #15
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	3326      	adds	r3, #38	; 0x26
 8005fc0:	2205      	movs	r2, #5
 8005fc2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005fc4:	4b29      	ldr	r3, [pc, #164]	; (800606c <USBD_CUSTOM_HID_Init+0x154>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 020f 	and.w	r2, r3, #15
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005fdc:	2205      	movs	r2, #5
 8005fde:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <USBD_CUSTOM_HID_Init+0x150>)
 8005fe2:	7819      	ldrb	r1, [r3, #0]
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f002 f946 	bl	800827a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <USBD_CUSTOM_HID_Init+0x150>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 020f 	and.w	r2, r3, #15
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	2201      	movs	r2, #1
 8006006:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006008:	4b18      	ldr	r3, [pc, #96]	; (800606c <USBD_CUSTOM_HID_Init+0x154>)
 800600a:	7819      	ldrb	r1, [r3, #0]
 800600c:	2302      	movs	r3, #2
 800600e:	2203      	movs	r2, #3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f002 f932 	bl	800827a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006016:	4b15      	ldr	r3, [pc, #84]	; (800606c <USBD_CUSTOM_HID_Init+0x154>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800602e:	2201      	movs	r2, #1
 8006030:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	33b0      	adds	r3, #176	; 0xb0
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800604e:	4b07      	ldr	r3, [pc, #28]	; (800606c <USBD_CUSTOM_HID_Init+0x154>)
 8006050:	7819      	ldrb	r1, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	2311      	movs	r3, #17
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f002 f9fe 	bl	8008458 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000092 	.word	0x20000092
 800606c:	20000093 	.word	0x20000093

08006070 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800607c:	4b37      	ldr	r3, [pc, #220]	; (800615c <USBD_CUSTOM_HID_DeInit+0xec>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f002 f91f 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006088:	4b34      	ldr	r3, [pc, #208]	; (800615c <USBD_CUSTOM_HID_DeInit+0xec>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	3324      	adds	r3, #36	; 0x24
 800609e:	2200      	movs	r2, #0
 80060a0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80060a2:	4b2e      	ldr	r3, [pc, #184]	; (800615c <USBD_CUSTOM_HID_DeInit+0xec>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 020f 	and.w	r2, r3, #15
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	3326      	adds	r3, #38	; 0x26
 80060b8:	2200      	movs	r2, #0
 80060ba:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80060bc:	4b28      	ldr	r3, [pc, #160]	; (8006160 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f002 f8ff 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 020f 	and.w	r2, r3, #15
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060e0:	2200      	movs	r2, #0
 80060e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f003 020f 	and.w	r2, r3, #15
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80060fc:	2200      	movs	r2, #0
 80060fe:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32b0      	adds	r2, #176	; 0xb0
 800610a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01f      	beq.n	8006152 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	33b0      	adds	r3, #176	; 0xb0
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	32b0      	adds	r2, #176	; 0xb0
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	4618      	mov	r0, r3
 8006136:	f002 f9bf 	bl	80084b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	32b0      	adds	r2, #176	; 0xb0
 8006144:	2100      	movs	r1, #0
 8006146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20000092 	.word	0x20000092
 8006160:	20000093 	.word	0x20000093

08006164 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	32b0      	adds	r2, #176	; 0xb0
 8006178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	e0f8      	b.n	800638a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d056      	beq.n	8006252 <USBD_CUSTOM_HID_Setup+0xee>
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	f040 80e8 	bne.w	800637a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	3b02      	subs	r3, #2
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d846      	bhi.n	8006242 <USBD_CUSTOM_HID_Setup+0xde>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <USBD_CUSTOM_HID_Setup+0x58>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	08006215 	.word	0x08006215
 80061c0:	080061f3 	.word	0x080061f3
 80061c4:	08006243 	.word	0x08006243
 80061c8:	08006243 	.word	0x08006243
 80061cc:	08006243 	.word	0x08006243
 80061d0:	08006243 	.word	0x08006243
 80061d4:	08006243 	.word	0x08006243
 80061d8:	08006225 	.word	0x08006225
 80061dc:	08006203 	.word	0x08006203
 80061e0:	080061e5 	.word	0x080061e5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	615a      	str	r2, [r3, #20]
          break;
 80061f0:	e02e      	b.n	8006250 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3314      	adds	r3, #20
 80061f6:	2201      	movs	r2, #1
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 fca8 	bl	8007b50 <USBD_CtlSendData>
          break;
 8006200:	e026      	b.n	8006250 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	885b      	ldrh	r3, [r3, #2]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b29b      	uxth	r3, r3
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	619a      	str	r2, [r3, #24]
          break;
 8006212:	e01d      	b.n	8006250 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3318      	adds	r3, #24
 8006218:	2201      	movs	r2, #1
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fc97 	bl	8007b50 <USBD_CtlSendData>
          break;
 8006222:	e015      	b.n	8006250 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2201      	movs	r2, #1
 8006228:	621a      	str	r2, [r3, #32]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800622a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	88db      	ldrh	r3, [r3, #6]
 8006230:	2b11      	cmp	r3, #17
 8006232:	bf28      	it	cs
 8006234:	2311      	movcs	r3, #17
 8006236:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006238:	461a      	mov	r2, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fcb4 	bl	8007ba8 <USBD_CtlPrepareRx>
          break;
 8006240:	e006      	b.n	8006250 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fc12 	bl	8007a6e <USBD_CtlError>
          ret = USBD_FAIL;
 800624a:	2303      	movs	r3, #3
 800624c:	75fb      	strb	r3, [r7, #23]
          break;
 800624e:	bf00      	nop
      }
      break;
 8006250:	e09a      	b.n	8006388 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	2b0b      	cmp	r3, #11
 8006258:	f200 8086 	bhi.w	8006368 <USBD_CUSTOM_HID_Setup+0x204>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <USBD_CUSTOM_HID_Setup+0x100>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006295 	.word	0x08006295
 8006268:	08006377 	.word	0x08006377
 800626c:	08006369 	.word	0x08006369
 8006270:	08006369 	.word	0x08006369
 8006274:	08006369 	.word	0x08006369
 8006278:	08006369 	.word	0x08006369
 800627c:	080062bf 	.word	0x080062bf
 8006280:	08006369 	.word	0x08006369
 8006284:	08006369 	.word	0x08006369
 8006288:	08006369 	.word	0x08006369
 800628c:	08006317 	.word	0x08006317
 8006290:	08006341 	.word	0x08006341
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b03      	cmp	r3, #3
 800629e:	d107      	bne.n	80062b0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062a0:	f107 030e 	add.w	r3, r7, #14
 80062a4:	2202      	movs	r2, #2
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fc51 	bl	8007b50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062ae:	e063      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 fbdb 	bl	8007a6e <USBD_CtlError>
            ret = USBD_FAIL;
 80062b8:	2303      	movs	r3, #3
 80062ba:	75fb      	strb	r3, [r7, #23]
          break;
 80062bc:	e05c      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	885b      	ldrh	r3, [r3, #2]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b22      	cmp	r3, #34	; 0x22
 80062c8:	d110      	bne.n	80062ec <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88db      	ldrh	r3, [r3, #6]
 80062ce:	2b21      	cmp	r3, #33	; 0x21
 80062d0:	bf28      	it	cs
 80062d2:	2321      	movcs	r3, #33	; 0x21
 80062d4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	33b0      	adds	r3, #176	; 0xb0
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	e00d      	b.n	8006308 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	885b      	ldrh	r3, [r3, #2]
 80062f0:	0a1b      	lsrs	r3, r3, #8
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b21      	cmp	r3, #33	; 0x21
 80062f6:	d107      	bne.n	8006308 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80062f8:	4b26      	ldr	r3, [pc, #152]	; (8006394 <USBD_CUSTOM_HID_Setup+0x230>)
 80062fa:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	88db      	ldrh	r3, [r3, #6]
 8006300:	2b09      	cmp	r3, #9
 8006302:	bf28      	it	cs
 8006304:	2309      	movcs	r3, #9
 8006306:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006308:	8bfb      	ldrh	r3, [r7, #30]
 800630a:	461a      	mov	r2, r3
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 fc1e 	bl	8007b50 <USBD_CtlSendData>
          break;
 8006314:	e030      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b03      	cmp	r3, #3
 8006320:	d107      	bne.n	8006332 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	331c      	adds	r3, #28
 8006326:	2201      	movs	r2, #1
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fc10 	bl	8007b50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006330:	e022      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fb9a 	bl	8007a6e <USBD_CtlError>
            ret = USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	75fb      	strb	r3, [r7, #23]
          break;
 800633e:	e01b      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b03      	cmp	r3, #3
 800634a:	d106      	bne.n	800635a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	885b      	ldrh	r3, [r3, #2]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	61da      	str	r2, [r3, #28]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006358:	e00e      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fb86 	bl	8007a6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006362:	2303      	movs	r3, #3
 8006364:	75fb      	strb	r3, [r7, #23]
          break;
 8006366:	e007      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 fb7f 	bl	8007a6e <USBD_CtlError>
          ret = USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	75fb      	strb	r3, [r7, #23]
          break;
 8006374:	e000      	b.n	8006378 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006376:	bf00      	nop
      }
      break;
 8006378:	e006      	b.n	8006388 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fb76 	bl	8007a6e <USBD_CtlError>
      ret = USBD_FAIL;
 8006382:	2303      	movs	r3, #3
 8006384:	75fb      	strb	r3, [r7, #23]
      break;
 8006386:	bf00      	nop
  }
  return (uint8_t)ret;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3720      	adds	r7, #32
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	2000007c 	.word	0x2000007c

08006398 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	32b0      	adds	r2, #176	; 0xb0
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e021      	b.n	8006400 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	32b0      	adds	r2, #176	; 0xb0
 80063c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ca:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d112      	bne.n	80063fe <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <USBD_CUSTOM_HID_SendReport+0x70>)
 80063ec:	7819      	ldrb	r1, [r3, #0]
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f002 f80f 	bl	8008416 <USBD_LL_Transmit>
 80063f8:	e001      	b.n	80063fe <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000092 	.word	0x20000092

0800640c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006414:	2181      	movs	r1, #129	; 0x81
 8006416:	4815      	ldr	r0, [pc, #84]	; (800646c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006418:	f000 fcf1 	bl	8006dfe <USBD_GetEpDesc>
 800641c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800641e:	2101      	movs	r1, #1
 8006420:	4812      	ldr	r0, [pc, #72]	; (800646c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006422:	f000 fcec 	bl	8006dfe <USBD_GetEpDesc>
 8006426:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f042 0202 	orr.w	r2, r2, #2
 8006436:	711a      	strb	r2, [r3, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2205      	movs	r2, #5
 8006440:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	f042 0202 	orr.w	r2, r2, #2
 8006450:	711a      	strb	r2, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2205      	movs	r2, #5
 800645a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2229      	movs	r2, #41	; 0x29
 8006460:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006462:	4b02      	ldr	r3, [pc, #8]	; (800646c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000050 	.word	0x20000050

08006470 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006478:	2181      	movs	r1, #129	; 0x81
 800647a:	4815      	ldr	r0, [pc, #84]	; (80064d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800647c:	f000 fcbf 	bl	8006dfe <USBD_GetEpDesc>
 8006480:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006482:	2101      	movs	r1, #1
 8006484:	4812      	ldr	r0, [pc, #72]	; (80064d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006486:	f000 fcba 	bl	8006dfe <USBD_GetEpDesc>
 800648a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f042 0202 	orr.w	r2, r2, #2
 800649a:	711a      	strb	r2, [r3, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2205      	movs	r2, #5
 80064a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f042 0202 	orr.w	r2, r2, #2
 80064b4:	711a      	strb	r2, [r3, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2205      	movs	r2, #5
 80064be:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2229      	movs	r2, #41	; 0x29
 80064c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80064c6:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000050 	.word	0x20000050

080064d4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80064dc:	2181      	movs	r1, #129	; 0x81
 80064de:	4815      	ldr	r0, [pc, #84]	; (8006534 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80064e0:	f000 fc8d 	bl	8006dfe <USBD_GetEpDesc>
 80064e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80064e6:	2101      	movs	r1, #1
 80064e8:	4812      	ldr	r0, [pc, #72]	; (8006534 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80064ea:	f000 fc88 	bl	8006dfe <USBD_GetEpDesc>
 80064ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f042 0202 	orr.w	r2, r2, #2
 80064fe:	711a      	strb	r2, [r3, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2205      	movs	r2, #5
 8006508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	f042 0202 	orr.w	r2, r2, #2
 8006518:	711a      	strb	r2, [r3, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2205      	movs	r2, #5
 8006522:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2229      	movs	r2, #41	; 0x29
 8006528:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800652a:	4b02      	ldr	r3, [pc, #8]	; (8006534 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000050 	.word	0x20000050

08006538 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	32b0      	adds	r2, #176	; 0xb0
 800654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return (uint8_t)USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	32b0      	adds	r2, #176	; 0xb0
 800657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	e017      	b.n	80065b8 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	32b0      	adds	r2, #176	; 0xb0
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	33b0      	adds	r3, #176	; 0xb0
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	7810      	ldrb	r0, [r2, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	7852      	ldrb	r2, [r2, #1]
 80065b2:	4611      	mov	r1, r2
 80065b4:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32b0      	adds	r2, #176	; 0xb0
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065de:	2303      	movs	r3, #3
 80065e0:	e016      	b.n	8006610 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d111      	bne.n	800660e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	33b0      	adds	r3, #176	; 0xb0
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	7810      	ldrb	r0, [r2, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	7852      	ldrb	r2, [r2, #1]
 8006604:	4611      	mov	r1, r2
 8006606:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	621a      	str	r2, [r3, #32]
  }

  return (uint8_t)USBD_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	220a      	movs	r2, #10
 8006624:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006626:	4b03      	ldr	r3, [pc, #12]	; (8006634 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000088 	.word	0x20000088

08006638 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	e009      	b.n	8006660 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	33b0      	adds	r3, #176	; 0xb0
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	e01f      	b.n	80066c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f001 fd77 	bl	80081ac <USBD_LL_Init>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e025      	b.n	8006730 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00f      	beq.n	8006720 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	32ae      	adds	r2, #174	; 0xae
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f107 020e 	add.w	r2, r7, #14
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	4602      	mov	r2, r0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fd7f 	bl	8008244 <USBD_LL_Start>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006758:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	4611      	mov	r1, r2
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	4611      	mov	r1, r2
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f908 	bl	80079fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2b02      	cmp	r3, #2
 800680c:	d01a      	beq.n	8006844 <USBD_LL_SetupStage+0x72>
 800680e:	2b02      	cmp	r3, #2
 8006810:	d822      	bhi.n	8006858 <USBD_LL_SetupStage+0x86>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <USBD_LL_SetupStage+0x4a>
 8006816:	2b01      	cmp	r3, #1
 8006818:	d00a      	beq.n	8006830 <USBD_LL_SetupStage+0x5e>
 800681a:	e01d      	b.n	8006858 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb5f 	bl	8006ee8 <USBD_StdDevReq>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
      break;
 800682e:	e020      	b.n	8006872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fbc7 	bl	8006fcc <USBD_StdItfReq>
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
      break;
 8006842:	e016      	b.n	8006872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc29 	bl	80070a4 <USBD_StdEPReq>
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
      break;
 8006856:	e00c      	b.n	8006872 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800685e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006862:	b2db      	uxtb	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fd4c 	bl	8008304 <USBD_LL_StallEP>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
      break;
 8006870:	bf00      	nop
  }

  return ret;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	460b      	mov	r3, r1
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d16e      	bne.n	8006972 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800689a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	f040 8098 	bne.w	80069d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d913      	bls.n	80068dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	1ad2      	subs	r2, r2, r3
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bf28      	it	cs
 80068ce:	4613      	movcs	r3, r2
 80068d0:	461a      	mov	r2, r3
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f001 f984 	bl	8007be2 <USBD_CtlContinueRx>
 80068da:	e07d      	b.n	80069d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d014      	beq.n	8006914 <USBD_LL_DataOutStage+0x98>
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d81d      	bhi.n	800692a <USBD_LL_DataOutStage+0xae>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <USBD_LL_DataOutStage+0x7c>
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d003      	beq.n	80068fe <USBD_LL_DataOutStage+0x82>
 80068f6:	e018      	b.n	800692a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	75bb      	strb	r3, [r7, #22]
            break;
 80068fc:	e018      	b.n	8006930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006904:	b2db      	uxtb	r3, r3
 8006906:	4619      	mov	r1, r3
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fa5e 	bl	8006dca <USBD_CoreFindIF>
 800690e:	4603      	mov	r3, r0
 8006910:	75bb      	strb	r3, [r7, #22]
            break;
 8006912:	e00d      	b.n	8006930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800691a:	b2db      	uxtb	r3, r3
 800691c:	4619      	mov	r1, r3
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fa60 	bl	8006de4 <USBD_CoreFindEP>
 8006924:	4603      	mov	r3, r0
 8006926:	75bb      	strb	r3, [r7, #22]
            break;
 8006928:	e002      	b.n	8006930 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	75bb      	strb	r3, [r7, #22]
            break;
 800692e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006930:	7dbb      	ldrb	r3, [r7, #22]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d119      	bne.n	800696a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b03      	cmp	r3, #3
 8006940:	d113      	bne.n	800696a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006942:	7dba      	ldrb	r2, [r7, #22]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	32ae      	adds	r2, #174	; 0xae
 8006948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006952:	7dba      	ldrb	r2, [r7, #22]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800695a:	7dba      	ldrb	r2, [r7, #22]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	32ae      	adds	r2, #174	; 0xae
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 f94a 	bl	8007c04 <USBD_CtlSendStatus>
 8006970:	e032      	b.n	80069d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006972:	7afb      	ldrb	r3, [r7, #11]
 8006974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006978:	b2db      	uxtb	r3, r3
 800697a:	4619      	mov	r1, r3
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fa31 	bl	8006de4 <USBD_CoreFindEP>
 8006982:	4603      	mov	r3, r0
 8006984:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006986:	7dbb      	ldrb	r3, [r7, #22]
 8006988:	2bff      	cmp	r3, #255	; 0xff
 800698a:	d025      	beq.n	80069d8 <USBD_LL_DataOutStage+0x15c>
 800698c:	7dbb      	ldrb	r3, [r7, #22]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d122      	bne.n	80069d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b03      	cmp	r3, #3
 800699c:	d117      	bne.n	80069ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800699e:	7dba      	ldrb	r2, [r7, #22]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	32ae      	adds	r2, #174	; 0xae
 80069a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00f      	beq.n	80069ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069ae:	7dba      	ldrb	r2, [r7, #22]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069b6:	7dba      	ldrb	r2, [r7, #22]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	32ae      	adds	r2, #174	; 0xae
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	7afa      	ldrb	r2, [r7, #11]
 80069c4:	4611      	mov	r1, r2
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	4798      	blx	r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	e000      	b.n	80069da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	460b      	mov	r3, r1
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d16f      	bne.n	8006ad6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3314      	adds	r3, #20
 80069fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d15a      	bne.n	8006abc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d914      	bls.n	8006a3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f001 f8ac 	bl	8007b86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 fd0f 	bl	8008458 <USBD_LL_PrepareReceive>
 8006a3a:	e03f      	b.n	8006abc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d11c      	bne.n	8006a82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d316      	bcc.n	8006a82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d20f      	bcs.n	8006a82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 f88d 	bl	8007b86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a74:	2300      	movs	r3, #0
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fcec 	bl	8008458 <USBD_LL_PrepareReceive>
 8006a80:	e01c      	b.n	8006abc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d10f      	bne.n	8006aae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aae:	2180      	movs	r1, #128	; 0x80
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f001 fc27 	bl	8008304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f001 f8b7 	bl	8007c2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03a      	beq.n	8006b3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fe42 	bl	8006750 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ad4:	e032      	b.n	8006b3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f97f 	bl	8006de4 <USBD_CoreFindEP>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2bff      	cmp	r3, #255	; 0xff
 8006aee:	d025      	beq.n	8006b3c <USBD_LL_DataInStage+0x15a>
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d122      	bne.n	8006b3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d11c      	bne.n	8006b3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b02:	7dfa      	ldrb	r2, [r7, #23]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	32ae      	adds	r2, #174	; 0xae
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d014      	beq.n	8006b3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b12:	7dfa      	ldrb	r2, [r7, #23]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b1a:	7dfa      	ldrb	r2, [r7, #23]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	32ae      	adds	r2, #174	; 0xae
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	7afa      	ldrb	r2, [r7, #11]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	4798      	blx	r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b32:	7dbb      	ldrb	r3, [r7, #22]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b38:	7dbb      	ldrb	r3, [r7, #22]
 8006b3a:	e000      	b.n	8006b3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d014      	beq.n	8006bac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6852      	ldr	r2, [r2, #4]
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bac:	2340      	movs	r3, #64	; 0x40
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fb61 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2240      	movs	r2, #64	; 0x40
 8006bc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2180      	movs	r1, #128	; 0x80
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fb53 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2240      	movs	r2, #64	; 0x40
 8006bde:	621a      	str	r2, [r3, #32]

  return ret;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2204      	movs	r2, #4
 8006c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d106      	bne.n	8006c58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d110      	bne.n	8006c9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	32ae      	adds	r2, #174	; 0xae
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e01c      	b.n	8006d02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d115      	bne.n	8006d00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	; 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32ae      	adds	r2, #174	; 0xae
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	32ae      	adds	r2, #174	; 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e01c      	b.n	8006d66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d115      	bne.n	8006d64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	32ae      	adds	r2, #174	; 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32ae      	adds	r2, #174	; 0xae
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00e      	beq.n	8006dc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6852      	ldr	r2, [r2, #4]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	4611      	mov	r1, r2
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006df0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d920      	bls.n	8006e68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e2e:	e013      	b.n	8006e58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e30:	f107 030a 	add.w	r3, r7, #10
 8006e34:	4619      	mov	r1, r3
 8006e36:	6978      	ldr	r0, [r7, #20]
 8006e38:	f000 f81b 	bl	8006e72 <USBD_GetNextDesc>
 8006e3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d108      	bne.n	8006e58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	789b      	ldrb	r3, [r3, #2]
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d008      	beq.n	8006e66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	897b      	ldrh	r3, [r7, #10]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d8e5      	bhi.n	8006e30 <USBD_GetEpDesc+0x32>
 8006e64:	e000      	b.n	8006e68 <USBD_GetEpDesc+0x6a>
          break;
 8006e66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e68:	693b      	ldr	r3, [r7, #16]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006eca:	8a3b      	ldrh	r3, [r7, #16]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	b21a      	sxth	r2, r3
 8006ed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006eda:	89fb      	ldrh	r3, [r7, #14]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d005      	beq.n	8006f0e <USBD_StdDevReq+0x26>
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d857      	bhi.n	8006fb6 <USBD_StdDevReq+0xce>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00f      	beq.n	8006f2a <USBD_StdDevReq+0x42>
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d153      	bne.n	8006fb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	32ae      	adds	r2, #174	; 0xae
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e04a      	b.n	8006fc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b09      	cmp	r3, #9
 8006f30:	d83b      	bhi.n	8006faa <USBD_StdDevReq+0xc2>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <USBD_StdDevReq+0x50>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08006fa1 	.word	0x08006fa1
 8006f40:	08006fab 	.word	0x08006fab
 8006f44:	08006f97 	.word	0x08006f97
 8006f48:	08006fab 	.word	0x08006fab
 8006f4c:	08006f6b 	.word	0x08006f6b
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006fab 	.word	0x08006fab
 8006f58:	08006f83 	.word	0x08006f83
 8006f5c:	08006f75 	.word	0x08006f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa3c 	bl	80073e0 <USBD_GetDescriptor>
          break;
 8006f68:	e024      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fba1 	bl	80076b4 <USBD_SetAddress>
          break;
 8006f72:	e01f      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fbe0 	bl	800773c <USBD_SetConfig>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8006f80:	e018      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fc83 	bl	8007890 <USBD_GetConfig>
          break;
 8006f8a:	e013      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fcb4 	bl	80078fc <USBD_GetStatus>
          break;
 8006f94:	e00e      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fce3 	bl	8007964 <USBD_SetFeature>
          break;
 8006f9e:	e009      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fd07 	bl	80079b6 <USBD_ClrFeature>
          break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fd5e 	bl	8007a6e <USBD_CtlError>
          break;
 8006fb2:	bf00      	nop
      }
      break;
 8006fb4:	e004      	b.n	8006fc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fd58 	bl	8007a6e <USBD_CtlError>
      break;
 8006fbe:	bf00      	nop
  }

  return ret;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop

08006fcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d005      	beq.n	8006ff2 <USBD_StdItfReq+0x26>
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d852      	bhi.n	8007090 <USBD_StdItfReq+0xc4>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <USBD_StdItfReq+0x26>
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d14e      	bne.n	8007090 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d840      	bhi.n	8007082 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	889b      	ldrh	r3, [r3, #4]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d836      	bhi.n	8007078 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fed9 	bl	8006dca <USBD_CoreFindIF>
 8007018:	4603      	mov	r3, r0
 800701a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2bff      	cmp	r3, #255	; 0xff
 8007020:	d01d      	beq.n	800705e <USBD_StdItfReq+0x92>
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11a      	bne.n	800705e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007028:	7bba      	ldrb	r2, [r7, #14]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	32ae      	adds	r2, #174	; 0xae
 800702e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00f      	beq.n	8007058 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007038:	7bba      	ldrb	r2, [r7, #14]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007040:	7bba      	ldrb	r2, [r7, #14]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	32ae      	adds	r2, #174	; 0xae
 8007046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007056:	e004      	b.n	8007062 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800705c:	e001      	b.n	8007062 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	88db      	ldrh	r3, [r3, #6]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d110      	bne.n	800708c <USBD_StdItfReq+0xc0>
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10d      	bne.n	800708c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fdc7 	bl	8007c04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007076:	e009      	b.n	800708c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fcf7 	bl	8007a6e <USBD_CtlError>
          break;
 8007080:	e004      	b.n	800708c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fcf2 	bl	8007a6e <USBD_CtlError>
          break;
 800708a:	e000      	b.n	800708e <USBD_StdItfReq+0xc2>
          break;
 800708c:	bf00      	nop
      }
      break;
 800708e:	e004      	b.n	800709a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fceb 	bl	8007a6e <USBD_CtlError>
      break;
 8007098:	bf00      	nop
  }

  return ret;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	889b      	ldrh	r3, [r3, #4]
 80070b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d007      	beq.n	80070d4 <USBD_StdEPReq+0x30>
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	f200 817f 	bhi.w	80073c8 <USBD_StdEPReq+0x324>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d02a      	beq.n	8007124 <USBD_StdEPReq+0x80>
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	f040 817a 	bne.w	80073c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe83 	bl	8006de4 <USBD_CoreFindEP>
 80070de:	4603      	mov	r3, r0
 80070e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070e2:	7b7b      	ldrb	r3, [r7, #13]
 80070e4:	2bff      	cmp	r3, #255	; 0xff
 80070e6:	f000 8174 	beq.w	80073d2 <USBD_StdEPReq+0x32e>
 80070ea:	7b7b      	ldrb	r3, [r7, #13]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8170 	bne.w	80073d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070f2:	7b7a      	ldrb	r2, [r7, #13]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070fa:	7b7a      	ldrb	r2, [r7, #13]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	32ae      	adds	r2, #174	; 0xae
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8163 	beq.w	80073d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800710c:	7b7a      	ldrb	r2, [r7, #13]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32ae      	adds	r2, #174	; 0xae
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007122:	e156      	b.n	80073d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b03      	cmp	r3, #3
 800712a:	d008      	beq.n	800713e <USBD_StdEPReq+0x9a>
 800712c:	2b03      	cmp	r3, #3
 800712e:	f300 8145 	bgt.w	80073bc <USBD_StdEPReq+0x318>
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 809b 	beq.w	800726e <USBD_StdEPReq+0x1ca>
 8007138:	2b01      	cmp	r3, #1
 800713a:	d03c      	beq.n	80071b6 <USBD_StdEPReq+0x112>
 800713c:	e13e      	b.n	80073bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d002      	beq.n	8007150 <USBD_StdEPReq+0xac>
 800714a:	2b03      	cmp	r3, #3
 800714c:	d016      	beq.n	800717c <USBD_StdEPReq+0xd8>
 800714e:	e02c      	b.n	80071aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00d      	beq.n	8007172 <USBD_StdEPReq+0xce>
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b80      	cmp	r3, #128	; 0x80
 800715a:	d00a      	beq.n	8007172 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f8cf 	bl	8008304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007166:	2180      	movs	r1, #128	; 0x80
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f8cb 	bl	8008304 <USBD_LL_StallEP>
 800716e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007170:	e020      	b.n	80071b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fc7a 	bl	8007a6e <USBD_CtlError>
              break;
 800717a:	e01b      	b.n	80071b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	885b      	ldrh	r3, [r3, #2]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10e      	bne.n	80071a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <USBD_StdEPReq+0xfe>
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b80      	cmp	r3, #128	; 0x80
 800718e:	d008      	beq.n	80071a2 <USBD_StdEPReq+0xfe>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f8b1 	bl	8008304 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fd2e 	bl	8007c04 <USBD_CtlSendStatus>

              break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc5e 	bl	8007a6e <USBD_CtlError>
              break;
 80071b2:	bf00      	nop
          }
          break;
 80071b4:	e107      	b.n	80073c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d002      	beq.n	80071c8 <USBD_StdEPReq+0x124>
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d016      	beq.n	80071f4 <USBD_StdEPReq+0x150>
 80071c6:	e04b      	b.n	8007260 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <USBD_StdEPReq+0x146>
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b80      	cmp	r3, #128	; 0x80
 80071d2:	d00a      	beq.n	80071ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f893 	bl	8008304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 f88f 	bl	8008304 <USBD_LL_StallEP>
 80071e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071e8:	e040      	b.n	800726c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fc3e 	bl	8007a6e <USBD_CtlError>
              break;
 80071f2:	e03b      	b.n	800726c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	885b      	ldrh	r3, [r3, #2]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d136      	bne.n	800726a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 f899 	bl	8008342 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fcf7 	bl	8007c04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fde2 	bl	8006de4 <USBD_CoreFindEP>
 8007220:	4603      	mov	r3, r0
 8007222:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007224:	7b7b      	ldrb	r3, [r7, #13]
 8007226:	2bff      	cmp	r3, #255	; 0xff
 8007228:	d01f      	beq.n	800726a <USBD_StdEPReq+0x1c6>
 800722a:	7b7b      	ldrb	r3, [r7, #13]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11c      	bne.n	800726a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007230:	7b7a      	ldrb	r2, [r7, #13]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007238:	7b7a      	ldrb	r2, [r7, #13]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32ae      	adds	r2, #174	; 0xae
 800723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d010      	beq.n	800726a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007248:	7b7a      	ldrb	r2, [r7, #13]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	32ae      	adds	r2, #174	; 0xae
 800724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800725e:	e004      	b.n	800726a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fc03 	bl	8007a6e <USBD_CtlError>
              break;
 8007268:	e000      	b.n	800726c <USBD_StdEPReq+0x1c8>
              break;
 800726a:	bf00      	nop
          }
          break;
 800726c:	e0ab      	b.n	80073c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d002      	beq.n	8007280 <USBD_StdEPReq+0x1dc>
 800727a:	2b03      	cmp	r3, #3
 800727c:	d032      	beq.n	80072e4 <USBD_StdEPReq+0x240>
 800727e:	e097      	b.n	80073b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <USBD_StdEPReq+0x1f2>
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b80      	cmp	r3, #128	; 0x80
 800728a:	d004      	beq.n	8007296 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fbed 	bl	8007a6e <USBD_CtlError>
                break;
 8007294:	e091      	b.n	80073ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729a:	2b00      	cmp	r3, #0
 800729c:	da0b      	bge.n	80072b6 <USBD_StdEPReq+0x212>
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	3310      	adds	r3, #16
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	3304      	adds	r3, #4
 80072b4:	e00b      	b.n	80072ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	4413      	add	r3, r2
 80072cc:	3304      	adds	r3, #4
 80072ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2202      	movs	r2, #2
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc37 	bl	8007b50 <USBD_CtlSendData>
              break;
 80072e2:	e06a      	b.n	80073ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da11      	bge.n	8007310 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	f003 020f 	and.w	r2, r3, #15
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	3324      	adds	r3, #36	; 0x24
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d117      	bne.n	8007336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fbb0 	bl	8007a6e <USBD_CtlError>
                  break;
 800730e:	e054      	b.n	80073ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 020f 	and.w	r2, r3, #15
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fb9d 	bl	8007a6e <USBD_CtlError>
                  break;
 8007334:	e041      	b.n	80073ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da0b      	bge.n	8007356 <USBD_StdEPReq+0x2b2>
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	3310      	adds	r3, #16
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	3304      	adds	r3, #4
 8007354:	e00b      	b.n	800736e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	3304      	adds	r3, #4
 800736e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <USBD_StdEPReq+0x2d8>
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d103      	bne.n	8007384 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e00e      	b.n	80073a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fff9 	bl	8008380 <USBD_LL_IsStallEP>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e002      	b.n	80073a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2202      	movs	r2, #2
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fbd1 	bl	8007b50 <USBD_CtlSendData>
              break;
 80073ae:	e004      	b.n	80073ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fb5b 	bl	8007a6e <USBD_CtlError>
              break;
 80073b8:	bf00      	nop
          }
          break;
 80073ba:	e004      	b.n	80073c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fb55 	bl	8007a6e <USBD_CtlError>
          break;
 80073c4:	bf00      	nop
      }
      break;
 80073c6:	e005      	b.n	80073d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fb4f 	bl	8007a6e <USBD_CtlError>
      break;
 80073d0:	e000      	b.n	80073d4 <USBD_StdEPReq+0x330>
      break;
 80073d2:	bf00      	nop
  }

  return ret;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	885b      	ldrh	r3, [r3, #2]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	2b06      	cmp	r3, #6
 8007402:	f200 8128 	bhi.w	8007656 <USBD_GetDescriptor+0x276>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <USBD_GetDescriptor+0x2c>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007429 	.word	0x08007429
 8007410:	08007441 	.word	0x08007441
 8007414:	08007481 	.word	0x08007481
 8007418:	08007657 	.word	0x08007657
 800741c:	08007657 	.word	0x08007657
 8007420:	080075f7 	.word	0x080075f7
 8007424:	08007623 	.word	0x08007623
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
      break;
 800743e:	e112      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7c1b      	ldrb	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10d      	bne.n	8007464 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f107 0208 	add.w	r2, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	2202      	movs	r2, #2
 8007460:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007462:	e100      	b.n	8007666 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f107 0208 	add.w	r2, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	2202      	movs	r2, #2
 800747c:	701a      	strb	r2, [r3, #0]
      break;
 800747e:	e0f2      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	885b      	ldrh	r3, [r3, #2]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b05      	cmp	r3, #5
 8007488:	f200 80ac 	bhi.w	80075e4 <USBD_GetDescriptor+0x204>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <USBD_GetDescriptor+0xb4>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074ad 	.word	0x080074ad
 8007498:	080074e1 	.word	0x080074e1
 800749c:	08007515 	.word	0x08007515
 80074a0:	08007549 	.word	0x08007549
 80074a4:	0800757d 	.word	0x0800757d
 80074a8:	080075b1 	.word	0x080075b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	7c12      	ldrb	r2, [r2, #16]
 80074c4:	f107 0108 	add.w	r1, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ce:	e091      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 facb 	bl	8007a6e <USBD_CtlError>
            err++;
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	3301      	adds	r3, #1
 80074dc:	72fb      	strb	r3, [r7, #11]
          break;
 80074de:	e089      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007502:	e077      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fab1 	bl	8007a6e <USBD_CtlError>
            err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
          break;
 8007512:	e06f      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007536:	e05d      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa97 	bl	8007a6e <USBD_CtlError>
            err++;
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	3301      	adds	r3, #1
 8007544:	72fb      	strb	r3, [r7, #11]
          break;
 8007546:	e055      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7c12      	ldrb	r2, [r2, #16]
 8007560:	f107 0108 	add.w	r1, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756a:	e043      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa7d 	bl	8007a6e <USBD_CtlError>
            err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
          break;
 800757a:	e03b      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7c12      	ldrb	r2, [r2, #16]
 8007594:	f107 0108 	add.w	r1, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759e:	e029      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa63 	bl	8007a6e <USBD_CtlError>
            err++;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	3301      	adds	r3, #1
 80075ac:	72fb      	strb	r3, [r7, #11]
          break;
 80075ae:	e021      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d2:	e00f      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa49 	bl	8007a6e <USBD_CtlError>
            err++;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	3301      	adds	r3, #1
 80075e0:	72fb      	strb	r3, [r7, #11]
          break;
 80075e2:	e007      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa41 	bl	8007a6e <USBD_CtlError>
          err++;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	3301      	adds	r3, #1
 80075f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075f2:	bf00      	nop
      }
      break;
 80075f4:	e037      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7c1b      	ldrb	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	f107 0208 	add.w	r2, r7, #8
 800760a:	4610      	mov	r0, r2
 800760c:	4798      	blx	r3
 800760e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007610:	e029      	b.n	8007666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa2a 	bl	8007a6e <USBD_CtlError>
        err++;
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	3301      	adds	r3, #1
 800761e:	72fb      	strb	r3, [r7, #11]
      break;
 8007620:	e021      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7c1b      	ldrb	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	f107 0208 	add.w	r2, r7, #8
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
 800763a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	2207      	movs	r2, #7
 8007642:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007644:	e00f      	b.n	8007666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fa10 	bl	8007a6e <USBD_CtlError>
        err++;
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	3301      	adds	r3, #1
 8007652:	72fb      	strb	r3, [r7, #11]
      break;
 8007654:	e007      	b.n	8007666 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fa08 	bl	8007a6e <USBD_CtlError>
      err++;
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	3301      	adds	r3, #1
 8007662:	72fb      	strb	r3, [r7, #11]
      break;
 8007664:	bf00      	nop
  }

  if (err != 0U)
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d11e      	bne.n	80076aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	88db      	ldrh	r3, [r3, #6]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d016      	beq.n	80076a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007674:	893b      	ldrh	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00e      	beq.n	8007698 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88da      	ldrh	r2, [r3, #6]
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	4293      	cmp	r3, r2
 8007682:	bf28      	it	cs
 8007684:	4613      	movcs	r3, r2
 8007686:	b29b      	uxth	r3, r3
 8007688:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800768a:	893b      	ldrh	r3, [r7, #8]
 800768c:	461a      	mov	r2, r3
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa5d 	bl	8007b50 <USBD_CtlSendData>
 8007696:	e009      	b.n	80076ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9e7 	bl	8007a6e <USBD_CtlError>
 80076a0:	e004      	b.n	80076ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 faae 	bl	8007c04 <USBD_CtlSendStatus>
 80076a8:	e000      	b.n	80076ac <USBD_GetDescriptor+0x2cc>
    return;
 80076aa:	bf00      	nop
  }
}
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	889b      	ldrh	r3, [r3, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d131      	bne.n	800772a <USBD_SetAddress+0x76>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88db      	ldrh	r3, [r3, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d12d      	bne.n	800772a <USBD_SetAddress+0x76>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	2b7f      	cmp	r3, #127	; 0x7f
 80076d4:	d829      	bhi.n	800772a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d104      	bne.n	80076f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f9bc 	bl	8007a6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f6:	e01d      	b.n	8007734 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7bfa      	ldrb	r2, [r7, #15]
 80076fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fe67 	bl	80083d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa7a 	bl	8007c04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	e009      	b.n	8007734 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007728:	e004      	b.n	8007734 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f99e 	bl	8007a6e <USBD_CtlError>
  }
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	b2da      	uxtb	r2, r3
 8007750:	4b4e      	ldr	r3, [pc, #312]	; (800788c <USBD_SetConfig+0x150>)
 8007752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007754:	4b4d      	ldr	r3, [pc, #308]	; (800788c <USBD_SetConfig+0x150>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d905      	bls.n	8007768 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f985 	bl	8007a6e <USBD_CtlError>
    return USBD_FAIL;
 8007764:	2303      	movs	r3, #3
 8007766:	e08c      	b.n	8007882 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d002      	beq.n	800777a <USBD_SetConfig+0x3e>
 8007774:	2b03      	cmp	r3, #3
 8007776:	d029      	beq.n	80077cc <USBD_SetConfig+0x90>
 8007778:	e075      	b.n	8007866 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800777a:	4b44      	ldr	r3, [pc, #272]	; (800788c <USBD_SetConfig+0x150>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d020      	beq.n	80077c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007782:	4b42      	ldr	r3, [pc, #264]	; (800788c <USBD_SetConfig+0x150>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800778c:	4b3f      	ldr	r3, [pc, #252]	; (800788c <USBD_SetConfig+0x150>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fe ffe7 	bl	8006766 <USBD_SetClassConfig>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f962 	bl	8007a6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077b2:	e065      	b.n	8007880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa25 	bl	8007c04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2203      	movs	r2, #3
 80077be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077c2:	e05d      	b.n	8007880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa1d 	bl	8007c04 <USBD_CtlSendStatus>
      break;
 80077ca:	e059      	b.n	8007880 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077cc:	4b2f      	ldr	r3, [pc, #188]	; (800788c <USBD_SetConfig+0x150>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d112      	bne.n	80077fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <USBD_SetConfig+0x150>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077e6:	4b29      	ldr	r3, [pc, #164]	; (800788c <USBD_SetConfig+0x150>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7fe ffd6 	bl	800679e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa06 	bl	8007c04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077f8:	e042      	b.n	8007880 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <USBD_SetConfig+0x150>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d02a      	beq.n	800785e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fe ffc4 	bl	800679e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <USBD_SetConfig+0x150>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007820:	4b1a      	ldr	r3, [pc, #104]	; (800788c <USBD_SetConfig+0x150>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7fe ff9d 	bl	8006766 <USBD_SetClassConfig>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00f      	beq.n	8007856 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f918 	bl	8007a6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fe ffa9 	bl	800679e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007854:	e014      	b.n	8007880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9d4 	bl	8007c04 <USBD_CtlSendStatus>
      break;
 800785c:	e010      	b.n	8007880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f9d0 	bl	8007c04 <USBD_CtlSendStatus>
      break;
 8007864:	e00c      	b.n	8007880 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f900 	bl	8007a6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <USBD_SetConfig+0x150>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fe ff92 	bl	800679e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800787a:	2303      	movs	r3, #3
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	bf00      	nop
  }

  return ret;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200004f8 	.word	0x200004f8

08007890 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88db      	ldrh	r3, [r3, #6]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d004      	beq.n	80078ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f8e2 	bl	8007a6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078aa:	e023      	b.n	80078f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	dc02      	bgt.n	80078be <USBD_GetConfig+0x2e>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dc03      	bgt.n	80078c4 <USBD_GetConfig+0x34>
 80078bc:	e015      	b.n	80078ea <USBD_GetConfig+0x5a>
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d00b      	beq.n	80078da <USBD_GetConfig+0x4a>
 80078c2:	e012      	b.n	80078ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3308      	adds	r3, #8
 80078ce:	2201      	movs	r2, #1
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f93c 	bl	8007b50 <USBD_CtlSendData>
        break;
 80078d8:	e00c      	b.n	80078f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	2201      	movs	r2, #1
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f934 	bl	8007b50 <USBD_CtlSendData>
        break;
 80078e8:	e004      	b.n	80078f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f8be 	bl	8007a6e <USBD_CtlError>
        break;
 80078f2:	bf00      	nop
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	2b02      	cmp	r3, #2
 8007912:	d81e      	bhi.n	8007952 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	88db      	ldrh	r3, [r3, #6]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d004      	beq.n	8007926 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8a5 	bl	8007a6e <USBD_CtlError>
        break;
 8007924:	e01a      	b.n	800795c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d005      	beq.n	8007942 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f043 0202 	orr.w	r2, r3, #2
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	330c      	adds	r3, #12
 8007946:	2202      	movs	r2, #2
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f900 	bl	8007b50 <USBD_CtlSendData>
      break;
 8007950:	e004      	b.n	800795c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f88a 	bl	8007a6e <USBD_CtlError>
      break;
 800795a:	bf00      	nop
  }
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	885b      	ldrh	r3, [r3, #2]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d107      	bne.n	8007986 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f940 	bl	8007c04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007984:	e013      	b.n	80079ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	885b      	ldrh	r3, [r3, #2]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d10b      	bne.n	80079a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	b29b      	uxth	r3, r3
 8007996:	b2da      	uxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f930 	bl	8007c04 <USBD_CtlSendStatus>
}
 80079a4:	e003      	b.n	80079ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f860 	bl	8007a6e <USBD_CtlError>
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d80b      	bhi.n	80079e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	885b      	ldrh	r3, [r3, #2]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10c      	bne.n	80079f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f910 	bl	8007c04 <USBD_CtlSendStatus>
      }
      break;
 80079e4:	e004      	b.n	80079f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f840 	bl	8007a6e <USBD_CtlError>
      break;
 80079ee:	e000      	b.n	80079f2 <USBD_ClrFeature+0x3c>
      break;
 80079f0:	bf00      	nop
  }
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	781a      	ldrb	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff fa41 	bl	8006eac <SWAPBYTE>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff fa34 	bl	8006eac <SWAPBYTE>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fa27 	bl	8006eac <SWAPBYTE>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	80da      	strh	r2, [r3, #6]
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fc42 	bl	8008304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fc3e 	bl	8008304 <USBD_LL_StallEP>
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d036      	beq.n	8007b14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007aaa:	6938      	ldr	r0, [r7, #16]
 8007aac:	f000 f836 	bl	8007b1c <USBD_GetLen>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	3301      	adds	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	3301      	adds	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ae0:	e013      	b.n	8007b0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
    idx++;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	3301      	adds	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	4413      	add	r3, r2
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	3301      	adds	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e7      	bne.n	8007ae2 <USBD_GetString+0x52>
 8007b12:	e000      	b.n	8007b16 <USBD_GetString+0x86>
    return;
 8007b14:	bf00      	nop
  }
}
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b2c:	e005      	b.n	8007b3a <USBD_GetLen+0x1e>
  {
    len++;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3301      	adds	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3301      	adds	r3, #1
 8007b38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f5      	bne.n	8007b2e <USBD_GetLen+0x12>
  }

  return len;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	2100      	movs	r1, #0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fc4d 	bl	8008416 <USBD_LL_Transmit>

  return USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fc3c 	bl	8008416 <USBD_LL_Transmit>

  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fc40 	bl	8008458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fc2f 	bl	8008458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2204      	movs	r2, #4
 8007c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c14:	2300      	movs	r3, #0
 8007c16:	2200      	movs	r2, #0
 8007c18:	2100      	movs	r1, #0
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fbfb 	bl	8008416 <USBD_LL_Transmit>

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2205      	movs	r2, #5
 8007c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fc09 	bl	8008458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c54:	2200      	movs	r2, #0
 8007c56:	4912      	ldr	r1, [pc, #72]	; (8007ca0 <MX_USB_DEVICE_Init+0x50>)
 8007c58:	4812      	ldr	r0, [pc, #72]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c5a:	f7fe fd07 	bl	800666c <USBD_Init>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c64:	f7f8 ff30 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007c68:	490f      	ldr	r1, [pc, #60]	; (8007ca8 <MX_USB_DEVICE_Init+0x58>)
 8007c6a:	480e      	ldr	r0, [pc, #56]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c6c:	f7fe fd2e 	bl	80066cc <USBD_RegisterClass>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c76:	f7f8 ff27 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007c7a:	490c      	ldr	r1, [pc, #48]	; (8007cac <MX_USB_DEVICE_Init+0x5c>)
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c7e:	f7fe fcdb 	bl	8006638 <USBD_CUSTOM_HID_RegisterInterface>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c88:	f7f8 ff1e 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c8c:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c8e:	f7fe fd53 	bl	8006738 <USBD_Start>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c98:	f7f8 ff16 	bl	8000ac8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c9c:	bf00      	nop
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200000c8 	.word	0x200000c8
 8007ca4:	200004fc 	.word	0x200004fc
 8007ca8:	20000018 	.word	0x20000018
 8007cac:	200000b8 	.word	0x200000b8

08007cb0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007cc4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	460a      	mov	r2, r1
 8007cda:	71fb      	strb	r3, [r7, #7]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce6:	60fb      	str	r3, [r7, #12]

	AddUsbRxBuffer(hhid->Report_buf);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7f9 fa5c 	bl	80011a8 <AddUsbRxBuffer>
  return (USBD_OK);
 8007cf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	200004fc 	.word	0x200004fc

08007d00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2212      	movs	r2, #18
 8007d10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d12:	4b03      	ldr	r3, [pc, #12]	; (8007d20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	200000e4 	.word	0x200000e4

08007d24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2204      	movs	r2, #4
 8007d34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d36:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	200000f8 	.word	0x200000f8

08007d48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	6039      	str	r1, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	4907      	ldr	r1, [pc, #28]	; (8007d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d5e:	4808      	ldr	r0, [pc, #32]	; (8007d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d60:	f7ff fe96 	bl	8007a90 <USBD_GetString>
 8007d64:	e004      	b.n	8007d70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4904      	ldr	r1, [pc, #16]	; (8007d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d6a:	4805      	ldr	r0, [pc, #20]	; (8007d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d6c:	f7ff fe90 	bl	8007a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d70:	4b02      	ldr	r3, [pc, #8]	; (8007d7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200007d8 	.word	0x200007d8
 8007d80:	080085d0 	.word	0x080085d0

08007d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	4904      	ldr	r1, [pc, #16]	; (8007da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d94:	4804      	ldr	r0, [pc, #16]	; (8007da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d96:	f7ff fe7b 	bl	8007a90 <USBD_GetString>
  return USBD_StrDesc;
 8007d9a:	4b02      	ldr	r3, [pc, #8]	; (8007da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200007d8 	.word	0x200007d8
 8007da8:	080085f0 	.word	0x080085f0

08007dac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	221a      	movs	r2, #26
 8007dbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dbe:	f000 f843 	bl	8007e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dc2:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	200000fc 	.word	0x200000fc

08007dd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d105      	bne.n	8007dee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	4907      	ldr	r1, [pc, #28]	; (8007e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007de6:	4808      	ldr	r0, [pc, #32]	; (8007e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007de8:	f7ff fe52 	bl	8007a90 <USBD_GetString>
 8007dec:	e004      	b.n	8007df8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	4904      	ldr	r1, [pc, #16]	; (8007e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007df2:	4805      	ldr	r0, [pc, #20]	; (8007e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007df4:	f7ff fe4c 	bl	8007a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007df8:	4b02      	ldr	r3, [pc, #8]	; (8007e04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	200007d8 	.word	0x200007d8
 8007e08:	08008604 	.word	0x08008604

08007e0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4907      	ldr	r1, [pc, #28]	; (8007e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e22:	4808      	ldr	r0, [pc, #32]	; (8007e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e24:	f7ff fe34 	bl	8007a90 <USBD_GetString>
 8007e28:	e004      	b.n	8007e34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	4904      	ldr	r1, [pc, #16]	; (8007e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e2e:	4805      	ldr	r0, [pc, #20]	; (8007e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e30:	f7ff fe2e 	bl	8007a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200007d8 	.word	0x200007d8
 8007e44:	08008618 	.word	0x08008618

08007e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <Get_SerialNum+0x44>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e54:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <Get_SerialNum+0x48>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <Get_SerialNum+0x4c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4413      	add	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e6e:	2208      	movs	r2, #8
 8007e70:	4909      	ldr	r1, [pc, #36]	; (8007e98 <Get_SerialNum+0x50>)
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f814 	bl	8007ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e78:	2204      	movs	r2, #4
 8007e7a:	4908      	ldr	r1, [pc, #32]	; (8007e9c <Get_SerialNum+0x54>)
 8007e7c:	68b8      	ldr	r0, [r7, #8]
 8007e7e:	f000 f80f 	bl	8007ea0 <IntToUnicode>
  }
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	1fff7a10 	.word	0x1fff7a10
 8007e90:	1fff7a14 	.word	0x1fff7a14
 8007e94:	1fff7a18 	.word	0x1fff7a18
 8007e98:	200000fe 	.word	0x200000fe
 8007e9c:	2000010e 	.word	0x2000010e

08007ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
 8007eb6:	e027      	b.n	8007f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	0f1b      	lsrs	r3, r3, #28
 8007ebc:	2b09      	cmp	r3, #9
 8007ebe:	d80b      	bhi.n	8007ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	0f1b      	lsrs	r3, r3, #28
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	440b      	add	r3, r1
 8007ed0:	3230      	adds	r2, #48	; 0x30
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e00a      	b.n	8007eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	0f1b      	lsrs	r3, r3, #28
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3237      	adds	r2, #55	; 0x37
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	3301      	adds	r3, #1
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	4413      	add	r3, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	3301      	adds	r3, #1
 8007f06:	75fb      	strb	r3, [r7, #23]
 8007f08:	7dfa      	ldrb	r2, [r7, #23]
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d3d3      	bcc.n	8007eb8 <IntToUnicode+0x18>
  }
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	; 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	609a      	str	r2, [r3, #8]
 8007f34:	60da      	str	r2, [r3, #12]
 8007f36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f40:	d13a      	bne.n	8007fb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	6313      	str	r3, [r2, #48]	; 0x30
 8007f52:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f64:	2302      	movs	r3, #2
 8007f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f70:	230a      	movs	r3, #10
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4812      	ldr	r0, [pc, #72]	; (8007fc4 <HAL_PCD_MspInit+0xa4>)
 8007f7c:	f7fa f9bc 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f80:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f84:	4a0e      	ldr	r2, [pc, #56]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	6353      	str	r3, [r2, #52]	; 0x34
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f94:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8007f9c:	4b08      	ldr	r3, [pc, #32]	; (8007fc0 <HAL_PCD_MspInit+0xa0>)
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2100      	movs	r1, #0
 8007fac:	2043      	movs	r0, #67	; 0x43
 8007fae:	f7fa f95e 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fb2:	2043      	movs	r0, #67	; 0x43
 8007fb4:	f7fa f977 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fb8:	bf00      	nop
 8007fba:	3728      	adds	r7, #40	; 0x28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	40020000 	.word	0x40020000

08007fc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fe fbf7 	bl	80067d2 <USBD_LL_SetupStage>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	4619      	mov	r1, r3
 8008016:	f7fe fc31 	bl	800687c <USBD_LL_DataOutStage>
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	334c      	adds	r3, #76	; 0x4c
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	4619      	mov	r1, r3
 800804a:	f7fe fcca 	bl	80069e2 <USBD_LL_DataInStage>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fdfe 	bl	8006c66 <USBD_LL_SOF>
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]
 800808a:	e008      	b.n	800809e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d102      	bne.n	800809a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
 8008098:	e001      	b.n	800809e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800809a:	f7f8 fd15 	bl	8000ac8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fd9e 	bl	8006bea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fd46 	bl	8006b46 <USBD_LL_Reset>
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fd99 	bl	8006c0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <HAL_PCD_SuspendCallback+0x48>)
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	4a03      	ldr	r2, [pc, #12]	; (800810c <HAL_PCD_SuspendCallback+0x48>)
 80080fe:	f043 0306 	orr.w	r3, r3, #6
 8008102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	e000ed00 	.word	0xe000ed00

08008110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe fd89 	bl	8006c36 <USBD_LL_Resume>
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fde1 	bl	8006d0a <USBD_LL_IsoOUTIncomplete>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fd9d 	bl	8006ca6 <USBD_LL_IsoINIncomplete>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fdf3 	bl	8006d6e <USBD_LL_DevConnected>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fdf0 	bl	8006d84 <USBD_LL_DevDisconnected>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d13c      	bne.n	8008236 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081bc:	4a20      	ldr	r2, [pc, #128]	; (8008240 <USBD_LL_Init+0x94>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1e      	ldr	r2, [pc, #120]	; (8008240 <USBD_LL_Init+0x94>)
 80081c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <USBD_LL_Init+0x94>)
 80081ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081d4:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <USBD_LL_Init+0x94>)
 80081d6:	2204      	movs	r2, #4
 80081d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081da:	4b19      	ldr	r3, [pc, #100]	; (8008240 <USBD_LL_Init+0x94>)
 80081dc:	2202      	movs	r2, #2
 80081de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081e0:	4b17      	ldr	r3, [pc, #92]	; (8008240 <USBD_LL_Init+0x94>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081e6:	4b16      	ldr	r3, [pc, #88]	; (8008240 <USBD_LL_Init+0x94>)
 80081e8:	2202      	movs	r2, #2
 80081ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081ec:	4b14      	ldr	r3, [pc, #80]	; (8008240 <USBD_LL_Init+0x94>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <USBD_LL_Init+0x94>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081f8:	4b11      	ldr	r3, [pc, #68]	; (8008240 <USBD_LL_Init+0x94>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <USBD_LL_Init+0x94>)
 8008200:	2200      	movs	r2, #0
 8008202:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <USBD_LL_Init+0x94>)
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800820a:	480d      	ldr	r0, [pc, #52]	; (8008240 <USBD_LL_Init+0x94>)
 800820c:	f7fa fb61 	bl	80028d2 <HAL_PCD_Init>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008216:	f7f8 fc57 	bl	8000ac8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	4808      	ldr	r0, [pc, #32]	; (8008240 <USBD_LL_Init+0x94>)
 800821e:	f7fb fda0 	bl	8003d62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008222:	2240      	movs	r2, #64	; 0x40
 8008224:	2100      	movs	r1, #0
 8008226:	4806      	ldr	r0, [pc, #24]	; (8008240 <USBD_LL_Init+0x94>)
 8008228:	f7fb fd54 	bl	8003cd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800822c:	2280      	movs	r2, #128	; 0x80
 800822e:	2101      	movs	r1, #1
 8008230:	4803      	ldr	r0, [pc, #12]	; (8008240 <USBD_LL_Init+0x94>)
 8008232:	f7fb fd4f 	bl	8003cd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	200009d8 	.word	0x200009d8

08008244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800825a:	4618      	mov	r0, r3
 800825c:	f7fa fc56 	bl	8002b0c <HAL_PCD_Start>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f930 	bl	80084cc <USBD_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008270:	7bbb      	ldrb	r3, [r7, #14]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	461a      	mov	r2, r3
 8008288:	4603      	mov	r3, r0
 800828a:	70fb      	strb	r3, [r7, #3]
 800828c:	460b      	mov	r3, r1
 800828e:	70bb      	strb	r3, [r7, #2]
 8008290:	4613      	mov	r3, r2
 8008292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082a2:	78bb      	ldrb	r3, [r7, #2]
 80082a4:	883a      	ldrh	r2, [r7, #0]
 80082a6:	78f9      	ldrb	r1, [r7, #3]
 80082a8:	f7fb f927 	bl	80034fa <HAL_PCD_EP_Open>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f90a 	bl	80084cc <USBD_Get_USB_Status>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fb f970 	bl	80035ca <HAL_PCD_EP_Close>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f8eb 	bl	80084cc <USBD_Get_USB_Status>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	4618      	mov	r0, r3
 8008324:	f7fb fa30 	bl	8003788 <HAL_PCD_EP_SetStall>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f8cc 	bl	80084cc <USBD_Get_USB_Status>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008338:	7bbb      	ldrb	r3, [r7, #14]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7fb fa75 	bl	8003850 <HAL_PCD_EP_ClrStall>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f8ad 	bl	80084cc <USBD_Get_USB_Status>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008376:	7bbb      	ldrb	r3, [r7, #14]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008398:	2b00      	cmp	r3, #0
 800839a:	da0b      	bge.n	80083b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	333e      	adds	r3, #62	; 0x3e
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	e00b      	b.n	80083cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fb f85a 	bl	80034b0 <HAL_PCD_SetAddress>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f862 	bl	80084cc <USBD_Get_USB_Status>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840c:	7bbb      	ldrb	r3, [r7, #14]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	460b      	mov	r3, r1
 8008424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008434:	7af9      	ldrb	r1, [r7, #11]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	f7fb f95b 	bl	80036f4 <HAL_PCD_EP_Transmit>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f841 	bl	80084cc <USBD_Get_USB_Status>
 800844a:	4603      	mov	r3, r0
 800844c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800844e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	460b      	mov	r3, r1
 8008466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008476:	7af9      	ldrb	r1, [r7, #11]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f7fb f8ef 	bl	800365e <HAL_PCD_EP_Receive>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f820 	bl	80084cc <USBD_Get_USB_Status>
 800848c:	4603      	mov	r3, r0
 800848e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008490:	7dbb      	ldrb	r3, [r7, #22]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80084a4:	4b03      	ldr	r3, [pc, #12]	; (80084b4 <USBD_static_malloc+0x18>)
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000ee4 	.word	0x20000ee4

080084b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]

}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d817      	bhi.n	8008510 <USBD_Get_USB_Status+0x44>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_Get_USB_Status+0x1c>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	080084ff 	.word	0x080084ff
 80084f0:	08008505 	.word	0x08008505
 80084f4:	0800850b 	.word	0x0800850b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
    break;
 80084fc:	e00b      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084fe:	2303      	movs	r3, #3
 8008500:	73fb      	strb	r3, [r7, #15]
    break;
 8008502:	e008      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008504:	2301      	movs	r3, #1
 8008506:	73fb      	strb	r3, [r7, #15]
    break;
 8008508:	e005      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800850a:	2303      	movs	r3, #3
 800850c:	73fb      	strb	r3, [r7, #15]
    break;
 800850e:	e002      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	73fb      	strb	r3, [r7, #15]
    break;
 8008514:	bf00      	nop
  }
  return usb_status;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <__libc_init_array>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4d0d      	ldr	r5, [pc, #52]	; (800855c <__libc_init_array+0x38>)
 8008528:	4c0d      	ldr	r4, [pc, #52]	; (8008560 <__libc_init_array+0x3c>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	2600      	movs	r6, #0
 8008530:	42a6      	cmp	r6, r4
 8008532:	d109      	bne.n	8008548 <__libc_init_array+0x24>
 8008534:	4d0b      	ldr	r5, [pc, #44]	; (8008564 <__libc_init_array+0x40>)
 8008536:	4c0c      	ldr	r4, [pc, #48]	; (8008568 <__libc_init_array+0x44>)
 8008538:	f000 f82e 	bl	8008598 <_init>
 800853c:	1b64      	subs	r4, r4, r5
 800853e:	10a4      	asrs	r4, r4, #2
 8008540:	2600      	movs	r6, #0
 8008542:	42a6      	cmp	r6, r4
 8008544:	d105      	bne.n	8008552 <__libc_init_array+0x2e>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	f855 3b04 	ldr.w	r3, [r5], #4
 800854c:	4798      	blx	r3
 800854e:	3601      	adds	r6, #1
 8008550:	e7ee      	b.n	8008530 <__libc_init_array+0xc>
 8008552:	f855 3b04 	ldr.w	r3, [r5], #4
 8008556:	4798      	blx	r3
 8008558:	3601      	adds	r6, #1
 800855a:	e7f2      	b.n	8008542 <__libc_init_array+0x1e>
 800855c:	08008648 	.word	0x08008648
 8008560:	08008648 	.word	0x08008648
 8008564:	08008648 	.word	0x08008648
 8008568:	0800864c 	.word	0x0800864c

0800856c <memcpy>:
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	f100 33ff 	add.w	r3, r0, #4294967295
 8008574:	d100      	bne.n	8008578 <memcpy+0xc>
 8008576:	4770      	bx	lr
 8008578:	b510      	push	{r4, lr}
 800857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008582:	4291      	cmp	r1, r2
 8008584:	d1f9      	bne.n	800857a <memcpy+0xe>
 8008586:	bd10      	pop	{r4, pc}

08008588 <memset>:
 8008588:	4402      	add	r2, r0
 800858a:	4603      	mov	r3, r0
 800858c:	4293      	cmp	r3, r2
 800858e:	d100      	bne.n	8008592 <memset+0xa>
 8008590:	4770      	bx	lr
 8008592:	f803 1b01 	strb.w	r1, [r3], #1
 8008596:	e7f9      	b.n	800858c <memset+0x4>

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
